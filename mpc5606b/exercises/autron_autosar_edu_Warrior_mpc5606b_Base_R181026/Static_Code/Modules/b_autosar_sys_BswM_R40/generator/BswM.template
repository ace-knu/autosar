<?xml version="1.0" encoding="UTF-8"?>
<GENERAL-INFORMATION>

  <!-- Template version -->
  <TEMPLATE-VERSION>2.5.3</TEMPLATE-VERSION>

  <!-- Generation Tool versions which are supported by this Template file -->
  <SUPPORTED-TOOL-VERSIONS>2.5.3</SUPPORTED-TOOL-VERSIONS>

  <!-- Parser Details for Config Module -->
  <PARSER-DETAILS>
    <!-- Module under test -->
    <MODULE-UNDER-TEST>BSWM</MODULE-UNDER-TEST>
    <!-- Mandatory Modules required to Parse BswM -->
    <MANDATORY-MODULES>BSWM OS</MANDATORY-MODULES>
    <!-- All the Modules to be Parsed -->
    <MODULES>BSWM ECUM WDGM COMM COM PDUR CANSM LINSM LINIF FRSM ETHSM DCM NMIF NVM OS DEM ECUC J1939DCM J1939NM J1939RM</MODULES>
    <!-- Modules required MDT File information -->
    <MODULE-UNDER-TEST-MDT>BSWM</MODULE-UNDER-TEST-MDT>    
    <!-- Provide all command line options here in capital case, first letter of each commandline option will also be 
         a valid command line option but it need not be mentioned below.
         command line options should not conflict with each other including the first character of option
    -->
    <CMDLINEOPTIONS>OsConfPrefix</CMDLINEOPTIONS>
    <!-- Containers which contain reference parameters -->
    <REFERENCE-CONTAINER-ARRAY>LogicalExpression ModeCondition Rule ActionListItem CanSMIndication 
    DcmComModeRequest DcmApplicationUpdatedIndication BswMEcuMWakeupSource EthSMIndication FrSMIndication ComMIndication
    ComMPncRequest NvMRequest LinScheduleIndication LinTpModeRequest LinSMIndication
    WdgMRequestPartitionReset BswMPduGroupSwitch BswMComMModeLimitation BswMComMAllowCom 
    BswMComMModeSwitch BswMLinScheduleSwitch BswMDeadlineMonitoringControl BswMPduRouterControl 
    BswMEcuMGoDown BswMEcuMSelectShutdownTarget BswMTriggerIPduSend BswMSwitchIPduMode BswMNMControl 
    TriggerSlaveRTEStop TriggerStartUpPhase2 LinSMChannel LinSMSchedule 
    J1939DcmBroadcastStatus J1939NmIndication BswMJ1939DcmStateSwitch BswMJ1939RmStateSwitch</REFERENCE-CONTAINER-ARRAY>
    
    <!-- Name of the containers and their corresponding reference parameters -->
    <SYMREF-PARAM>
      <ENTRY NAME = 'LogicalExpression'             DETAILS = 'ArgumentRef'></ENTRY>
      <ENTRY NAME = 'ActionListItem'                DETAILS = 'ActionListItemRef ReportFailToDemRef'></ENTRY>
      <ENTRY NAME = 'ModeCondition'                 DETAILS = 'ConditionMode'></ENTRY>
      <ENTRY NAME = 'Rule'                          DETAILS = 'RuleExpressionRef RuleFalseActionList RuleTrueActionList'></ENTRY>
      <ENTRY NAME = 'CanSMIndication'               DETAILS = 'CanSMChannelRef'></ENTRY>
      <ENTRY NAME = 'DcmComModeRequest'             DETAILS = 'DcmComMChannelRef'></ENTRY>
      <ENTRY NAME = 'BswMEcuMWakeupSource'          DETAILS = 'BswMEcuMWakeupSrcRef'></ENTRY>
      <ENTRY NAME = 'EthSMIndication'               DETAILS = 'EthSMChannelRef'></ENTRY>
      <ENTRY NAME = 'FrSMIndication'                DETAILS = 'FrSMChannelRef'></ENTRY>
      <ENTRY NAME = 'ComMIndication'                DETAILS = 'ComMChannelRef'></ENTRY>
      <ENTRY NAME = 'ComMPncRequest'                DETAILS = 'ComMPncRef'></ENTRY>
      <ENTRY NAME = 'NvMRequest'                    DETAILS = 'NvMBlockRef'></ENTRY>
      <ENTRY NAME = 'LinScheduleIndication'         DETAILS = 'LinSMChannelRef'></ENTRY>
      <ENTRY NAME = 'LinScheduleIndication'         DETAILS = 'LinScheduleRef'></ENTRY>
      <ENTRY NAME = 'LinTpModeRequest'              DETAILS = 'LinTpChannelRef'></ENTRY>
      <ENTRY NAME = 'LinSMIndication'               DETAILS = 'LinSMChannelRef'></ENTRY>
      <ENTRY NAME = 'WdgMRequestPartitionReset'     DETAILS = 'WdgMRequestPartitionResetRef'></ENTRY>
      <ENTRY NAME = 'BswMPduGroupSwitch'            DETAILS = 'BswMEnabledPduGroupRef BswMDisabledPduGroupRef'></ENTRY>
      <ENTRY NAME = 'BswMComMModeLimitation'        DETAILS = 'BswMComMLimitChannelRef'></ENTRY>
      <ENTRY NAME = 'BswMComMAllowCom'              DETAILS = 'BswMComMAllowChannelRef'></ENTRY>
      <ENTRY NAME = 'BswMComMModeSwitch'            DETAILS = 'BswMComMUserRef'></ENTRY>
      <ENTRY NAME = 'BswMLinScheduleSwitch'         DETAILS = 'BswMLinScheduleRef'></ENTRY>
      <ENTRY NAME = 'BswMDeadlineMonitoringControl' DETAILS = 'BswMDisabledDMPduGroupRef BswMEnabledDMPduGroupRef'></ENTRY>
      <ENTRY NAME = 'BswMPduRouterControl'          DETAILS = 'BswMPduRoutingPathGroupRef'></ENTRY>
      <ENTRY NAME = 'BswMEcuMGoDown'                DETAILS = 'BswMEcuMUserIdRef'></ENTRY>
      <ENTRY NAME = 'BswMEcuMSelectShutdownTarget'  DETAILS = 'BswMEcuMSleepModeRef BswMEcuMResetModeRef'></ENTRY>
      <ENTRY NAME = 'BswMTriggerIPduSend'           DETAILS = 'BswMTriggeredIPduRef'></ENTRY>
      <ENTRY NAME = 'BswMSwitchIPduMode'            DETAILS = 'BswMSwitchIPduModeRef'></ENTRY>
      <ENTRY NAME = 'BswMNMControl'                 DETAILS = 'BswMComMNetworkHandleRef'></ENTRY>      
      <ENTRY NAME = 'TriggerSlaveRTEStop'           DETAILS = 'OsTaskRef'></ENTRY>
      <ENTRY NAME = 'TriggerStartUpPhase2'          DETAILS = 'OsTaskRef'></ENTRY>
      <ENTRY NAME = 'LinSMChannel'                  DETAILS = 'LinSMComMNetworkHandleRef'></ENTRY>
      <ENTRY NAME = 'BswMRteSwitch'                 DETAILS = 'BswMRteSwitchPortRef'></ENTRY>
      <ENTRY NAME = 'J1939DcmBroadcastStatus'       DETAILS = 'J1939DcmChannelRef'></ENTRY>
      <ENTRY NAME = 'J1939NmIndication'             DETAILS = 'J1939NmChannelRef J1939NmNodeRef'></ENTRY>
      <ENTRY NAME = 'BswMJ1939DcmStateSwitch'       DETAILS = 'BswMJ1939DcmChannelRef BswMJ1939DcmNodeRef'></ENTRY>
      <ENTRY NAME = 'BswMJ1939RmStateSwitch'        DETAILS = 'BswMJ1939RmChannelRef BswMJ1939RmNodeRef'></ENTRY>
      
    </SYMREF-PARAM>
    <!-- For each reference parameters corresponding destination containers and parameters -->
    <REFERENCES>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ActionListItemRef'                DESTINATION-CONTAINER = 'Action|ActionList|Rule'          DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ReportFailToDemRef'               DESTINATION-CONTAINER = 'DemEventParameter'               DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMDisabledPduGroupRef'          DESTINATION-CONTAINER = 'ComIPduGroup'                    DESTINATION-PARAMETER = 'ComIPduGroupHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEnabledPduGroupRef'           DESTINATION-CONTAINER = 'ComIPduGroup'                    DESTINATION-PARAMETER = 'ComIPduGroupHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMDisabledDMPduGroupRef'        DESTINATION-CONTAINER = 'ComIPduGroup'                    DESTINATION-PARAMETER = 'ComIPduGroupHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEnabledDMPduGroupRef'         DESTINATION-CONTAINER = 'ComIPduGroup'                    DESTINATION-PARAMETER = 'ComIPduGroupHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMPduRoutingPathGroupRef'       DESTINATION-CONTAINER = 'PduRRoutingPathGroup'            DESTINATION-PARAMETER = 'PduRRoutingPathGroupId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMTriggeredIPduRef'             DESTINATION-CONTAINER = 'ComIPdu'                         DESTINATION-PARAMETER = 'ComIPduHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RuleExpressionRef'                DESTINATION-CONTAINER = 'LogicalExpression'               DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RuleFalseActionList'              DESTINATION-CONTAINER = 'ActionList'                      DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RuleTrueActionList'               DESTINATION-CONTAINER = 'ActionList'                      DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'CanSMChannelRef'              DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DcmComMChannelRef'            DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEcuMWakeupSrcRef'         DESTINATION-CONTAINER = 'EcuMWakeupSource'                DESTINATION-PARAMETER = 'EcuMWakeupSourceId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'EthSMChannelRef'              DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'FrSMChannelRef'               DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ComMChannelRef'               DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ComMPncRef'                   DESTINATION-CONTAINER = 'ComMPnc'                         DESTINATION-PARAMETER = 'ComMPncId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'NvMBlockRef'                  DESTINATION-CONTAINER = 'NvMBlockDescriptor'              DESTINATION-PARAMETER = 'NvMNvramBlockIdentifier'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'LinScheduleRef'               DESTINATION-CONTAINER = 'LinSMSchedule'                   DESTINATION-PARAMETER = 'LinSMScheduleIndex'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'LinTpChannelRef'              DESTINATION-CONTAINER = 'LinIfChannel'                    DESTINATION-PARAMETER = 'LinIfChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'LinSMChannelRef'              DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ConditionMode'                    DESTINATION-CONTAINER = 'ModeRequestPort'                 DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ArgumentRef'                      DESTINATION-CONTAINER = 'ModeCondition|LogicalExpression' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'WdgMRequestPartitionResetRef'     DESTINATION-CONTAINER = 'EcucPartition'                   DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMComMLimitChannelRef'          DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMComMAllowChannelRef'          DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMComMUserRef'                  DESTINATION-CONTAINER = 'ComMUser'                        DESTINATION-PARAMETER = 'ComMUserIdentifier'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMLinScheduleRef'               DESTINATION-CONTAINER = 'LinSMSchedule'                   DESTINATION-PARAMETER = 'LinSMScheduleIndex'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEcuMUserIdRef'                DESTINATION-CONTAINER = 'EcuMFlexUserConfig'              DESTINATION-PARAMETER = 'EcuMFlexUser'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEcuMSleepModeRef'             DESTINATION-CONTAINER = 'EcuMSleepMode'                   DESTINATION-PARAMETER = 'EcuMSleepModeId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMEcuMResetModeRef'             DESTINATION-CONTAINER = 'EcuMResetMode'                   DESTINATION-PARAMETER = 'EcuMResetModeId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMSwitchIPduModeRef'            DESTINATION-CONTAINER = 'ComIPdu'                         DESTINATION-PARAMETER = 'ComIPduHandleId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMComMNetworkHandleRef'         DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'OsTaskRef'                        DESTINATION-CONTAINER = 'OsTask'                          DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'LinSMComMNetworkHandleRef'        DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'J1939DcmChannelRef'               DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'J1939NmChannelRef'                DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'J1939NmNodeRef'                   DESTINATION-CONTAINER = 'J1939NmNode'                     DESTINATION-PARAMETER = 'J1939NmNodeId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMJ1939DcmChannelRef'           DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMJ1939DcmNodeRef'              DESTINATION-CONTAINER = 'J1939NmNode'                     DESTINATION-PARAMETER = 'J1939NmNodeId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMJ1939RmChannelRef'            DESTINATION-CONTAINER = 'ComMChannel'                     DESTINATION-PARAMETER = 'ComMChannelId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'BswMJ1939RmNodeRef'               DESTINATION-CONTAINER = 'J1939NmNode'                     DESTINATION-PARAMETER = 'J1939NmNodeId'></REFERENCE-PARAM-DETAIL>
    </REFERENCES>
    <!-- To check if the correct description file is provided as input.
      ArReleaseVersion in the description file is compared with the below versions -->
    <FOR-VERSION-CHECK>
      <VERSIONS>4.0.3</VERSIONS>
      <MESSAGE-TYPE>INF</MESSAGE-TYPE>
    </FOR-VERSION-CHECK>  
    <!-- If parameter multiplicity is more than one -->
    <PARAM-MULTIPLICITY>
      <ENTRY>FileInclusions</ENTRY>
      <ENTRY>UserIncludeFile</ENTRY>
      <ENTRY>ArgumentRef</ENTRY>
      <ENTRY>BswMDisabledPduGroupRef</ENTRY>
      <ENTRY>BswMEnabledPduGroupRef</ENTRY>
      <ENTRY>BswMDisabledDMPduGroupRef</ENTRY>
      <ENTRY>BswMEnabledDMPduGroupRef</ENTRY>
      <ENTRY>BswMPduRoutingPathGroupRef</ENTRY>
      <ENTRY>BswMTriggeredIPduRef</ENTRY>
      <ENTRY>BswMDataTypeMappingSetRef</ENTRY>
      <ENTRY>OsAppTaskRef</ENTRY>
    </PARAM-MULTIPLICITY>
    
    <!-- For the parameters listed below reference need not be configured -->
    <REF-MUL>
      <ENTRY>ReportFailToDemRef</ENTRY>
      <ENTRY>BswMDisabledPduGroupRef</ENTRY>
      <ENTRY>BswMEnabledPduGroupRef</ENTRY>
      <ENTRY>BswMDisabledDMPduGroupRef</ENTRY>
      <ENTRY>BswMEnabledDMPduGroupRef</ENTRY>
      <ENTRY>BswMPduRoutingPathGroupRef</ENTRY>
      <ENTRY>BswMTriggeredIPduRef</ENTRY>
      <ENTRY>RuleFalseActionList</ENTRY>
      <ENTRY>RuleTrueActionList</ENTRY>
      <ENTRY>BswMEcuMSleepModeRef</ENTRY>
      <ENTRY>BswMEcuMResetModeRef</ENTRY>
    </REF-MUL>
    
    <PARAMETER-COPY>
      <ENTRY NAME = 'BswMLinScheduleRef'               DETAILS = 'BswMLinScheduleRef_NetworId'></ENTRY>
      <ENTRY NAME = 'BswMEcuMWakeupSrcRef'             DETAILS = 'BswMEcuMWakeupSrcRef_EcuMId'></ENTRY>
    </PARAMETER-COPY>
  </PARSER-DETAILS>
  <!-- Map Names -->
  <MAP-NAMES>
    <!-- List all SWC related tags for which map names are required -->
    <SWC-DETAILS>
      <SWC-TAG ORIGINAL-NAME = 'ACCESSED-MODE-GROUP'                           MAP-NAME = 'Amg'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'ACCESSED-MODE-GROUPS'                           MAP-NAME = 'Amgs'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'APPLICATION-SW-COMPONENT-TYPE'                  MAP-NAME = 'AppSwc'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'AR-RELEASE-VERSION'                             MAP-NAME = 'ArReleaseVersion'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BEHAVIOR-REF'                                   MAP-NAME = 'BehaviorRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-BACKGROUND-EVENT'                           MAP-NAME = 'BswBgEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-BEHAVIOR-REF'                               MAP-NAME = 'BswBehavRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-IMPLEMENTATION'                             MAP-NAME = 'BswImplementation'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-INTERNAL-BEHAVIOR'                          MAP-NAME = 'BswIntBehavior'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-INTERNAL-TRIGGER-OCCURRED-EVENT'            MAP-NAME = 'BswIntTrigEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-MODE-SWITCH-EVENT'                          MAP-NAME = 'BswMswEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-MODULE-DESCRIPTION'                         MAP-NAME = 'BswModDescription'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-MODULE-ENTRY'                               MAP-NAME = 'BswModEntry'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-SCHEDULABLE-ENTITY'                         MAP-NAME = 'BswSchEntity'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-TIMING-EVENT'                               MAP-NAME = 'BswTimingEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'CAN-BE-INVOKED-CONCURRENTLY'                    MAP-NAME = 'CanBeInvokedConcurrently'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'CLIENT-SERVER-INTERFACE'                        MAP-NAME = 'CsIf'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'COMPONENTS'                                     MAP-NAME = 'Components'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'COMPOSITION-SW-COMPONENT-TYPE'                  MAP-NAME = 'CompSwcTyp'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'COMPU-METHOD'                                   MAP-NAME = 'CompuMethod'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'CONTEXT-MODE-DECLARATION-GROUP-PROTOTYPE-REF'   MAP-NAME = 'CntxtModeDecGrpProtoRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'CONTEXT-PORT-REF'                               MAP-NAME = 'CntxtPortRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-CONSTR'                                    MAP-NAME = 'DataConstr'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-CONSTR-RULES'                              MAP-NAME = 'DataConstr'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-ELEMENTS'                                  MAP-NAME = 'DataElem'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-IREF'                                      MAP-NAME = 'DataIref'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-READ-ACCESSS'                              MAP-NAME = 'Dras'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVED-EVENT'                            MAP-NAME = 'DrEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVE-ERROR-EVENT'                       MAP-NAME = 'DreEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVE-POINT-BY-ARGUMENT'                 MAP-NAME = 'DrpArg'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVE-POINT-BY-ARGUMENTS'                MAP-NAME = 'DrpArgs'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVE-POINT-BY-VALUE'                    MAP-NAME = 'DrpVal'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-RECEIVE-POINT-BY-VALUES'                   MAP-NAME = 'DrpVals'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-SEND-COMPLETED-EVENT'                      MAP-NAME = 'DscEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-SEND-POINTS'                               MAP-NAME = 'Dsps'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-TYPE-MAPPING-SET'                          MAP-NAME = 'DataTypMapSet'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-TYPE-MAP'                                  MAP-NAME = 'DataTypMap'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'DATA-TYPE-MAPS'                                 MAP-NAME = 'DataTypMaps'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'ECU-ABSTRACTION-SW-COMPONENT-TYPE'              MAP-NAME = 'EcuAbSwc'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'EXCLUSIVE-AREA'                                 MAP-NAME = 'ExclArea'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'IMPLEMENTATION-DATA-TYPE'                       MAP-NAME = 'ImplDataType'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'IMPLEMENTATION-DATA-TYPE-REF'                   MAP-NAME = 'ImplDataTypeRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'IMPLEMENTED-ENTRY-REF'                          MAP-NAME = 'ImplEntryRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'INTERNAL-BEHAVIORS'                             MAP-NAME = 'IntBehaviors'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-ACCESS-POINT'                              MAP-NAME = 'Dap'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-ACCESS-POINTS'                             MAP-NAME = 'Daps'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-DECLARATION'                               MAP-NAME = 'ModDeclare'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-DECLARATIONS'                              MAP-NAME = 'ModDeclares'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-DECLARATION-GROUP'                         MAP-NAME = 'ModeDecGroup'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-DECLARATION-GROUP-PROTOTYPE'               MAP-NAME = 'ModeDecGrpProto'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-DECLARATION-GROUP-PROTOTYPE-REF-CONDITIONAL' MAP-NAME = 'ModeDecGrpProtoRefCond'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-GROUP'                                     MAP-NAME = 'ModeGroup'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-GROUP-REF'                                 MAP-NAME = 'ModeGroupRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-IREFS'                                     MAP-NAME = 'ModeIrefs'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-IREF'                                      MAP-NAME = 'ModeIref'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-REQUEST-TYPE-MAP'                          MAP-NAME = 'ModeReqTypMap'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-REQUEST-TYPE-MAPS'                         MAP-NAME = 'ModeReqTypMaps'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-SWITCH-INTERFACE'                          MAP-NAME = 'ModeSwtIf'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODE-SWITCH-POINT'                              MAP-NAME = 'ModeSwitchPoint'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'MODULE-ID'                                      MAP-NAME = 'ModuleId'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'OPERATION-INVOKED-EVENT'                        MAP-NAME = 'OpInvEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'PERIOD'                                         MAP-NAME = 'Period'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'PORTS'                                          MAP-NAME = 'Ports'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'P-PORT-PROTOTYPE'                               MAP-NAME = 'Pport'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'PROVIDED-INTERFACE-TREF'                        MAP-NAME = 'ProvidedInterTref'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'PROVIDED-MODE-GROUPS'                           MAP-NAME = 'ProvidedModeGrp'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'REQUIRED-INTERFACE-TREF'                        MAP-NAME = 'ReqInterTref'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'REQUIRED-MODE-GROUPS'                           MAP-NAME = 'ReqModeGrp'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'R-PORT-PROTOTYPE'                               MAP-NAME = 'Rport'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'RUNNABLE-ENTITY'                                MAP-NAME = 'RunnableEntity'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SENDER-RECEIVER-INTERFACE'                      MAP-NAME = 'SrIf'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SERVICE-SW-COMPONENT-TYPE'                      MAP-NAME = 'SvcSwc'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SHORT-NAME'                                     MAP-NAME = 'ShortName'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'START-ON-EVENT-REF'                             MAP-NAME = 'RunRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'STARTS-ON-EVENT-REF'                            MAP-NAME = 'RunRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SW-DATA-DEF-PROPS'                              MAP-NAME = 'SwDataDefProps'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SW-VERSION'                                     MAP-NAME = 'SwVersion'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-BEHAVIOR-REF'                               MAP-NAME = 'SwcBehavRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-BSW-MAPPING'                                MAP-NAME = 'SwcBswMap'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-BSW-MAPPING-REF'                            MAP-NAME = 'SwcBswMapRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-IMPLEMENTATION'                             MAP-NAME = 'SwcImpl'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-INTERNAL-BEHAVIOR'                          MAP-NAME = 'SwcIntBehav'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SWC-MODE-SWITCH-EVENT'                          MAP-NAME = 'SwcMswEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'SYMBOL'                                         MAP-NAME = 'Symbol'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'TARGET-DATA-ELEMENT-REF'                        MAP-NAME = 'TargDataElemRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'TIMING-EVENT'                                   MAP-NAME = 'TimingEvent'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'TYPE-TREF'                                      MAP-NAME = 'TypTRef'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'VARIABLE-DATA-PROTOTYPE'                        MAP-NAME = 'VarDataProto'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'VENDOR-API-INFIX'                               MAP-NAME = 'VendorApiInfix'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'VENDOR-ID'                                      MAP-NAME = 'VendorId'></SWC-TAG>
      <SWC-TAG ORIGINAL-NAME = 'BSW-MODE-RECEIVER-POLICY'                       MAP-NAME = 'BswRPolicy'></SWC-TAG>
    </SWC-DETAILS>    
    <CONTAINER-DETAILS>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMGeneral'                 MAP-NAME = 'BswMGeneral'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMDevErrorDetect'         MAP-NAME = 'DevErrorDetect'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMVersionInfoApi'         MAP-NAME = 'VersionInfoApi'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMPackageId'              MAP-NAME = 'PackageId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMMainFunctionPeriod'     MAP-NAME = 'MainFunctionPeriod'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMCanSMEnabled'           MAP-NAME = 'CanSMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMComMEnabled'            MAP-NAME = 'ComMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMDcmEnabled'             MAP-NAME = 'DcmEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMEcuMEnabled'            MAP-NAME = 'EcuMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMEthSMEnabled'           MAP-NAME = 'EthSMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMFrSMEnabled'            MAP-NAME = 'FrSMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMGenericRequestEnabled'  MAP-NAME = 'GenericRequestEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinSMEnabled'           MAP-NAME = 'LinSMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinTPEnabled'           MAP-NAME = 'LinTPEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMNvMEnabled'             MAP-NAME = 'NvMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMSchMEnabled'            MAP-NAME = 'SchMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMWdgMEnabled'            MAP-NAME = 'WdgMEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMJ1939DcmEnabled'        MAP-NAME = 'J1939DcmEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMJ1939NmEnabled'         MAP-NAME = 'J1939NmEnabled'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMUserIncludeFiles'       MAP-NAME = 'UserIncludeFiles'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMUserIncludeFile'      MAP-NAME = 'UserIncludeFile'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMLogicalExpression'       MAP-NAME = 'LogicalExpression'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLogicalOperator' MAP-NAME = 'LogicalOperator'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMArgumentRef'     MAP-NAME = 'ArgumentRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeCondition'           MAP-NAME = 'ModeCondition'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMConditionType' MAP-NAME = 'ConditionType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMConditionMode' MAP-NAME = 'ConditionMode'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMConditionValue'          MAP-NAME = 'ConditionValue'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMBswMode'                 MAP-NAME = 'BswMode'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMBswRequestedMode'      MAP-NAME = 'BswRequestedMode'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeDeclaration'         MAP-NAME = 'ModeDeclaration'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMModeValueRef'          MAP-NAME = 'ModeValueRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeRequestPort'         MAP-NAME = 'ModeRequestPort'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRequestProcessing'     MAP-NAME = 'RequestProcessing'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMRule'                    MAP-NAME = 'Rule'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMNestedExecutionOnly' MAP-NAME = 'NestedExecutionOnly'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRuleInitState'       MAP-NAME = 'RuleInitState'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRuleExpressionRef'   MAP-NAME = 'RuleExpressionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRuleFalseActionList' MAP-NAME = 'RuleFalseActionList'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRuleTrueActionList'  MAP-NAME = 'RuleTrueActionList'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeInitValue'           MAP-NAME = 'ModeInitValue'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMBswModeInitValue'        MAP-NAME = 'BswModeInitValue'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMBswModeInitValueMode'  MAP-NAME = 'BswModeInitValueMode'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMSwcModeInitValue'         MAP-NAME = 'SwcModeInitValue'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMSwcModeInitValueRef'    MAP-NAME = 'SwcModeInitValueRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>                  
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeControl'             MAP-NAME = 'ModeControl'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMAction'                  MAP-NAME = 'Action'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMAvailableActions'        MAP-NAME = 'AvailableActions'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMArbitration'             MAP-NAME = 'Arbitration'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMConfig'                  MAP-NAME = 'Config'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMModeRequestSource'       MAP-NAME = 'ModeRequestSource'></CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMActionList'              MAP-NAME = 'ActionList'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMActionListExecution' MAP-NAME = 'ActionListExecution'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMActionListItem'          MAP-NAME = 'ActionListItem'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMAbortOnFail'         MAP-NAME = 'AbortOnFail'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMActionListItemIndex' MAP-NAME = 'ActionListItemIndex'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMActionListItemRef'   MAP-NAME = 'ActionListItemRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMReportFailToDemRef'  MAP-NAME = 'ReportFailToDemRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMSwcModeRequest'                                        MAP-NAME = 'SwcModeRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMSwcModeRequestVariableDataPrototypeRef'        MAP-NAME = 'SwcModeRequestVariableDataPrototypeRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMSwcModeNotification'                                   MAP-NAME = 'SwcModeNotification'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMSwcModeNotificationModeDeclarationGroupPrototypeRef' MAP-NAME = 'SwcModeNotificationModeDeclarationGroupPrototypeRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMBswModeNotification'                                   MAP-NAME = 'BswModeNotification'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMBswModeDeclarationGroupPrototypeRef'     MAP-NAME = 'BswModeDeclarationGroupPrototypeRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMCanSMIndication'                                   MAP-NAME = 'CanSMIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMCanSMChannelRef'                                 MAP-NAME = 'CanSMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMDcmComModeRequest'                                   MAP-NAME = 'DcmComModeRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMDcmComMChannelRef' MAP-NAME = 'DcmComMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMDcmApplicationUpdatedIndication'                     MAP-NAME = 'DcmApplicationUpdatedIndication'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMComMIndication'                                   MAP-NAME = 'ComMIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMComMChannelRef' MAP-NAME = 'ComMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMComMPncRequest'                                   MAP-NAME = 'ComMPncRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMComMPncRef'                                   MAP-NAME = 'ComMPncRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMEcuMIndication'                                   MAP-NAME = 'EcuMIndication'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMEcuMWakeupSource'                                   MAP-NAME = 'BswMEcuMWakeupSource'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMEcuMWakeupSrcRef'                              MAP-NAME = 'BswMEcuMWakeupSrcRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMEthSMIndication'                                   MAP-NAME = 'EthSMIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMEthSMChannelRef'                          MAP-NAME = 'EthSMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMFrSMIndication'                                   MAP-NAME = 'FrSMIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMFrSMChannelRef'                         MAP-NAME = 'FrSMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMGenericRequest'                                   MAP-NAME = 'BswMGenericRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMModeRequesterId'                               MAP-NAME = 'ModeRequesterId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMRequestedModeMax'                             MAP-NAME = 'RequestedModeMax'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMLinSMIndication'                                   MAP-NAME = 'LinSMIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinSMChannelRef'                          MAP-NAME = 'LinSMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMLinScheduleIndication'                                   MAP-NAME = 'LinScheduleIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinSMChannelRef'                          MAP-NAME = 'LinSMChannelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinScheduleRef'                           MAP-NAME = 'LinScheduleRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMLinTpModeRequest'                                   MAP-NAME = 'LinTpModeRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMLinTpChannelRef'                            MAP-NAME = 'LinTpChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMNvMJobModeIndication'                                   MAP-NAME = 'NvMJobModeIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMNvmService'                               MAP-NAME = 'NvmService'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMNvMRequest'                                   MAP-NAME = 'NvMRequest'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMNvMBlockRef'            MAP-NAME = 'NvMBlockRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMWdgMRequestPartitionReset'                                   MAP-NAME = 'WdgMRequestPartitionReset'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMWdgMRequestPartitionResetRef'                 MAP-NAME = 'WdgMRequestPartitionResetRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMTriggerStartUpPhase2'         MAP-NAME = 'TriggerStartUpPhase2'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMCoreId'                     MAP-NAME = 'CoreId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMOsTaskRef'                  MAP-NAME = 'OsTaskRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMTriggerSlaveRTEStop'         MAP-NAME = 'TriggerSlaveRTEStop'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMCoreId'                    MAP-NAME = 'CoreId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMOsTaskRef'                 MAP-NAME = 'OsTaskRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMUserCallout'                 MAP-NAME = 'UserCallout'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMUserCalloutFunction'       MAP-NAME = 'UserCalloutFunction'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMDataTypeMappingSets'         MAP-NAME = 'DataTypeMappingSets'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMDataTypeMappingSetRef'     MAP-NAME = 'DataTypeMappingSetRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMSwitchPort'         MAP-NAME = 'BswMSwitchPort'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMModeSwitchInterfaceRef'    MAP-NAME = 'BswMModeSwitchInterfaceRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMJ1939DcmBroadcastStatus'         MAP-NAME = 'J1939DcmBroadcastStatus'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMJ1939DcmChannelRef'    MAP-NAME = 'J1939DcmChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'BswMJ1939NmIndication'         MAP-NAME = 'J1939NmIndication'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMJ1939NmChannelRef'    MAP-NAME = 'J1939NmChannelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'BswMJ1939NmNodeRef'    MAP-NAME = 'J1939NmNodeRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
    </CONTAINER-DETAILS>
  </MAP-NAMES>

  <!-- Container Count -->
  <CONTAINER-COUNTS>
    <CONTAINER-COUNT MAP-NAME = 'CommonPublishedInformation' COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'BswMGeneral'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'LogicalExpression'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ModeCondition'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ModeRequestPort'            COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Rule'                       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ActionList'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ActionListItem'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'BswMRteSwitch'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'BswMSchMSwitch'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'SwcModeRequest'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'SwcModeNotification'        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'BswModeNotification'        COUNT = '0'></CONTAINER-COUNT>
  </CONTAINER-COUNTS>

  <!-- Pre compile options -->
  <PRE-COMPILE-OPTIONS>
    <MACRO-ENTRY
      Name      = 'BSWM_CANSM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '3'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from CanSM'
      TestContainer = 'CanSMIndication'
      Container = 'BswMGeneral'
      Parameter = 'CanSMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_COMM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '4'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from ComM'
      TestContainer = 'ComMPncRequest#ComMIndication'
      Container = 'BswMGeneral'
      Parameter = 'ComMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_DCM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '5'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from Dcm'
      TestContainer = 'DcmComModeRequest#DcmApplicationUpdatedIndication'
      Container = 'BswMGeneral'
      Parameter = 'DcmEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_ECUM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '6'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from EcuM'
      TestContainer = 'EcuMIndication#BswMEcuMWakeupSource'
      Container = 'BswMGeneral'
      Parameter = 'EcuMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_ETHSM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '7'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from EthSM'
      TestContainer = 'EthSMIndication'
      Container = 'BswMGeneral'
      Parameter = 'EthSMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_FRSM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '8'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from ComM'
      TestContainer = 'FrSMIndication'
      Container = 'BswMGeneral'
      Parameter = 'FrSMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_GENERIC_REQUEST_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '9'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the Generic indication/request'
      TestContainer = 'BswMGenericRequest'
      Container = 'BswMGeneral'
      Parameter = 'GenericRequestEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_LINSM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '10'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from LinSM'
      TestContainer = 'LinSMIndication#LinScheduleIndication'
      Container = 'BswMGeneral'
      Parameter = 'LinSMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_LINTP_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '11'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from LinTP'
      TestContainer = 'LinTpModeRequest'
      Container = 'BswMGeneral'
      Parameter = 'LinTPEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_NVM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '12'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from NvM'
      TestContainer = 'NvMJobModeIndication#NvMRequest'
      Container = 'BswMGeneral'
      Parameter = 'NvMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_SCHM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '13'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from SchM'
      TestContainer = 'BswModeNotification'
      Container = 'BswMGeneral'
      Parameter = 'SchMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_WDGM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '14'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from WdgM'
      TestContainer = 'WdgMRequestPartitionReset'
      Container = 'BswMGeneral'
      Parameter = 'WdgMEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_J1939DCM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '15'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from J1939 Dcm'
      TestContainer = 'J1939DcmBroadcastStatus#J1939DcmChannelRef'
      Container = 'BswMGeneral'
      Parameter = 'J1939DcmEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_J1939NM_ENABLED'
      Type      = '1'
      Value     = '(STD_OFF)'
      Pos       = '16'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option to enable/disable the indication/request from J1939 Nm'
      TestContainer = 'J1939NmIndication'
      Container = 'BswMGeneral'
      Parameter = 'J1939NmEnabled' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_MAIN_FUNCTION_PERIOD'
      Type      = '2'
      Value     = '0'
      Pos       = '15'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Main function period'
      Container = 'BswMGeneral'
      Parameter = 'MainFunctionPeriod' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_DEV_ERROR_DETECT'
      Type      = '6'
      Value     = '(STD_OFF)'
      Pos       = '1'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Development Error Checking'
      Container = 'BswMGeneral'
      Parameter = 'DevErrorDetect' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_VERSION_INFO_API'
      Type      = '6'
      Value     = '(STD_OFF)'
      Pos       = '2'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Version Info API'
      Container = 'BswMGeneral'
      Parameter = 'VersionInfoApi' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_BSW_MODE_NOTIFICATION_ENABLED'
      Type      = '7'
      Value     = '(STD_OFF)'
      Pos       = '30'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Bsw Notification support'
      Container = 'BswModeNotification' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_SWC_MODE_NOTIFICATION_ENABLED'
      Type      = '7'
      Value     = '(STD_OFF)'
      Pos       = '31'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Swc Notification support'
      Container = 'SwcModeNotification' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_SWC_MODE_REQUEST_ENABLED'
      Type      = '7'
      Value     = '(STD_OFF)'
      Pos       = '32'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Swc Request support'
      Container = 'SwcModeRequest' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'BSWM_DEMERROR_REPORT'
      Type      = '10'
      Value     = '(STD_OFF)'
      Pos       = '18'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'To check if Dem is enable or not'
      Container = 'ActionListItem'
      Parameter = 'ReportFailToDemRef' >
    </MACRO-ENTRY>
  </PRE-COMPILE-OPTIONS>
  
  <!-- Pointer Cast -->
  <POINTER-CAST>
    <ENTRY NAME = '' FIELD = '' DETAILS = ''></ENTRY>
  </POINTER-CAST>
  
  <!-- Decimal Fields -->
  <DECIMAL-FIELDS>
    <ENTRY></ENTRY>
  </DECIMAL-FIELDS>
  
  <!-- Contains all consistency checks -->
  <CONSISTENCY-CHECKS>
    <!-- Mandatory check -->
    <MANDATORY-CHECK>
      <CONTAINER NAME = 'UserIncludeFiles'>
        <PARAMETER-NAME>UserIncludeFile</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ModeRequestPort'>
        <PARAMETER-NAME>RequestProcessing</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'Rule'>
        <PARAMETER-NAME>NestedExecutionOnly</PARAMETER-NAME>
        <PARAMETER-NAME>RuleInitState</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMode'>
        <PARAMETER-NAME>BswRequestedMode</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ModeDeclaration'>
        <PARAMETER-NAME>ModeValueRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ActionList'>
        <PARAMETER-NAME>ActionListExecution</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ActionListItem'>
        <PARAMETER-NAME>AbortOnFail</PARAMETER-NAME>
        <PARAMETER-NAME>ActionListItemIndex</PARAMETER-NAME>
        <PARAMETER-NAME>ActionListItemRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswModeInitValue'>
        <PARAMETER-NAME>BswModeInitValueMode</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'SwcModeInitValue'>
        <PARAMETER-NAME>SwcModeInitValueRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMSwitchPort'>
        <PARAMETER-NAME>BswMModeSwitchInterfaceRef</PARAMETER-NAME>
      </CONTAINER>

      <!-- Action choice containers -->
      <CONTAINER NAME = 'BswMComMAllowCom'>
        <PARAMETER-NAME>BswMComAllowed</PARAMETER-NAME>
        <PARAMETER-NAME>BswMComMAllowChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMComMModeLimitation'>
        <PARAMETER-NAME>BswMComMLimitMode</PARAMETER-NAME>
        <PARAMETER-NAME>BswMComMLimitChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMComMModeSwitch'>
        <PARAMETER-NAME>BswMComMRequestedMode</PARAMETER-NAME>
        <PARAMETER-NAME>BswMComMUserRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMEcuMGoDown'>
        <PARAMETER-NAME>BswMEcuMUserIdRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMEcuMSelectShutdownTarget'>
        <PARAMETER-NAME>BswMEcuMShutdownTarget</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMFrSMSetEcuPassive'>
        <PARAMETER-NAME>BswMFrSMPassiveEnabled</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMLinScheduleSwitch'>
        <PARAMETER-NAME>BswMLinScheduleRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMNMControl'>
        <PARAMETER-NAME>BswMNMAction</PARAMETER-NAME>
        <PARAMETER-NAME>BswMComMNetworkHandleRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMPduGroupSwitch'>
        <PARAMETER-NAME>BswMPduGroupSwitchReinit</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMPduRouterControl'>
        <PARAMETER-NAME>BswMPduRouterAction</PARAMETER-NAME>
        <PARAMETER-NAME>BswMPduRoutingPathGroupRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMSwitchIPduMode'>
        <PARAMETER-NAME>BswMSwitchIPduModeValue</PARAMETER-NAME>
        <PARAMETER-NAME>BswMSwitchIPduModeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMTriggerIPduSend'>
        <PARAMETER-NAME>BswMTriggeredIPduRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'TriggerSlaveRTEStop'>
        <PARAMETER-NAME>CoreId</PARAMETER-NAME>
        <PARAMETER-NAME>OsTaskRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'TriggerStartUpPhase2'>
        <PARAMETER-NAME>CoreId</PARAMETER-NAME>
        <PARAMETER-NAME>OsTaskRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'UserCallout'>
        <PARAMETER-NAME>UserCalloutFunction</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMRteSwitch'>
        <PARAMETER-NAME>BswMSwitchedMode</PARAMETER-NAME>
        <PARAMETER-NAME>BswMRteSwitchPortRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMSchMSwitch'>
        <PARAMETER-NAME>BswMSchMSwitchedMode</PARAMETER-NAME>
        <PARAMETER-NAME>BswMSchMModeDeclarationGroupRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMJ1939DcmStateSwitch'>
        <PARAMETER-NAME>BswMJ1939DcmRequestedState</PARAMETER-NAME>
        <PARAMETER-NAME>BswMJ1939DcmChannelRef</PARAMETER-NAME>
        <PARAMETER-NAME>BswMJ1939DcmNodeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMJ1939RmStateSwitch'>
        <PARAMETER-NAME>BswMJ1939RmRequestedState</PARAMETER-NAME>
        <PARAMETER-NAME>BswMJ1939RmChannelRef</PARAMETER-NAME>
        <PARAMETER-NAME>BswMJ1939RmNodeRef</PARAMETER-NAME>
      </CONTAINER>

      <!-- Mode port choice containers -->
      <CONTAINER NAME = 'CanSMIndication'>
        <PARAMETER-NAME>CanSMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ComMIndication'>
        <PARAMETER-NAME>ComMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ComMPncRequest'>
        <PARAMETER-NAME>ComMPncRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DcmComModeRequest'>
        <PARAMETER-NAME>DcmComMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMEcuMWakeupSource'>
        <PARAMETER-NAME>BswMEcuMWakeupSrcRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'EthSMIndication'>
        <PARAMETER-NAME>EthSMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'FrSMIndication'>
        <PARAMETER-NAME>FrSMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'LinSMIndication'>
        <PARAMETER-NAME>LinSMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'LinScheduleIndication'>
        <PARAMETER-NAME>LinSMChannelRef</PARAMETER-NAME>
        <PARAMETER-NAME>LinScheduleRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'LinTpModeRequest'>
        <PARAMETER-NAME>LinTpChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'NvMJobModeIndication'>
        <PARAMETER-NAME>NvmService</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'NvMRequest'>
        <PARAMETER-NAME>NvMBlockRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'WdgMRequestPartitionReset'>
        <PARAMETER-NAME>WdgMRequestPartitionResetRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'J1939DcmBroadcastStatus'>
        <PARAMETER-NAME>J1939DcmChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'J1939NmIndication'>
        <PARAMETER-NAME>J1939NmChannelRef</PARAMETER-NAME>
        <PARAMETER-NAME>J1939NmNodeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'SwcModeRequest'>
        <PARAMETER-NAME>SwcModeRequestVariableDataPrototypeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswModeNotification'>
        <PARAMETER-NAME>BswModeDeclarationGroupPrototypeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'SwcModeNotification'>
        <PARAMETER-NAME>SwcModeNotificationModeDeclarationGroupPrototypeRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'BswMGenericRequest'>
        <PARAMETER-NAME>ModeRequesterId</PARAMETER-NAME>
        <PARAMETER-NAME>RequestedModeMax</PARAMETER-NAME>
      </CONTAINER>
    </MANDATORY-CHECK>

    <!-- String check -->
    <STRING-CHECK>
      <PARAMETER>
        <NAME>SwVersion</NAME>
        <CONTAINER-NAME>CommonPublishedInformation</CONTAINER-NAME>
        <REGULAR-EXPRESSION>4\.[0-9]+\.[0-9]+</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>BswRequestedMode</NAME>
        <CONTAINER-NAME>BswMode</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z0-9][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>BswModeInitValueMode</NAME>
        <CONTAINER-NAME>BswModeInitValue</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z0-9][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>UserIncludeFile</NAME>
        <CONTAINER-NAME>UserIncludeFiles</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z0-9\_]+\.[hH]</REGULAR-EXPRESSION>
      </PARAMETER>
    </STRING-CHECK>

    <!-- Config set reference check -->
    <CONFIGSET-REFERENCE-CHECK>
      <CONTAINER NAME = 'LogicalExpression'>
        <PARAMETER-NAME>ArgumentRef</PARAMETER-NAME>
        <LEVEL-DOWN>2</LEVEL-DOWN>
      </CONTAINER>
      <CONTAINER NAME = 'ModeCondition'>
        <PARAMETER-NAME>ConditionMode</PARAMETER-NAME>
        <LEVEL-DOWN>2</LEVEL-DOWN>
      </CONTAINER>
      <CONTAINER NAME = 'Rule'>
        <PARAMETER-NAME>RuleExpressionRef</PARAMETER-NAME>
        <PARAMETER-NAME>RuleTrueActionList</PARAMETER-NAME>
        <PARAMETER-NAME>RuleFalseActionList</PARAMETER-NAME>
        <LEVEL-DOWN>2</LEVEL-DOWN>
      </CONTAINER>
      <CONTAINER NAME = 'ActionListItem'>
        <PARAMETER-NAME>ActionListItemRef</PARAMETER-NAME>
        <LEVEL-DOWN>3</LEVEL-DOWN>
      </CONTAINER>
    </CONFIGSET-REFERENCE-CHECK>

    <DEPENDENCY_CHECK>
      <CHECK-ENTRY></CHECK-ENTRY>
    </DEPENDENCY_CHECK>
  </CONSISTENCY-CHECKS>

  <!-- Output files and its details -->
  <OUTPUT-FILES>
    <BswM_PCTypes.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_PCTypes.h                                                **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

#ifndef BSWM_PCTYPES_H
#define BSWM_PCTYPES_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_Cfg.h"
#include "Std_Types.h"
#include "Rte_Type.h"
INCLUDE_FILES

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/

typedef P2FUNC(void, BSWM_CODE, BswM_FuncPtrType)(void);

TYPEDEF

typedef struct STag_BswM_RuleInitPropertyType
{
  /* Rule function pointer */
  CONST(BswM_FuncPtrType, BSWM_CONST)pRuleFunction;
  
  /*
   Either BSWM_FALSE->0x00, BSWM_TRUE->0x01, BSWM_UNDEFINED->0x02.
   This will be used as previous rule evaluation result.
  */
  uint8 ucRuleInitState;
  
  /* Rule Nested Execution Only Status: BSWM_FALSE -> 0 or BSWM_TRUE -> 1 */
  boolean blNestedExecutionOnly;
}BswM_RuleInitPropertyType;

typedef struct STag_BswM_RuleEvaluationType
{
  /*
   * Rule evaluation result. 
   * BSWM_FALSE->0x00, BSWM_TRUE->0x01 or BSWM_UNDEFINED->0x02.
   */
  uint8 ucRulePreviousResult;
  
  /* Rule Trigger Status: BSWM_IDLE -> 0 or BSWM_READY -> 1 */
  boolean blRuleStatus;
}BswM_RuleEvaluationType;

#define BSWM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

STRUCTURETYPES

#if (BSWM_TOTAL_RULES > BSWM_ZERO)
/* Global Array to store Rule Init Property */
extern CONST(BswM_RuleInitPropertyType, BSWM_CONST) BswM_GaaRuleInitProperty[BSWM_TOTAL_RULES];
#endif

#if (BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION > BSWM_ZERO)
/* Global Array for Deferred Bsw Rules */
extern CONST(BswM_RuleIdType, BSWM_CONST) BswM_GaaDeferredBswRuleIdList[BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION];
#endif

#if (BSWM_TOTAL_RULE_IDS > BSWM_ZERO)
/* Global Array for Total Rules of Mode Request Port */
extern CONST(BswM_RuleIdType, BSWM_CONST) BswM_GaaRuleIdList[BSWM_TOTAL_RULE_IDS];
#endif

CONSTDECLARATIONS

#define BSWM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"


#endif
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_PCTypes.h>
    <BswM.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM.h                                                        **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef BSWM_H
#define BSWM_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"
#include "BswM_Cfg.h"

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/
/* Instance ID */
#define BSWM_INSTANCE_ID ((uint8)0x00u)

/* Service ID for BswM_Init */
#define BSWM_INIT_SID ((uint8)0x00u)

/* Service ID for BswM_GetVersionInfo */
#define BSWM_GETVERSIONINFO_SID ((uint8)0x01u)

/* Service ID for BswMGenericRequest */
#define BSWM_GENERIC_CURRENTSTATE_SID ((uint8)0x02u)

/* Service ID for BswM_MainFunction */
#define BSWM_MAINFUNCTION_SID ((uint8)0x03u)

/* Service ID for BswM_Deinit */
#define BSWM_DEINIT ((uint8)0x04u)

/* Service ID for BswM_ComM_CurrentMode */
#define BSWM_COMM_CURRENTMODE_SID ((uint8)0x0Eu)

/* Service ID for BswM_ComM_CurrentPNCMode */
#define BSWM_COMM_PNC_CURRENTMODE_SID ((uint8)0x15u)

/* Service ID for BswM_Dcm_CommunicationMode_CurrentState */
#define BSWM_DCM_REQUESTCOMMUNICATIONMODE_SID ((uint8)0x06u)

/* Service ID for BswM_CanSM_CurrentState */
#define BSWM_CANSM_CURRENTSTATE_SID ((uint8)0x05u)

/* Service ID for BswM_EthSM_CurrentState */
#define BSWM_ETHSM_CURRENTSTATE_SID ((uint8)0x0Du)

/* Service ID for BswM_FrSM_CurrentState */
#define BSWM_FRSM_CURRENTSTATE_SID ((uint8)0x0Cu)

/* Service ID for BswM_LinSM_CurrentState */
#define BSWM_LINSM_CURRENTSTATE_SID ((uint8)0x09u)

/* Service ID for BswM_EcuM_CurrentState */
#define BSWM_ECUM_CURRENTSTATE_SID ((uint8)0x0Fu)

/* Service ID for BswM_EcuM_CurrentWakeup */
#define BSWM_ECUM_CURRENTWAKEUP_SID ((uint8)0x10u)

/* Service ID for BswM_NvM_CurrentBlockMode */
#define BSWM_NVM_CURRENT_BLOCK_SID ((uint8)0x16u)

/* Service ID for BswM_NvM_CurrentJobMode */
#define BSWM_NVM_CURRENT_JOB_SID ((uint8)0x17u)

/* Service ID for BswM_LinSM_CurrentSchedule */
#define BSWM_LINSM_CURRENTSCHEDULE_SID ((uint8)0x0Au)

/* Service ID for BswM_LinTp_RequestMode */
#define BSWM_LINTP_REQUESTMODE_SID ((uint8)0x0Bu)

/* Service ID for BswM_WdgM_RequestPartitionReset */
#define BSWM_WDGM_REQUESTPARTITIONRESET_SID ((uint8)0x11u)

/* Service ID for BswM_BswMode_Notification */
#define BSWM_BSWMODE_NOTIFICATION_SID ((uint8)0x20u)

/* Service ID for BswM_SwcMode_Notification */
#define BSWM_SWCMODE_NOTIFICATION_SID ((uint8)0x21u)

/* Service ID for BswM_SwcMode_Request */
#define BSWM_SWCMODE_REQUEST_SID ((uint8)0x22u)

/* Service ID for BswM_Dcm_ApplicationUpdated */
#define BSWM_DCM_APPLICATIONUPDATED_SID ((uint8)0x23u)

/* Service ID for BswM_J1939DcmBroadcastStatus */
#define BSWM_J1939DCMBROADCASTSTATUS_SID ((uint8)0x1Bu)

/* Service ID for BswM_J1939Nm_StateChangeNotification */
#define BSWM_J1939NM_STATECHANGENOTIFICATION_SID ((uint8)0x18u)

/*******************************************************************************
**                                  Macros                                    **
*******************************************************************************/
/* BswM Initialization Status */
#define BSWM_UNINITIALIZED                0x00u
#define BSWM_INITIALIZED                  0x01u

/* BswM Development error values */
#define BSWM_E_NO_INIT                    0x01u
#define BSWM_E_NULL_POINTER               0x02u
#define BSWM_E_INVALID_PAR                0x03u
#define BSWM_E_REQ_USER_OUT_OF_RANGE      0x04u
#define BSWM_E_REQ_MODE_OUT_OF_RANGE      0x05u
#define BSWM_E_PARAM_CONFIG               0x06u

/* polyspace&lt;MISRA-C:19.4, 19.7:Not a defect:Justify with annotations&gt; use function like-macro for reduce execution time and stack */
#define BSWM_UNUSED(x)                    do { \
                                            if((uint32)(x) != (uint32)BSWM_ZERO) {} \
                                          } while(BSWM_ZERO)

/* polyspace&lt;MISRA-C:19.4, 19.7:Not a defect:Justify with annotations&gt; use function like-macro for reduce execution time and stack */
#define BSWM_UNUSED_PTR(x)                do { \
                                            if((x) != NULL_PTR) {} \
                                          } while(BSWM_ZERO)

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

/* Extern for BswM_Init API */
extern FUNC(void, BSWM_CODE) BswM_Init
 (P2CONST(BswM_ConfigType, AUTOMATIC, BSWM_APPL_CONST) ConfigPtr);

/* Extern for BswM_Deinit API */
extern FUNC(void, BSWM_CODE) BswM_Deinit(void);

/* Extern for BswM_InitializeRulePreviousResult API */
extern FUNC(void, BSWM_CODE) BswM_InitializeRulePreviousResult
 (BswM_RuleIdType RuleId);
  
/* Extern for Generic Request API */
extern FUNC(void, BSWM_CODE) BswM_RequestMode
 (BswM_UserType requesting_user, BswM_ModeType requested_mode);

ALL_FUNCTIONS_DECLARATION

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"

#endif /* BSWM_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM.h>
    <BswM_Cfg.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Cfg.h                                                    **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef BSWM_CFG_H
#define BSWM_CFG_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"

/*******************************************************************************
**                      Common Published Information                          **
*******************************************************************************/
AR_SW_COMMONPUB_VERSIONS

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/
#define BSWM_INVALID                                       0x00U
#define BSWM_VALID                                         0x01U
#define BSWM_MIXED                                         0x02U

#define BSWM_IDLE                                          0x00U
#define BSWM_READY                                         0x01U

#define BSWM_ZERO                                          0x00U
#define BSWM_ONE                                           0x01U

#define BSWM_FALSE                                         0x00U
#define BSWM_TRUE                                          0x01U

#define BSWM_IMMEDIATE                                     0x00U
#define BSWM_DEFERRED                                      0x01U

#define BSWM_UNDEFINED                                     0xDEU

FUNCTION_FLAG
OTHER_FLAG
BSW_MODE_REQUEST_FLAG
OTHER_MODE_REQUEST_FLAG
INIT_STATUS
SIZE_MACRO
TOTAL_DEFERRED_RULES
TOTAL_RULES
OTHER_SIZE
PRECOMPILE_OPTIONS
TYPE_DEFINITIONS

#endif /* BSWM_CFG_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_Cfg.h>
    
    <BswM_ActionList.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_ActionList.h                                             **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef BSWM_ACTIONLIST_H
#define BSWM_ACTIONLIST_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

INTERNAL_DECLARATION
ACTIONLIST_DECLARATION

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"
#endif /* BSWM_ACTIONLIST_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_ActionList.h>
    <BswM_Rule.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Rule.h                                                   **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef BSWM_RULE_H
#define BSWM_RULE_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

RULE_EXTERN_DECLARATION

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"

#endif /* BSWM_RULE_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_Rule.h>
    <BswM_Ram.h>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Ram.h                                                    **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef BSWM_RAM_H
#define BSWM_RAM_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_PCTypes.h"

#if ((BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO) || (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO))
#include "Com.h"
#endif

/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/
PRECOMPILE_OPTIONS

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
RAM_DECLARATION
#define BSWM_START_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"

/* Global variable to store Initialization status of BswM */
extern VAR(boolean, BSWM_VAR_CLEARED) BswM_GblInitStatus;

#define BSWM_STOP_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"

#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

#if (BSWM_TOTAL_RULES > BSWM_ZERO)

extern VAR(BswM_RuleEvaluationType, BSWM_VAR_CLEARED) BswM_GaaRuleEvaluation[BSWM_TOTAL_RULES];

#endif

#if (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)

extern VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddIpduGroupControlVector;

#endif

#if (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO) || (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)

extern VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddReceptionDMControlVector;

#endif

MODEPORT_API_RAM_DECLARATION

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/

#endif /* BSWM_RAM_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_Ram.h>
    <BswM_ActionList.c>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_ActionList.c                                             **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_ActionList.h"
#include "BswM.h"
#include "BswM_Ram.h"
#include "BswM_Rule.h"

INCLUDE_FILES

/*******************************************************************************
**                      Internal Function Definitions                         **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

COM_FUNCTION
RTE_START_FUNCTION
RTE_STOP_FUNCTION

/*******************************************************************************
**                      ActionList Function Definitions                       **
*******************************************************************************/
ACTIONLIST_FUNCTIONS

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"

/*******************************************************************************
**                      Task Bodies                                           **
*******************************************************************************/
TASK_BODIES

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_ActionList.c>
    <BswM_Ram.c>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Ram.c                                                    **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_Ram.h"

#if ((BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO) || (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO))
#include "Com.h"
#endif

/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/
RAM_DEFINITION
#define BSWM_START_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"

/* Global variable to store Initialization status of BswM */
VAR(boolean, BSWM_VAR_CLEARED) BswM_GblInitStatus;

#define BSWM_STOP_SEC_VAR_CLEARED_BOOLEAN
#include "MemMap.h"

#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

#if (BSWM_TOTAL_RULES > BSWM_ZERO)

VAR(BswM_RuleEvaluationType, BSWM_VAR_CLEARED)
  BswM_GaaRuleEvaluation[BSWM_TOTAL_RULES];

#endif

#if (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)

VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddIpduGroupControlVector;

#endif

#if (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO) || (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)

VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddReceptionDMControlVector;

#endif

MODEPORT_API_RAM_DEFINITION

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_Ram.c>
    <BswM.c>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM.c                                                        **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM.h"
#include "BswM_Ram.h"
#include "SchM_BswM.h"

#if (BSWM_CANSM_ENABLED == STD_ON)
#include "BswM_CanSM.h"
#endif
#if (BSWM_LINSM_ENABLED == STD_ON)
#include "BswM_LinSM.h"
#endif
#if (BSWM_LINTP_ENABLED == STD_ON)
#include "BswM_LinTp.h"
#endif
#if (BSWM_FRSM_ENABLED == STD_ON)
#include "BswM_FrSM.h"
#endif
#if (BSWM_ETHSM_ENABLED == STD_ON)
#include "BswM_EthSM.h"
#endif
#if (BSWM_ECUM_ENABLED == STD_ON)
#include "BswM_EcuM.h"
#endif
#if (BSWM_COMM_ENABLED == STD_ON)
#include "BswM_ComM.h"
#endif
#if (BSWM_WDGM_ENABLED == STD_ON)
#include "BswM_WdgM.h"
#endif
#if (BSWM_DCM_ENABLED == STD_ON)
#include "BswM_Dcm.h"
#endif
#if (BSWM_NVM_ENABLED == STD_ON)
#include "BswM_NvM.h"
#endif
#if (BSWM_J1939DCM_ENABLED == STD_ON)
#include "BswM_J1939Dcm.h"
#endif
#if (BSWM_J1939NM_ENABLED == STD_ON)
#include "BswM_J1939Nm.h"
#endif

#if (BSWM_DEV_ERROR_DETECT == STD_ON)
#include "Det.h"
#endif

/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/

/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

#if (BSWM_VERSION_INFO_API == STD_ON)
/*******************************************************************************
** Function Name        : BswM_GetVersionInfo                                 **
**                                                                            **
** Service ID           : 0x01                                                **
**                                                                            **
** Description          : This Service returns the version information of     **
**                        Bsw Mode Manager.                                   **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : Std_VersionInfoType *VersionInfo                    **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
*******************************************************************************/

FUNC(void, BSWM_CODE) BswM_GetVersionInfo
 (P2VAR(Std_VersionInfoType, AUTOMATIC, BSWM_APPL_DATA)VersionInfo)
{
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Check NULL pointer */
  if (NULL_PTR == VersionInfo)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_INSTANCE_ID,
      BSWM_GETVERSIONINFO_SID, BSWM_E_NULL_POINTER);
  }
  else
  #endif
  {
    /* Load the vendor Id */
    VersionInfo->vendorID = BSWM_VENDOR_ID;
    /* Load the module Id */
    VersionInfo->moduleID = BSWM_MODULE_ID;
    /* Load Software Major Version */
    VersionInfo->sw_major_version = BSWM_SW_MAJOR_VERSION;
    /* Load Software Minor Version */
    VersionInfo->sw_minor_version = BSWM_SW_MINOR_VERSION;
    /* Load Software Patch Version */
    VersionInfo->sw_patch_version = BSWM_SW_PATCH_VERSION;
  }
}
#endif /* (BSWM_VERSION_INFO_API == STD_ON) */


/*******************************************************************************
** Function Name        : BswM_InitializeRulePreviousResult                   **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This Service Initializes the previous rule          **
**                        evaluation result with configured init value.       **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : BswM_RuleIdType RuleId                              **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaRuleEvaluation                            **
**                        Function(s) invoked :                               **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_InitializeRulePreviousResult
 (BswM_RuleIdType RuleId)
{
  #if (BSWM_TOTAL_RULES > BSWM_ZERO)
  /* Initialize previous rule evaluation result with the configured result */
  BswM_GaaRuleEvaluation[RuleId].ucRulePreviousResult =
    BswM_GaaRuleInitProperty[RuleId].ucRuleInitState;
  
  /* Initialize rule status as idle */
  BswM_GaaRuleEvaluation[RuleId].blRuleStatus = BSWM_IDLE;
  #endif
}

/*******************************************************************************
** Function Name        : BswM_MainFunction                                   **
**                                                                            **
** Service ID           : 0x03                                                **
**                                                                            **
** Description          : Main function of the BswM                           **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : void                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : void                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaRuleEvaluation                            **
**                                                                            **
**                        Function(s) invoked :                               **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_MainFunction(void)
{
  #if (BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION > BSWM_ZERO)
  BswM_RuleIdType LddRuleId;
  uint8 LucId;
  
  /* Process main fuction only if module is initialized */
  if (BSWM_UNINITIALIZED != BswM_GblInitStatus)
  {

    for (LucId = BSWM_ZERO;
         LucId &lt; BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION; LucId++)
    {
      LddRuleId = BswM_GaaDeferredBswRuleIdList[LucId];
      
      if (BSWM_READY == BswM_GaaRuleEvaluation[LddRuleId].blRuleStatus)
      {
        /* Invoke the rule function using pRuleFunction[LddRuleId] */
        BswM_GaaRuleInitProperty[LddRuleId].pRuleFunction();
        /* Enter in Data Protection */
        SchM_Enter_BswM_RULESTATUS_PROTECTION();
        BswM_GaaRuleEvaluation[LddRuleId].blRuleStatus = BSWM_IDLE;
        SchM_Exit_BswM_RULESTATUS_PROTECTION();
      }
    }    
  } /* if (BSWM_UNINITIALIZED != BswM_GblInitStatus) */
  #endif
}

#if (BSWM_GENERIC_REQUEST_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_RequestMode                                    **
**                                                                            **
** Service ID           : 0x02                                                **
**                                                                            **
** Description          : Generic function call to request modes. This        **
**                        function shall only be used by other BSW modules    **
**                        that does not have a specific mode request          **
**                        interface.                                          **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : BswM_UserType requesting_user,                      **
**                        BswM_ModeType requested_mode                        **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaGenericRequestProperty                    **
**                          BswM_GaaGenericCurrentState                       **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_RequestMode
 (BswM_UserType requesting_user, BswM_ModeType requested_mode)
{
  #if (BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_GENERIC_CURRENTSTATE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    /* Module is initialized */
    for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST; LucId++)
    {
      /* If Network ID matches */
      if (BswM_GaaGenericRequestProperty[LucId].usModeRequesterId ==
        requesting_user)
      {
        #if (BSWM_DEV_ERROR_DETECT == STD_ON)
        if (BswM_GaaGenericRequestProperty[LucId].usRequestedModeMax &lt; requested_mode)
        {
          /* The Det error is reported when mode is out of range */
          (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
            BSWM_GENERIC_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
        }
        else
        #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaGenericCurrentState[LucId].usModeRequesterId = requesting_user;
          BswM_GaaGenericCurrentState[LucId].ddRequestedState = requested_mode;        
          BswM_GaaGenericCurrentState[LucId].blModeValueStatus = BSWM_VALID;          
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaGenericRequestProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaGenericRequestProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaGenericRequestProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(requesting_user);
  BSWM_UNUSED(requested_mode);
  #endif
}
#endif

#if (BSWM_CANSM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_CanSM_CurrentState                             **
**                                                                            **
** Service ID           : 0x05                                                **
**                                                                            **
** Description          : Function called by CanSM to indicate its current    **
**                        state.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        CanSM_BswMCurrentStateType CurrentState             **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaCanSMIndicationProperty                   **
**                          BswM_GaaCanSMCurrentState                         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_CanSM_CurrentState
 (NetworkHandleType Network, CanSM_BswMCurrentStateType CurrentState)
{
  #if (BSWM_TOTAL_PORTS_OF_CANSM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_CANSM_CURRENTSTATE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((CANSM_BSWM_NO_COMMUNICATION != CurrentState) &amp;&amp;
        (CANSM_BSWM_SILENT_COMMUNICATION != CurrentState) &amp;&amp;
        (CANSM_BSWM_FULL_COMMUNICATION != CurrentState) &amp;&amp;
        (CANSM_BSWM_BUS_OFF != CurrentState) &amp;&amp;
        (CANSM_BSWM_CHANGE_BAUDRATE != CurrentState))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_CANSM_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_CANSM_INDICATION; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaCanSMIndicationProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaCanSMCurrentState[LucId].ddCurrentState = CurrentState;
          BswM_GaaCanSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaCanSMIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaCanSMIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaCanSMIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(CurrentState);
  #endif
}
#endif

#if (BSWM_COMM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_ComM_CurrentMode                               **
**                                                                            **
** Service ID           : 0x0e                                                **
**                                                                            **
** Description          : Function called by ComM to indicate the current     **
**                        communication mode of a ComM channel.               **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        ComM_ModeType RequestedMode                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaComMIndicationProperty                    **
**                          BswM_GaaComMCurrentMode                           **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_ComM_CurrentMode
 (NetworkHandleType Network, ComM_ModeType RequestedMode)
{
  #if (BSWM_TOTAL_PORTS_OF_COMM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_COMM_CURRENTMODE_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((COMM_NO_COMMUNICATION != RequestedMode) &amp;&amp;
        (COMM_SILENT_COMMUNICATION != RequestedMode) &amp;&amp;
        (COMM_FULL_COMMUNICATION != RequestedMode))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_COMM_CURRENTMODE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_COMM_INDICATION; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaComMIndicationProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaComMCurrentMode[LucId].ddCurrentMode = RequestedMode;
          BswM_GaaComMCurrentMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaComMIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaComMIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaComMIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(RequestedMode);
  #endif
}
#endif

#if (BSWM_COMM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_ComM_CurrentPNCMode                            **
**                                                                            **
** Service ID           : 0x15                                                **
**                                                                            **
** Description          : Function called by ComM to indicate the current     **
**                        communication mode of a ComM channel.               **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : PNCHandleType PNC,                                  **
**                        ComM_PncModeType RequestedMode                      **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaComMPncIndicationProperty                 **
**                          BswM_GaaComMPNCCurrentMode                        **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_ComM_CurrentPNCMode
 (PNCHandleType PNC, ComM_PncModeType RequestedMode)
{
  #if (BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_COMM_PNC_CURRENTMODE_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((PNC_REQUESTED != RequestedMode) &amp;&amp;
        (PNC_READY_SLEEP != RequestedMode) &amp;&amp;
        (PNC_PREPARE_SLEEP != RequestedMode) &amp;&amp;
        (PNC_NO_COMMUNICATION != RequestedMode) &amp;&amp;
        (PNC_FULL_COMMUNICATION != RequestedMode))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_COMM_PNC_CURRENTMODE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST; LucId++)
      {
        /* If PNC ID matches */
        if (BswM_GaaComMPncIndicationProperty[LucId].ddNetworkId == PNC)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaComMPNCCurrentMode[LucId].ddCurrentMode = RequestedMode;
          BswM_GaaComMPNCCurrentMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaComMPncIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaComMPncIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaComMPncIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(PNC);
  BSWM_UNUSED(RequestedMode);
  #endif
}
#endif

#if (BSWM_DCM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_Dcm_CommunicationMode_CurrentState             **
**                                                                            **
** Service ID           : 0x06                                                **
**                                                                            **
** Description          : Function called by DCM to request communication     **
**                        modes.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        Dcm_CommunicationModeType RequestedMode             **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaDcmComRequestProperty                     **
**                          BswM_GaaDcmReqCommunication                       **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_Dcm_CommunicationMode_CurrentState
 (NetworkHandleType Network, Dcm_CommunicationModeType RequestedMode)
{
  #if (BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_DCM_REQUESTCOMMUNICATIONMODE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((DCM_ENABLE_RX_TX_NORM != RequestedMode) &amp;&amp;
        (DCM_ENABLE_RX_DISABLE_TX_NORM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_ENABLE_TX_NORM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_TX_NORM != RequestedMode) &amp;&amp;
        (DCM_ENABLE_RX_TX_NM != RequestedMode) &amp;&amp;
        (DCM_ENABLE_RX_DISABLE_TX_NM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_ENABLE_TX_NM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_TX_NM != RequestedMode) &amp;&amp;
        (DCM_ENABLE_RX_TX_NORM_NM != RequestedMode) &amp;&amp;
        (DCM_ENABLE_RX_DISABLE_TX_NORM_NM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_ENABLE_TX_NORM_NM != RequestedMode) &amp;&amp;
        (DCM_DISABLE_RX_TX_NORM_NM != RequestedMode))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_DCM_REQUESTCOMMUNICATIONMODE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaDcmComRequestProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaDcmReqCommunication[LucId].ddRequestedMode = RequestedMode;
          BswM_GaaDcmReqCommunication[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaDcmComRequestProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaDcmComRequestProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaDcmComRequestProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(RequestedMode);
  #endif
}
#endif

#if (BSWM_DCM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_Dcm_ApplicationUpdated                         **
**                                                                            **
** Service ID           : 0x23                                                **
**                                                                            **
** Description          : Function called by DCM to indicate application      **
**                        updated.                                            **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaDcmApplicationUpdatedProperty             **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_Dcm_ApplicationUpdated(void)
{
  #if (BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_DCM_APPLICATIONUPDATED_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    /* Module is initialized */
    for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION; LucId++)
    {
      LpRuleId = BswM_GaaDcmApplicationUpdatedProperty[LucId].pRuleId;
      
      for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaDcmApplicationUpdatedProperty[LucId].ddTotalRules; LddId++)
      {
        if (BSWM_FALSE == 
            BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
        {
          /*
           * Update Rule Evaluation Status if the Request processing is deferred
           */
          if (BSWM_DEFERRED == 
              BswM_GaaDcmApplicationUpdatedProperty[LucId].blRequestProcessing)
          {
            /* Enter in Data Protection */
            SchM_Enter_BswM_RULESTATUS_PROTECTION();
            /* ucRuleResult, blRuleStatus */
            BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
            SchM_Exit_BswM_RULESTATUS_PROTECTION();
          }
          else
          {
            /* Invoke the rule function using pRuleFunction */
            /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
            BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
          }
        }
      }
    }
  }
  #endif
}
#endif

#if (BSWM_ECUM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_EcuM_CurrentState                              **
**                                                                            **
** Service ID           : 0x0f                                                **
**                                                                            **
** Description          : Function called by EcuM to indicate the current ECU **
**                        Operation Mode.                                     **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : EcuM_StateType CurrentState                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaEcuMIndicationProperty                    **
**                          BswM_GaaEcuMCurrentState                          **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_EcuM_CurrentState
 (EcuM_StateType CurrentState)
{
  #if (BSWM_TOTAL_PORTS_OF_ECUM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_ECUM_CURRENTSTATE_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((ECUM_STATE_STARTUP_ONE != CurrentState) &amp;&amp;
        (ECUM_STATE_STARTUP_TWO != CurrentState) &amp;&amp;
        (ECUM_STATE_WAKEUP_VALIDATION != CurrentState) &amp;&amp;
        (ECUM_STATE_PREP_SHUTDOWN != CurrentState) &amp;&amp;
        (ECUM_STATE_GO_SLEEP != CurrentState) &amp;&amp;
        (ECUM_STATE_GO_OFF_ONE != CurrentState))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_ECUM_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ECUM_INDICATION; LucId++)
      {
        /* Enter in Data Protection */
        SchM_Enter_BswM_DATA_PROTECTION();
        BswM_GaaEcuMCurrentState[LucId].ddCurrentState = CurrentState;
        BswM_GaaEcuMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
        SchM_Exit_BswM_DATA_PROTECTION();
        
        LpRuleId = BswM_GaaEcuMIndicationProperty[LucId].pRuleId;
        
        for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEcuMIndicationProperty[LucId].ddTotalRules; LddId++)
        {
          if (BSWM_FALSE == 
              BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
          {
            /* Update Rule Evaluation Status if the Request processing is deferred */
            if (BSWM_DEFERRED == 
                BswM_GaaEcuMIndicationProperty[LucId].blRequestProcessing)
            {
              /* Enter in Data Protection */
              SchM_Enter_BswM_RULESTATUS_PROTECTION();
              /* Set ready state */
              BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
              SchM_Exit_BswM_RULESTATUS_PROTECTION();
            }
            else
            {
              /* Invoke the rule function */
              /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
              BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(CurrentState);
  #endif
}
#endif

#if (BSWM_ECUM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_EcuM_CurrentWakeup                             **
**                                                                            **
** Service ID           : 0x10                                                **
**                                                                            **
** Description          : Function called by EcuM to indicate the current     **
**                        state of a wakeup source.                           **
**                        state.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : EcuM_WakeupSourceType source,                       **
**                        EcuM_WakeupStatusType state                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaEcuMWakeupIndicationProperty              **
**                          BswM_GaaEcuMCurrentWakeup                         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
/* polyspace&lt;MISRA-C:5.6:Not a defect:Justify with annotations&gt; no impact of this rule violation (AUTOSAR Standard : BswM0131) */
FUNC(void, BSWM_CODE) BswM_EcuM_CurrentWakeup (EcuM_WakeupSourceType source, EcuM_WakeupStatusType state)
{
  #if (BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_ECUM_CURRENTWAKEUP_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((ECUM_WKSTATUS_DISABLED != state) &amp;&amp;
        (ECUM_WKSTATUS_EXPIRED != state) &amp;&amp;
        (ECUM_WKSTATUS_VALIDATED != state) &amp;&amp;
        (ECUM_WKSTATUS_PENDING != state) &amp;&amp;
        (ECUM_WKSTATUS_NONE != state))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_ECUM_CURRENTWAKEUP_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE; LucId++)
      {
        /* If WakeUp Source ID matches */
        if ((BswM_GaaEcuMWakeupIndicationProperty[LucId].ddEcuMWakeupSourceId &amp; source) != BSWM_ZERO)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaEcuMCurrentWakeup[LucId].ddState = state;
          BswM_GaaEcuMCurrentWakeup[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaEcuMWakeupIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEcuMWakeupIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /* Update Rule Evaluation Status if the Request processing is deferred */
              if (BSWM_DEFERRED == 
                  BswM_GaaEcuMWakeupIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* Set ready state */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(source);
  BSWM_UNUSED(state);
  #endif
}
#endif

#if (BSWM_ETHSM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_EthSM_CurrentState                             **
**                                                                            **
** Service ID           : 0x0d                                                **
**                                                                            **
** Description          : Function called by EthSM to indicate its current    **
**                        state.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        EthSM_NetworkModeStateType CurrentState             **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaEthSMIndicationProperty                   **
**                          BswM_GaaEthSMCurrentState                         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_EthSM_CurrentState
 (NetworkHandleType Network, EthSM_NetworkModeStateType CurrentState)
{
  #if (BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_ETHSM_CURRENTSTATE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((ETHSM_STATE_OFFLINE != CurrentState) &amp;&amp;
        (ETHSM_STATE_WAIT_TRCVLINK != CurrentState) &amp;&amp;
        (ETHSM_STATE_WAIT_ONLINE != CurrentState) &amp;&amp;
        (ETHSM_STATE_ONLINE != CurrentState) &amp;&amp;
        (ETHSM_STATE_ONHOLD != CurrentState) &amp;&amp;
        (ETHSM_STATE_WAIT_OFFLINE != CurrentState))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_ETHSM_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaEthSMIndicationProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaEthSMCurrentState[LucId].ddCurrentState = CurrentState;
          BswM_GaaEthSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaEthSMIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEthSMIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaEthSMIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(CurrentState);
  #endif
}
#endif

#if (BSWM_FRSM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_FrSM_CurrentState                              **
**                                                                            **
** Service ID           : 0x0c                                                **
**                                                                            **
** Description          : Function called by FrSM to indicate its current     **
**                        state.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        FrSM_BswM_StateType CurrentState                    **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaFrSMIndicationProperty                    **
**                          BswM_GaaFrSMCurrentState                          **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_FrSM_CurrentState
 (NetworkHandleType Network, FrSM_BswM_StateType CurrentState)
{
  #if (BSWM_TOTAL_PORTS_OF_FRSM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_FRSM_CURRENTSTATE_SID,
      BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((FRSM_BSWM_READY != CurrentState) &amp;&amp;
        (FRSM_BSWM_READY_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_STARTUP != CurrentState) &amp;&amp;
        (FRSM_BSWM_STARTUP_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_WAKEUP != CurrentState) &amp;&amp;
        (FRSM_BSWM_WAKEUP_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_HALT_REQ != CurrentState) &amp;&amp;
        (FRSM_BSWM_HALT_REQ_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_KEYSLOT_ONLY != CurrentState) &amp;&amp;
        (FRSM_BSWM_KEYSLOT_ONLY_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_ONLINE != CurrentState) &amp;&amp;
        (FRSM_BSWM_ONLINE_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_ONLINE_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_BSWM_ONLINE_PASSIVE_ECU_PASSIVE != CurrentState) &amp;&amp;
        (FRSM_LOW_NUMBER_OF_COLDSTARTERS != CurrentState) &amp;&amp;
        (FRSM_LOW_NUMBER_OF_COLDSTARTERS_ECU_PASSIVE != CurrentState))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_FRSM_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_FRSM_INDICATION; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaFrSMIndicationProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaFrSMCurrentState[LucId].ddCurrentState = CurrentState;
          BswM_GaaFrSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaFrSMIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaFrSMIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaFrSMIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(CurrentState);
  #endif
}
#endif

#if (BSWM_LINSM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_LinSM_CurrentState                             **
**                                                                            **
** Service ID           : 0x09                                                **
**                                                                            **
** Description          : Function called by LinSM to indicate its current    **
**                        state.                                              **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        LinSM_ModeType CurrentState                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaLinSMIndicationProperty                   **
**                          BswM_GaaLinSMCurrentState                         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_LinSM_CurrentState
 (NetworkHandleType Network, LinSM_ModeType CurrentState)
{
  #if (BSWM_TOTAL_PORTS_OF_LINSM_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON) 
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_LINSM_CURRENTSTATE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((LINSM_NO_COM != CurrentState) &amp;&amp;
        (LINSM_FULL_COM != CurrentState))
    {
     /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_LINSM_CURRENTSTATE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LINSM_INDICATION; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaLinSMIndicationProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaLinSMCurrentState[LucId].ddCurrentState = CurrentState;
          BswM_GaaLinSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaLinSMIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinSMIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaLinSMIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(CurrentState);
  #endif
}
#endif

#if (BSWM_LINSM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_LinSM_CurrentSchedule                          **
**                                                                            **
** Service ID           : 0x0a                                                **
**                                                                            **
** Description          : Function called by LinSM to indicate the currently  **
**                        active schedule table for a specific LIN channel.   **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        LinIf_SchHandleType CurrentSchedule                 **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaLinScheduleIndicationProperty             **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_LinSM_CurrentSchedule
 (NetworkHandleType Network, LinIf_SchHandleType CurrentSchedule)
{
  #if (BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON) 
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
      BSWM_LINSM_CURRENTSCHEDULE_SID, BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ( BSWM_FALSE )
    {
       /* Report to DET */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_LINSM_CURRENTSCHEDULE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION; LucId++)
      {
        /* If Network ID and Schedule ID match */
        if ((BswM_GaaLinScheduleIndicationProperty[LucId].ddNetworkId == Network) &amp;&amp;
            (BswM_GaaLinScheduleIndicationProperty[LucId].ucScheduleId == CurrentSchedule))
        {
          LpRuleId = BswM_GaaLinScheduleIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinScheduleIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaLinScheduleIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(CurrentSchedule);
  #endif
}
#endif

#if (BSWM_LINTP_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_LinTp_RequestMode                              **
**                                                                            **
** Service ID           : 0x0b                                                **
**                                                                            **
** Description          : Function called by LinTP to request a mode for the  **
**                        corresponding LIN channel. The LinTp_Mode mainly    **
**                        correlates to the LIN schedule table that should    **
**                        be used.                                            **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkHandleType Network,                          **
**                        LinTp_Mode LinTpRequestedMode                       **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaLinTpModeRequestProperty                  **
**                          BswM_GaaLinTpRequestMode                          **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_LinTp_RequestMode
 (NetworkHandleType Network, LinTp_Mode LinTpRequestedMode)
{
  #if (BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_LINTP_REQUESTMODE_SID,
      BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((LINTP_APPLICATIVE_SCHEDULE != LinTpRequestedMode) &amp;&amp;
        (LINTP_DIAG_REQUEST != LinTpRequestedMode) &amp;&amp;
        (LINTP_DIAG_RESPONSE != LinTpRequestedMode))
    {
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_LINTP_REQUESTMODE_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaLinTpModeRequestProperty[LucId].ddNetworkId == Network)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaLinTpRequestMode[LucId].ddLinTpRequestedMode =
            LinTpRequestedMode;
          BswM_GaaLinTpRequestMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaLinTpModeRequestProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinTpModeRequestProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaLinTpModeRequestProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(LinTpRequestedMode);
  #endif
}
#endif

#if (BSWM_NVM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_NvM_CurrentBlockMode                           **
**                                                                            **
** Service ID           : 0x16                                                **
**                                                                            **
** Description          : Function called by NvM to indicate the current      **
**                        block mode of an NvM block.                         **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NvM_BlockIdType Block,                              **
**                        NvM_RequestResultType CurrentBlockMode              **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaNvMBlockModeIndicationProperty            **
**                          BswM_GaaNvMCurrentBlockMode                       **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_NvM_CurrentBlockMode
 (NvM_BlockIdType Block, NvM_RequestResultType CurrentBlockMode)
{
  #if (BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  #if (BSWM_DEV_ERROR_DETECT == STD_ON) 
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_NVM_CURRENT_BLOCK_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((NVM_REQ_OK != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_NOT_OK != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_PENDING != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_INTEGRITY_FAILED != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_BLOCK_SKIPPED != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_NV_INVALIDATED != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_CANCELED != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_REDUNDANCY_FAILED != CurrentBlockMode) &amp;&amp;
        (NVM_REQ_RESTORED_FROM_ROM != CurrentBlockMode))
    {
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_NVM_CURRENT_BLOCK_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaNvMBlockModeIndicationProperty[LucId].ddBlockId == Block)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaNvMCurrentBlockMode[LucId].ddCurrentBlockMode = CurrentBlockMode;
          BswM_GaaNvMCurrentBlockMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaNvMBlockModeIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaNvMBlockModeIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaNvMBlockModeIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Block);
  BSWM_UNUSED(CurrentBlockMode);
  #endif
}
#endif

#if (BSWM_NVM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_NvM_CurrentJobMode                             **
**                                                                            **
** Service ID           : 0x17                                                **
**                                                                            **
** Description          : Function called by NvM to inform the BswM about     **
**                        the current state of a multi block job.             **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : uint8 ServiceId,                                    **
**                        NvM_RequestResultType CurrentBlockMode              **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaNvMJobModeIndicationProperty              **
**                          BswM_GaaNvMCurrentJobMode                         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_NvM_CurrentJobMode
 (uint8 ServiceId, NvM_RequestResultType CurrentJobMode)
{
  #if (BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_NVM_CURRENT_JOB_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  { 
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((NVM_READALL_SID != ServiceId) &amp;&amp;
        (NVM_WRITEALL_SID != ServiceId))
    {
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_NVM_CURRENT_JOB_SID, BSWM_E_REQ_USER_OUT_OF_RANGE);
    }
    else if ((NVM_REQ_OK != CurrentJobMode) &amp;&amp;
             (NVM_REQ_NOT_OK != CurrentJobMode) &amp;&amp;
             (NVM_REQ_PENDING != CurrentJobMode) &amp;&amp;
             (NVM_REQ_INTEGRITY_FAILED != CurrentJobMode) &amp;&amp;
             (NVM_REQ_BLOCK_SKIPPED != CurrentJobMode) &amp;&amp;
             (NVM_REQ_NV_INVALIDATED != CurrentJobMode) &amp;&amp;
             (NVM_REQ_CANCELED != CurrentJobMode) &amp;&amp;
             (NVM_REQ_REDUNDANCY_FAILED != CurrentJobMode) &amp;&amp;
             (NVM_REQ_RESTORED_FROM_ROM != CurrentJobMode))
    {
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_NVM_CURRENT_JOB_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE; LucId++)
      {
        /* If Network ID matches */
        if (BswM_GaaNvMJobModeIndicationProperty[LucId].ucServiceId == ServiceId)
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaNvMCurrentJobMode[LucId].ddCurrentJobMode = CurrentJobMode;
          BswM_GaaNvMCurrentJobMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();

          LpRuleId = BswM_GaaNvMJobModeIndicationProperty[LucId].pRuleId;

          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaNvMJobModeIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaNvMJobModeIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(ServiceId);
  BSWM_UNUSED(CurrentJobMode);
  #endif
}
#endif

#if (BSWM_WDGM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_WdgM_RequestPartitionReset                     **
**                                                                            **
** Service ID           : 0x11                                                **
**                                                                            **
** Description          : Function called by WdgM to request a partition reset**
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : ApplicationType Application                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaWdgMPartitionResetProperty                **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
**                          pRuleFunction                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_WdgM_RequestPartitionReset
 (ApplicationType Application)
{
  #if (BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_WDGM_REQUESTPARTITIONRESET_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
  {
    /* Module is initialized */
    for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET; LucId++)
    {
      /* If Network ID matches */
      if (BswM_GaaWdgMPartitionResetProperty[LucId].ddApplication == Application)
      {
        LpRuleId = BswM_GaaWdgMPartitionResetProperty[LucId].pRuleId;
        
        for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaWdgMPartitionResetProperty[LucId].ddTotalRules; LddId++)
        {
          if (BSWM_FALSE == 
              BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
          {
            /*
             * Update Rule Evaluation Status if the Request processing is deferred
             */
            if (BSWM_DEFERRED == 
                BswM_GaaWdgMPartitionResetProperty[LucId].blRequestProcessing)
            {
              /* Enter in Data Protection */
              SchM_Enter_BswM_RULESTATUS_PROTECTION();
              /* ucRuleResult, blRuleStatus */
              BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
              SchM_Exit_BswM_RULESTATUS_PROTECTION();
            }
            else
            {
              /* Invoke the rule function using pRuleFunction */
              /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
              BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Application);
  #endif
}
#endif

#if (BSWM_J1939DCM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_J1939DcmBroadcastStatus                        **
**                                                                            **
** Service ID           : 0x1B                                                **
**                                                                            **
** Description          : This API tells the BswM the desired communication   **
**                        status of the available networks. The status will   **
**                        typically be activated via COM I-PDU group switches.**
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : NetworkMask                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              :                                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_J1939DcmBroadcastStatus
 (uint16 NetworkMask)
{
  #if (BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS > BSWM_ZERO)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_J1939DCMBROADCASTSTATUS_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    /* Module is initialized */
    for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS; LucId++)
    {
      /* Enter in Data Protection */
      SchM_Enter_BswM_DATA_PROTECTION();
      BswM_GaaJ1939CurrentDcmStatus[LucId].ddCurrentMode = NetworkMask;
      BswM_GaaJ1939CurrentDcmStatus[LucId].blModeValueStatus = BSWM_VALID;
      SchM_Exit_BswM_DATA_PROTECTION();
      
      LpRuleId = BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].pRuleId;
      
      for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].ddTotalRules; LddId++)
      {
        if (BSWM_FALSE == 
            BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
        {
          /*
           * Update Rule Evaluation Status if the Request processing is deferred
           */
          if (BSWM_DEFERRED == 
              BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].blRequestProcessing)
          {
            /* Enter in Data Protection */
            SchM_Enter_BswM_RULESTATUS_PROTECTION();
            /* ucRuleResult, blRuleStatus */
            BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
            SchM_Exit_BswM_RULESTATUS_PROTECTION();
          }
          else
          {
            /* Invoke the rule function using pRuleFunction */
            /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
            BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(NetworkMask);
  #endif
}
#endif

#if (BSWM_J1939NM_ENABLED == STD_ON)
/*******************************************************************************
** Function Name        : BswM_J1939Nm_StateChangeNotification                **
**                                                                            **
** Service ID           : 0x18                                                **
**                                                                            **
** Description          : Notification of current J1939Nm state after state   **
**                        changes.                                            **
**                                                                            **
** Reentrancy           : Reentrant                                           **
**                                                                            **
** Input Parameters     : Network Node NmState                                **
**                                                                            **
** Output Parameters    :                                                     **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              :                                                     **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_J1939Nm_StateChangeNotification
 (NetworkHandleType Network,
  uint8 Node,
  Nm_StateType NmState)
{
  #if (BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION > 0)
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;
  
  #if (BSWM_DEV_ERROR_DETECT == STD_ON)  
  /* Is module not initialized */
  if (BSWM_INITIALIZED != BswM_GblInitStatus)
  {
    /* Report to DET */
    (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO, BSWM_J1939NM_STATECHANGENOTIFICATION_SID,
    BSWM_E_NO_INIT);
  }
  else
  #endif
  {
    #if (BSWM_DEV_ERROR_DETECT == STD_ON)
    if ((NmState != NM_STATE_UNINIT) &amp;&amp;
        (NmState != NM_STATE_BUS_SLEEP) &amp;&amp;
        (NmState != NM_STATE_PREPARE_BUS_SLEEP) &amp;&amp;
        (NmState != NM_STATE_READY_SLEEP) &amp;&amp;
        (NmState != NM_STATE_NORMAL_OPERATION) &amp;&amp;
        (NmState != NM_STATE_REPEAT_MESSAGE) &amp;&amp;
        (NmState != NM_STATE_SYNCHRONIZE) &amp;&amp;
        (NmState != NM_STATE_OFFLINE))
    {
      /* The Det error is reported when mode is out of range */
      (void)Det_ReportError(BSWM_MODULE_ID, BSWM_ZERO,
        BSWM_J1939NM_STATECHANGENOTIFICATION_SID, BSWM_E_REQ_MODE_OUT_OF_RANGE);
    }
    else
    #endif /* #if (BSWM_DEV_ERROR_DETECT == STD_ON) */
    {
      /* Module is initialized */
      for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION; LucId++)
      {
        /* If Network ID, Node matches */
        if ((BswM_GaaJ1939NmIndicationProperty[LucId].ddNetworkId == Network) &amp;&amp;
            (BswM_GaaJ1939NmIndicationProperty[LucId].ucNodeId == Node))
        {
          /* Enter in Data Protection */
          SchM_Enter_BswM_DATA_PROTECTION();
          BswM_GaaJ1939CurrentNmMode[LucId].ddCurrentMode = NmState;
          BswM_GaaJ1939CurrentNmMode[LucId].blModeValueStatus = BSWM_VALID;
          SchM_Exit_BswM_DATA_PROTECTION();
          
          LpRuleId = BswM_GaaJ1939NmIndicationProperty[LucId].pRuleId;
          
          for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaJ1939NmIndicationProperty[LucId].ddTotalRules; LddId++)
          {
            if (BSWM_FALSE == 
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].blNestedExecutionOnly)
            {
              /*
               * Update Rule Evaluation Status if the Request processing is deferred
               */
              if (BSWM_DEFERRED == 
                  BswM_GaaJ1939NmIndicationProperty[LucId].blRequestProcessing)
              {
                /* Enter in Data Protection */
                SchM_Enter_BswM_RULESTATUS_PROTECTION();
                /* ucRuleResult, blRuleStatus */
                BswM_GaaRuleEvaluation[LpRuleId[LddId]].blRuleStatus = BSWM_READY;
                SchM_Exit_BswM_RULESTATUS_PROTECTION();
              }
              else
              {
                /* Invoke the rule function using pRuleFunction */
                /* polyspace&lt;RTE: COR : Not a defect : No Action Planned&gt; Function pointer points to a valid function */
                BswM_GaaRuleInitProperty[LpRuleId[LddId]].pRuleFunction();
              }
            }
          }
        }
      }
    }
  }
  #else
  BSWM_UNUSED(Network);
  BSWM_UNUSED(Node);
  BSWM_UNUSED(NmState);
  #endif
}
#endif

/*******************************************************************************
** Function Name        : BswM_Deinit                                         **
**                                                                            **
** Service ID           : 0x04                                                **
**                                                                            **
** Description          : De-initializes the BSW Mode Manager.                **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GblInitStatus                                **
**                                                                            **
**                        Function(s) invoked :                               **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_Deinit(void)
{
  /* Setting BswM_GblInitStatus flag to Unint */
  BswM_GblInitStatus = BSWM_UNINITIALIZED;
}

INIT_FUNCTION_DEFINITION
ALL_FUNCTIONS_DEFINITION

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM.c>
    <BswM_Cfg.c>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Cfg.c                                                    **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_PCTypes.h"
#include "BswM_Rule.h"

INCLUDE_FILES

/*******************************************************************************
**                      Initialization Structure                              **
*******************************************************************************/

/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/
#define BSWM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

STRUCTURE_DECLARATIONS
ARRAY_DECLARATIONS

#define BSWM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>

      <STRUCTURES-AND-ARRAYS>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaRuleInitProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Rule Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_RuleInitPropertyType, BSWM_CONST) BswM_GaaRuleInitProperty[BSWM_TOTAL_RULES]; */</COMMENT>
          <FIELD>pRuleFunction ucRuleInitState blNestedExecutionOnly</FIELD>
          <TYPE>PSTR STR BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE BSWM_FALSE#BSWM_TRUE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_RULES</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Rules</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaCanSMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for CanSM Mode Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_CanSMIndicationProperty, BSWM_CONST) BswM_GaaCanSMIndicationProperty[BSWM_TOTAL_PORTS_OF_CANSM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_CANSM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of CanSM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaComMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for ComM Mode Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_ComMIndicationProperty, BSWM_CONST) BswM_GaaComMIndicationProperty[BSWM_TOTAL_PORTS_OF_COMM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_COMM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of ComM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaComMPncIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for ComM Pnc Mode Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_ComMPNCIndicationProperty, BSWM_CONST) BswM_GaaComMPncIndicationProperty[BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of ComM Pnc Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaDcmComRequestProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Dcm Mode Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_DcmCommunicationRequestProperty, BSWM_CONST) BswM_GaaDcmComRequestProperty[BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Dcm Com Request</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaDcmApplicationUpdatedProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Dcm Application Updated Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_DcmApplicationUpdatedProperty, BSWM_CONST) BswM_GaaDcmApplicationUpdatedProperty[BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Dcm Application Updated Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaEcuMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for EcuM State Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_EcuMIndicationProperty, BSWM_CONST) BswM_GaaEcuMIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ECUM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of EcuM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaEcuMWakeupIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for EcuM Wakeup state Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_EcuMWakeupIndicationProperty, BSWM_CONST) BswM_GaaEcuMWakeupIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddEcuMWakeupSourceId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT32 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of EcuM Wakeup Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaEthSMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for EthSM State Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_EthSMIndicationProperty, BSWM_CONST) BswM_GaaEthSMIndicationProperty[BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of EthSM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaFrSMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for FrSM State Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_FrSMIndicationProperty, BSWM_CONST) BswM_GaaFrSMIndicationProperty[BSWM_TOTAL_PORTS_OF_FRSM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_FRSM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of FrSM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaGenericRequestProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Generic Request Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_GenericRequestProperty, BSWM_CONST) BswM_GaaGenericRequestProperty[BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules usModeRequesterId usRequestedModeMax ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT16 UINT16 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Generic Request</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaLinSMIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for LinSM Mode Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_LinSMIndicationProperty, BSWM_CONST) BswM_GaaLinSMIndicationProperty[BSWM_TOTAL_PORTS_OF_LINSM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LINSM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of LinSM Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaLinScheduleIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Lin Schedule Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_LinSMScheduleIndicationProperty, BSWM_CONST) BswM_GaaLinScheduleIndicationProperty[BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ucScheduleId blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 UINT8 BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Lin Schedule Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaLinTpModeRequestProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for LinTp Schedule Request Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_LinTpRequestProperty, BSWM_CONST) BswM_GaaLinTpModeRequestProperty[BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of LinTp Mode Request</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaNvMBlockModeIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for NvM Current Block Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_NvMBlockModeIndicationProperty, BSWM_CONST) BswM_GaaNvMBlockModeIndicationProperty[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddBlockId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of NvM Block Mode Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaNvMJobModeIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for NvM Multi Block Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_NvMJobModeIndicationProperty, BSWM_CONST) BswM_GaaNvMJobModeIndicationProperty[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ucServiceId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of NvM Job Mode Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaWdgMPartitionResetProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for WdgM Partition Request Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_WdgM_PartitionResetProperty, BSWM_CONST) BswM_GaaWdgMPartitionResetProperty[BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddApplication ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 UINT8 BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_VALID#BSWM_INVALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of WdgM Partition Reset</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaSwcModeRequestProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Swc Mode Request Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_SwcModeRequestProperty, BSWM_CONST) BswM_GaaSwcModeRequestProperty[BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Swc Mode Request</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaSwcModeNotificationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Swc Mode Notification Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_SwcModeNotificationProperty, BSWM_CONST) BswM_GaaSwcModeNotificationProperty[BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Swc Mode Notification</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaBswModeNotificationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for Bsw Mode Notification Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_BswModeNotificationProperty, BSWM_CONST) BswM_GaaBswModeNotificationProperty[BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 STR BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Mode Request Ports of Bsw Mode Notification</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaJ1939DcmBroadcastStatusProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for J1939 Dcm Broadcast Status Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_J1939DcmBroadcastStatusProperty, BSWM_CONST) BswM_GaaJ1939DcmBroadcastStatusProperty[BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ucModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 UINT16 BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total J1939 Dcm Broadcast Status Rules</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaJ1939NmIndicationProperty</NAME>
          <STRUCTURE-COMMENT>/* Structure for J1939 Nm Indication Property */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_J1939NmIndicationProperty, BSWM_CONST) BswM_GaaJ1939NmIndicationProperty[BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION]; */</COMMENT>
          <FIELD>pRuleId ddTotalRules ddNetworkId ucNodeId ddModeInitValue blModeInitValueStatus blRequestProcessing</FIELD>
          <TYPE>PSTR UINT8 UINT8 UINT8 UINT8 BOOL BOOL</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE BSWM_INVALID#BSWM_VALID BSWM_IMMEDIATE#BSWM_DEFERRED</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total J1939 Nm Indication Rules</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaDMControl</NAME>
          <STRUCTURE-COMMENT>/* Structure for Deadline Monitoring Control */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_DMControlType, BSWM_CONST) BswM_GaaDMControl[BSWM_NO_OF_DM_CONTROL]; */</COMMENT>
          <FIELD>ucIdEnable ucIdDisable ucTotalEnable ucTotalDisable</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_DM_CONTROL</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Deadline Monitoring Control Actions</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaPduGroupSwitch</NAME>
          <STRUCTURE-COMMENT>/* Structure for Pdu Group Switch */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_PduGroupSwitchType, BSWM_CONST) BswM_GaaPduGroupSwitch[BSWM_NO_OF_PDU_GROUP_SWITCH]; */</COMMENT>
          <FIELD>blReinit ucIdEnable ucIdDisable ucTotalEnable ucTotalDisable</FIELD>
          <TYPE>BOOL UINT8 UINT8 UINT8 UINT8</TYPE>
          <RANGE>BSWM_FALSE#BSWM_TRUE NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_PDU_GROUP_SWITCH</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Pdu Group Switch Actions</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaPduRouterControl</NAME>
          <STRUCTURE-COMMENT>/* Structure for Pdu Router Control */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_PduRouterControlType, BSWM_CONST) BswM_GaaPduRouterControl[BSWM_NO_OF_PDUR_ROUTER_CONTROL]; */</COMMENT>
          <FIELD>blAction ucId ucTotal</FIELD>
          <TYPE>BOOL UINT8 UINT8</TYPE>
          <RANGE>BSWM_FALSE#BSWM_TRUE NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_PDUR_ROUTER_CONTROL</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Pdu Router Control Actions</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaTriggerIpduSend</NAME>
          <STRUCTURE-COMMENT>/* Structure for Trigger Ipdu Send */</STRUCTURE-COMMENT>
          <COMMENT>/* CONST(BswM_TriggerIpduSendType, BSWM_CONST) BswM_GaaTriggerIpduSend[BSWM_NO_OF_TRIGGER_IPDU_SEND]; */</COMMENT>
          <FIELD>ucId ucTotal</FIELD>
          <TYPE>UINT8 UINT8</TYPE>
          <RANGE>NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_TRIGGER_IPDU_SEND</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Trigger Ipdu Send Actions</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaStartSlaveCores</NAME>
          <COMMENT>/*CONST(BswM_SlaveCoreInfoType, BSWM_CONST) BswM_GaaStartSlaveCores[BSWM_NO_OF_START_SLAVE_CORES]; */</COMMENT>
          <FIELD>ddCoreId ddTask</FIELD>
          <TYPE>UINT8 UINT8</TYPE>
          <RANGE>NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_START_SLAVE_CORES</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Slave Cores Configured for Rte_Start</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>BswM_GaaStopSlaveCores</NAME>
          <COMMENT>/*CONST(BswM_SlaveCoreInfoType, BSWM_CONST) BswM_GaaStopSlaveCores[BSWM_NO_OF_STOP_SLAVE_CORES]; */</COMMENT>
          <FIELD>ddCoreId ddTask</FIELD>
          <TYPE>UINT8 UINT8</TYPE>
          <RANGE>NONE#NONE NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <REFERENCE></REFERENCE>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>BSWM_NO_OF_STOP_SLAVE_CORES</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Slave Cores Configured for Rte_Stop</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </STRUCTURE-ARRAY-ENTRY>
      </STRUCTURES-AND-ARRAYS>
      
      <!--To generate arrays with values -->
      <ARRAYS>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaDeferredBswRuleIdList</NAME>
          <ARRAY-COMMENT>/* Array for Deferred Bsw Rules */</ARRAY-COMMENT>
          <TYPE>CONST(BswM_RuleIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Deferred Rules of Bsw Indication</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </ARRAY-ENTRY>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaRuleIdList</NAME>
          <ARRAY-COMMENT>/* Array for Total Rules of Mode Request Port */</ARRAY-COMMENT>
          <TYPE>CONST(BswM_RuleIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_TOTAL_RULE_IDS</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Rule IDs</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
        </ARRAY-ENTRY>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaPduGroupList</NAME>
          <ARRAY-COMMENT>/* Array for Pdu Group List */</ARRAY-COMMENT>
          <TYPE>CONST(Com_IpduGroupIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_NO_OF_PDU_GROUP_LIST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Pdu Group List</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
          <PB-SOURCE-ARRAY>BswM_GaaPduGroupSwitch</PB-SOURCE-ARRAY>
        </ARRAY-ENTRY>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaDMPduGroupList</NAME>
          <ARRAY-COMMENT>/* Array for DM Pdu Group List */</ARRAY-COMMENT>
          <TYPE>CONST(Com_IpduGroupIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_NO_OF_DM_PDU_GROUP_LIST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of DM Pdu Group List</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
          <PB-SOURCE-ARRAY>BswM_GaaDMControl</PB-SOURCE-ARRAY>
        </ARRAY-ENTRY>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaPduRoutingList</NAME>
          <ARRAY-COMMENT>/* Array for Pdu Routing List */</ARRAY-COMMENT>
          <TYPE>CONST(PduR_RoutingPathGroupIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_NO_OF_PDU_ROUTING_LIST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Pdu Routing List</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
          <PB-SOURCE-ARRAY>BswM_GaaPduRouterControl</PB-SOURCE-ARRAY>
        </ARRAY-ENTRY>
        <ARRAY-ENTRY>
          <NAME>BswM_GaaIpduList</NAME>
          <ARRAY-COMMENT>/* Array for IPdu List */</ARRAY-COMMENT>
          <TYPE>CONST(PduIdType, BSWM_CONST)</TYPE>
          <DEFAULT-VALUE></DEFAULT-VALUE>
          <SIZE-MACRO>BSWM_NO_OF_IPDU_LIST</SIZE-MACRO>
          <SIZE-MACRO-COMMENT>Total Number of Ipdu List</SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
          <SIZE-MACRO-POSTFIX>U</SIZE-MACRO-POSTFIX>
          <PB-SOURCE-ARRAY>BswM_GaaTriggerIpduSend</PB-SOURCE-ARRAY>
        </ARRAY-ENTRY>
      </ARRAYS>
      
    </BswM_Cfg.c>
    <BswM_Rule.c>
      <TEMPLATE>/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_Rule.c                                                   **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_Rule.h"
#include "BswM_ActionList.h"
#include "BswM_Ram.h"

INCLUDE_FILES

/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/

/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/
#define BSWM_START_SEC_CODE
#include "MemMap.h"

RULE_DEFINITIONS
ENTITY_BODY

#define BSWM_STOP_SEC_CODE
#include "MemMap.h"
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </BswM_Rule.c>
  </OUTPUT-FILES>

  <!-- PC Types frame work -->
  <PC-TYPES-STRUCTURES>
    <API API-NAME="BswM_CanSM_CurrentState" CONTAINER-NAME="CanSMIndication" TYPE='BSWM_CANSM_INDICATION_INIT_STATUS' FILE-INCLUSION="CanSM.h" PRE-COMPILE_OPTION='BSWM_CANSM_ENABLED' PARAM ='CanSMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_CanSMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  CanSM_BswMCurrentStateType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_CanSMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_CanSMCurrentStateType
{
  /* Current state */
  CanSM_BswMCurrentStateType ddCurrentState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>    
}BswM_CanSMCurrentStateType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store CanSM Indication Property */
extern CONST(BswM_CanSMIndicationProperty, BSWM_CONST)
BswM_GaaCanSMIndicationProperty[BSWM_TOTAL_PORTS_OF_CANSM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_CANSM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_ComM_CurrentMode" CONTAINER-NAME="ComMIndication" TYPE='BSWM_COMM_INDICATION_INIT_STATUS' FILE-INCLUSION="ComM.h" PRE-COMPILE_OPTION='BSWM_COMM_ENABLED' PARAM ='ComMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_ComMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  ComM_ModeType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_ComMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_ComMCurrentModeType
{
  /* Current state */
  ComM_ModeType ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_ComMCurrentModeType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store ComM Indication Property */
extern CONST(BswM_ComMIndicationProperty, BSWM_CONST)
BswM_GaaComMIndicationProperty[BSWM_TOTAL_PORTS_OF_COMM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_COMM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_ComM_CurrentPNCMode" CONTAINER-NAME="ComMPncRequest" TYPE='BSWM_COMM_PNC_REQUEST_INIT_STATUS' FILE-INCLUSION="ComM.h" PRE-COMPILE_OPTION='BSWM_COMM_ENABLED' PARAM ='ComMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_ComMPNCIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  PNCHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  ComM_PncModeType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_ComMPNCIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_ComMPNCCurrentModeType
{
  /* Current state */
  ComM_PncModeType ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_ComMPNCCurrentModeType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store ComM PNC Indication Property */
extern CONST(BswM_ComMPNCIndicationProperty, BSWM_CONST)
BswM_GaaComMPncIndicationProperty[BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_Dcm_CommunicationMode_CurrentState" CONTAINER-NAME="DcmComModeRequest" TYPE='BSWM_DCM_COM_REQUEST_INIT_STATUS' FILE-INCLUSION="Dcm.h" PRE-COMPILE_OPTION='BSWM_DCM_ENABLED' PARAM ='DcMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_DcmCommunicationRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  Dcm_CommunicationModeType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_DcmCommunicationRequestProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_DcmReqCommunicationType
{
  /* Current state */
  Dcm_CommunicationModeType ddRequestedMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_DcmReqCommunicationType;
    </ARRAY-TYPE-2>    
    <EXTERN>
/* Global Array to store DcM Communication Request Property */
extern CONST(BswM_DcmCommunicationRequestProperty, BSWM_CONST)
BswM_GaaDcmComRequestProperty[BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_Dcm_ApplicationUpdated" CONTAINER-NAME="DcmApplicationUpdatedIndication" FILE-INCLUSION="Dcm.h" PRE-COMPILE_OPTION='BSWM_DCM_ENABLED' PARAM ='DcMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_DcmApplicationUpdatedProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
     </STRUCTURE-TYPE-1>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_DcmApplicationUpdatedProperty;
    </STRUCTURE-TYPE-2>  
    <EXTERN>
/* Global Array to store Dcm Application Updated Indication Property */
extern CONST(BswM_DcmApplicationUpdatedProperty, BSWM_CONST)
BswM_GaaDcmApplicationUpdatedProperty[BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_EcuM_CurrentState" CONTAINER-NAME="EcuMIndication" TYPE='BSWM_ECUM_INDICATION_INIT_STATUS' FILE-INCLUSION="EcuM.h" PRE-COMPILE_OPTION='BSWM_ECUM_ENABLED' PARAM ='EcuMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_EcuMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  EcuM_StateType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;  
}BswM_EcuMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_EcuMCurrentStateType
{
  /* Current state */
  EcuM_StateType ddCurrentState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_EcuMCurrentStateType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store EcuM CurrentState Indication Property */
extern CONST(BswM_EcuMIndicationProperty, BSWM_CONST)
BswM_GaaEcuMIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ECUM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_EcuM_CurrentWakeup" CONTAINER-NAME="BswMEcuMWakeupSource" TYPE='BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS' FILE-INCLUSION="EcuM.h" PRE-COMPILE_OPTION='BSWM_ECUM_ENABLED' PARAM ='EcuMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_EcuMWakeupIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  EcuM_WakeupSourceType ddEcuMWakeupSourceId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  EcuM_WakeupStatusType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_EcuMWakeupIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_EcuMCurrentWakeupType
{
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
  /* Current state */
  EcuM_WakeupStatusType ddState;
}BswM_EcuMCurrentWakeupType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store EcuM Wakeup Indication Property */
extern CONST(BswM_EcuMWakeupIndicationProperty, BSWM_CONST)
BswM_GaaEcuMWakeupIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_EthSM_CurrentState" CONTAINER-NAME="EthSMIndication" TYPE='BSWM_ETHSM_INDICATION_INIT_STATUS' FILE-INCLUSION="EthSM.h" PRE-COMPILE_OPTION='BSWM_ETHSM_ENABLED' PARAM ='EthSMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_EthSMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  EthSM_NetworkModeStateType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_EthSMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_EthSMCurrentStateType
{
  /* Current state */
  EthSM_NetworkModeStateType ddCurrentState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_EthSMCurrentStateType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store EthSM Requestport Property */
extern CONST(BswM_EthSMIndicationProperty, BSWM_CONST)
BswM_GaaEthSMIndicationProperty[BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_FrSM_CurrentState" CONTAINER-NAME="FrSMIndication" TYPE='BSWM_FRSM_INDICATION_INIT_STATUS' FILE-INCLUSION="FrSM.h" PRE-COMPILE_OPTION='BSWM_FRSM_ENABLED' PARAM ='FrSMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_FrSMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  FrSM_BswM_StateType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_FrSMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_FrSMCurrentStateType
{
  /* Current state */
  FrSM_BswM_StateType ddCurrentState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_FrSMCurrentStateType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store FrSM Requestport Property */
extern CONST(BswM_FrSMIndicationProperty, BSWM_CONST)
BswM_GaaFrSMIndicationProperty[BSWM_TOTAL_PORTS_OF_FRSM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_FRSM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_RequestMode" CONTAINER-NAME="BswMGenericRequest" TYPE='BSWM_GENERIC_REQUEST_INIT_STATUS' FILE-INCLUSION="" PRE-COMPILE_OPTION='BSWM_GENERIC_REQUEST_ENABLED' PARAM ='GenericRequestEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_GenericRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
  
  /* Mode Requester Id */
  uint16 usModeRequesterId;
  
  /* Maximum Requested ids */
  uint16 usRequestedModeMax;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  BswM_ModeType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_GenericRequestProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_GenericRequestModeType
{
  uint16 usModeRequesterId;
  
  /* Current state */
  BswM_ModeType ddRequestedState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_GenericRequestModeType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store Generic Requestport Property */
extern CONST(BswM_GenericRequestProperty, BSWM_CONST)
BswM_GaaGenericRequestProperty[BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_LinSM_CurrentState" CONTAINER-NAME="LinSMIndication" TYPE='BSWM_LINSM_INDICATION_INIT_STATUS' FILE-INCLUSION="LinSM.h" PRE-COMPILE_OPTION='BSWM_LINSM_ENABLED' PARAM ='LinSMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_LinSMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  LinSM_ModeType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_LinSMIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_LinSMCurrentStateType
{
  /* Current state */
  LinSM_ModeType ddCurrentState;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_LinSMCurrentStateType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store LinSM CurrentState Requestport Property */
extern CONST(BswM_LinSMIndicationProperty, BSWM_CONST)
BswM_GaaLinSMIndicationProperty[BSWM_TOTAL_PORTS_OF_LINSM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LINSM_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_LinSM_CurrentSchedule" CONTAINER-NAME="LinScheduleIndication" TYPE='BSWM_LIN_SCHEDULE_INDICATION_INIT_STATUS' FILE-INCLUSION="LinSM.h" PRE-COMPILE_OPTION='BSWM_LINSM_ENABLED' PARAM ='LinSMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_LinSMScheduleIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
  
  NetworkHandleType ddNetworkId;
  
  uint8 ucScheduleId;
     </STRUCTURE-TYPE-1>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_LinSMScheduleIndicationProperty;
    </STRUCTURE-TYPE-2>
    <EXTERN>
/* Global Array to store LinSM Schedule Requestport Property */
extern CONST(BswM_LinSMScheduleIndicationProperty, BSWM_CONST)
BswM_GaaLinScheduleIndicationProperty[BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_LinTp_RequestMode" CONTAINER-NAME="LinTpModeRequest" TYPE='BSWM_LINTP_MODE_REQUEST_INIT_STATUS' FILE-INCLUSION="LinIf.h" PRE-COMPILE_OPTION='BSWM_LINTP_ENABLED' PARAM ='LinTpEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_LinTpRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  LinTp_Mode ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_LinTpRequestProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_LinTpRequestModeType
{
  /* Current state */
  LinTp_Mode ddLinTpRequestedMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_LinTpRequestModeType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store LinTP Schedule Requestport Property */
extern CONST(BswM_LinTpRequestProperty, BSWM_CONST)
BswM_GaaLinTpModeRequestProperty[BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST</SIZE-MACRO>
    </API>    
    <API API-NAME="BswM_NvM_CurrentBlockMode" CONTAINER-NAME="NvMRequest" TYPE='BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS' FILE-INCLUSION="NvM.h" PRE-COMPILE_OPTION='BSWM_NVM_ENABLED' PARAM ='BswMNvMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_NvMBlockModeIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NvM_BlockIdType ddBlockId;  
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  NvM_RequestResultType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_NvMBlockModeIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_NvMCurrentBlockModeType
{
  /* Current state */
  NvM_RequestResultType ddCurrentBlockMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_NvMCurrentBlockModeType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store NvM Current Block Mode Requestport Property */
extern CONST(BswM_NvMBlockModeIndicationProperty, BSWM_CONST)
BswM_GaaNvMBlockModeIndicationProperty[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE</SIZE-MACRO>
    </API>    
    <API API-NAME="BswM_NvM_CurrentJobMode" CONTAINER-NAME="NvMJobModeIndication" TYPE='BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS' FILE-INCLUSION="NvM.h" PRE-COMPILE_OPTION='BSWM_NVM_ENABLED' PARAM ='BswMNvMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_NvMJobModeIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  uint8 ucServiceId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  NvM_RequestResultType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>  
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_NvMJobModeIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_NvMCurrentJobModeType
{
  /* Current state */
  NvM_RequestResultType ddCurrentJobMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_NvMCurrentJobModeType;
    </ARRAY-TYPE-2>
    <EXTERN>    
/* Global Array to store LinTP Schedule Requestport Property */
extern CONST(BswM_NvMJobModeIndicationProperty, BSWM_CONST)
BswM_GaaNvMJobModeIndicationProperty[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE</SIZE-MACRO>
    </API>    
    <API API-NAME="BswM_WdgM_RequestPartitionReset" CONTAINER-NAME="WdgMRequestPartitionReset" FILE-INCLUSION="Os.h" PRE-COMPILE_OPTION='BSWM_WDGM_ENABLED' PARAM ='BswMWdgMEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_WdgM_PartitionResetProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;

  ApplicationType ddApplication;
     </STRUCTURE-TYPE-1>
     <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_WdgM_PartitionResetProperty;
    </STRUCTURE-TYPE-2>
    <EXTERN>    
/* Global Array to store WdgM Request port Property */
extern CONST(BswM_WdgM_PartitionResetProperty, BSWM_CONST)
BswM_GaaWdgMPartitionResetProperty[BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET</SIZE-MACRO>
    </API>
    <API API-NAME="SchM_Mode_$bsnp$_$vi$_$ai$_$name$(&amp;BswM_GaaBswModeNotification[LucId].ddCurrentMode)" CONTAINER-NAME="BswModeNotification" TYPE='BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS' FILE-INCLUSION="SchM_BswM.h" PRE-COMPILE_OPTION='BSWM_BSW_MODE_NOTIFICATION_ENABLED' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_BswModeNotificationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  BswM_ModeDeclarationType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>  
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
      
}BswM_BswModeNotificationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_BswModeNotificationType
{
  /* Current state */
  BswM_ModeDeclarationType ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_BswModeNotificationType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store BSW Mode Notification Property */
extern CONST(BswM_BswModeNotificationProperty, BSWM_CONST)
BswM_GaaBswModeNotificationProperty[BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION</SIZE-MACRO>
    </API>
    <API API-NAME="Rte_Mode_$Notification_Port_Name$_currentMode(&amp;BswM_GaaSwcModeNotificationType[LucId].ddCurrentMode)" CONTAINER-NAME="SwcModeNotification" TYPE='BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS' FILE-INCLUSION="Rte_BswM.h" PRE-COMPILE_OPTION='BSWM_SWC_MODE_NOTIFICATION_ENABLED' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_SwcModeNotificationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  BswM_ModeDeclarationType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>  
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
      
}BswM_SwcModeNotificationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_SwcModeNotificationType
{
  /* Current state */
  BswM_ModeDeclarationType ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_SwcModeNotificationType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store SWC Mode Notification Property */
extern CONST(BswM_SwcModeNotificationProperty, BSWM_CONST)
BswM_GaaSwcModeNotificationProperty[BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION</SIZE-MACRO>
    </API>
    <API API-NAME="Rte_Read_$Requested_Port_Name$_requestedMode(&amp;BswM_GaaSwcModeRequest[LucId].ddRequestedMode)" CONTAINER-NAME="SwcModeRequest" TYPE='BSWM_SWC_MODE_REQUEST_INIT_STATUS' FILE-INCLUSION="Rte_BswM.h" PRE-COMPILE_OPTION='BSWM_SWC_MODE_REQUEST_ENABLED' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_SwcModeRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  BswM_ModeDeclarationType ddModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>  
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_SwcModeRequestProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_SwcModeRequestType
{
  /* Current state */
  BswM_ModeDeclarationType ddRequestedMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>  
}BswM_SwcModeRequestType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store SWC Mode Request Property */
extern CONST(BswM_SwcModeRequestProperty, BSWM_CONST)
BswM_GaaSwcModeRequestProperty[BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_J1939DcmBroadcastStatus" CONTAINER-NAME="J1939DcmBroadcastStatus" TYPE='BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS' FILE-INCLUSION="J1939Dcm.h" PRE-COMPILE_OPTION='BSWM_J1939DCM_ENABLED' PARAM ='J1939DcmEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_J1939DcmBroadcastStatusProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  uint16 ucModeInitValue;/* init value */
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_J1939DcmBroadcastStatusProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_J1939CurrentDcmModeType
{
  /* Current state */
  uint16 ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_J1939CurrentDcmModeType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store J1939 Dcm Broadcast Status Property */
extern CONST(BswM_J1939DcmBroadcastStatusProperty, BSWM_CONST)
BswM_GaaJ1939DcmBroadcastStatusProperty[BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS</SIZE-MACRO>
    </API>
    <API API-NAME="BswM_J1939Nm_StateChangeNotification" CONTAINER-NAME="J1939NmIndication" TYPE='BSWM_J1939NM_INDICATION_INIT_STATUS' FILE-INCLUSION="J1939Nm.h" PRE-COMPILE_OPTION='BSWM_J1939NM_ENABLED' PARAM ='J1939NmEnabled' >
    <STRUCTURE-TYPE-1>
typedef struct STag_BswM_J1939NmIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
  
  uint8 ucNodeId;
     </STRUCTURE-TYPE-1>
      <INIT-STATUS-DATA1> 
  Nm_StateType ddModeInitValue;
      </INIT-STATUS-DATA1>
      <INIT-STATUS-DATA2>
  boolean blModeInitValueStatus;
      </INIT-STATUS-DATA2>
      <STRUCTURE-TYPE-2>
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_J1939NmIndicationProperty;
    </STRUCTURE-TYPE-2>
    <ARRAY-TYPE-1>
typedef struct STag_BswM_J1939CurrentNmModeType
{
  /* Current state */
  Nm_StateType ddCurrentMode;
  </ARRAY-TYPE-1>
    <INIT-STATUS-DATA3>
  boolean blModeValueStatus;
    </INIT-STATUS-DATA3>
    <ARRAY-TYPE-2>
}BswM_J1939CurrentNmModeType;
    </ARRAY-TYPE-2>
    <EXTERN>
/* Global Array to store J1939 Nm Indication Property */
extern CONST(BswM_J1939NmIndicationProperty, BSWM_CONST)
BswM_GaaJ1939NmIndicationProperty[BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION];
    </EXTERN>
    <SIZE-MACRO>BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION</SIZE-MACRO>
    </API>
  </PC-TYPES-STRUCTURES>
  
  <!-- Action list API frame work -->
  <ACTION-API-FORMAT>
/*******************************************************************************
** Function Name        : $FunctionName$
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This ActionList() function shall have a link to     **
**                        either Action or Action List or Rule.               **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                        Function(s) invoked :                               **
$InvokedAPIs$
*******************************************************************************/
FUNC(void, BSWM_CODE) $ActionListName$(void)
{
$ReturnVariables$
$FunctionInvokes$
}
</ACTION-API-FORMAT>

  <!-- Extern declaration frame work for Action list API -->
  <ACTION-API-EXTERN>

extern FUNC(void, BSWM_CODE) $ActionListName$(void);

</ACTION-API-EXTERN>

  <!-- Rule API frame work -->
  <RULE-API-FORMAT>
/*******************************************************************************
** Function Name        : $FunctionName$
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This Rule function shall invoke True action list or **
**                        False action list.                                  **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                        Function(s) invoked :                               **
$InvokedAPIs$
*******************************************************************************/
FUNC(void, BSWM_CODE) $RuleFunctionName$(void)
{
$FunctionBody$
}
</RULE-API-FORMAT>

  <!-- Extern declaration frame work for Rule API -->
  <RULE-API-EXTERN>
extern FUNC(void, BSWM_CODE) $RuleFunctionName$(void);
</RULE-API-EXTERN>

  <!-- Rule start check frame work -->
  <RULE-CHECK-FORMAT>
    <DELIMITER>&amp;&amp;</DELIMITER>
    <START-CHECK-FORMAT>((BSWM_MIXED == $Literal$_INIT_STATUS) || (BSWM_INVALID == $Literal$_INIT_STATUS))</START-CHECK-FORMAT>
    <STOP-CHECK-FORMAT>#endif</STOP-CHECK-FORMAT>
  </RULE-CHECK-FORMAT>

  <!-- Trigger and True code snippet -->
  <TRUE-ACTION-LIST-TRIGGER>if (BswM_GaaRuleEvaluation[$RuleIndex$].ucRulePreviousResult != BSWM_TRUE)
{
$ActionListCondition$
}</TRUE-ACTION-LIST-TRIGGER>

  <!-- Trigger and False code snippet -->
  <FALSE-ACTION-LIST-TRIGGER>if (BswM_GaaRuleEvaluation[$RuleIndex$].ucRulePreviousResult != BSWM_FALSE)
{
$ActionListCondition$
}</FALSE-ACTION-LIST-TRIGGER>
  
  <ACTION-LIST-CONDITION>$PrevResult$
$ActionList$</ACTION-LIST-CONDITION>
  
  <TRUE-PREV-RESULT>SchM_Enter_BswM_RULEPREVRESULT_PROTECTION();
BswM_GaaRuleEvaluation[$RuleIndex$].ucRulePreviousResult = BSWM_TRUE;
SchM_Exit_BswM_RULEPREVRESULT_PROTECTION();
</TRUE-PREV-RESULT>
  
  <FALSE-PREV-RESULT>SchM_Enter_BswM_RULEPREVRESULT_PROTECTION();
BswM_GaaRuleEvaluation[$RuleIndex$].ucRulePreviousResult = BSWM_FALSE;
SchM_Exit_BswM_RULEPREVRESULT_PROTECTION();
</FALSE-PREV-RESULT>

  <!-- Actions API Details with Argument sequence -->
  <ACTIONS>
    <API API-NAME="ComM_CommunicationAllowed" CONTAINER-NAME="BswMComMAllowCom" RETURN-TYPE="" RETURN="" FILE-INCLUSION="ComM_EcuMBswM.h" >
      <BEFORE-API></BEFORE-API>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId'>BswMComMAllowChannelRef</PARAMETER>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>BswMComAllowed</PARAMETER>
      </PARAMETERS>
      <AFTER-API></AFTER-API>
    </API>
    <API API-NAME="ComM_LimitChannelToNoComMode" CONTAINER-NAME="BswMComMModeLimitation" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="ComM.h" >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId'>BswMComMLimitChannelRef</PARAMETER>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>BswMComMLimitMode</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="ComM_RequestComMode" CONTAINER-NAME="BswMComMModeSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="ComM.h" >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMUser' DEST-PARAM='ComMUserIdentifier'>BswMComMUserRef</PARAMETER>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>BswMComMRequestedMode</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="LinSM_ScheduleRequest" CONTAINER-NAME="BswMLinScheduleSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="LinSM.h"  PB-API-TYPE='NetworkSchedule'>
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' >LinSMChannelRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='LinSMSchedule' DEST-PARAM='LinSMScheduleIndex' >BswMLinScheduleRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_DeadlineMonitoringControl" CONTAINER-NAME="BswMDeadlineMonitoringControl" RETURN-TYPE="" RETURN="" FILE-INCLUSION="Com.h" PB-API-TYPE='ComPdu_EnableDisable' API-TYPE='ComPduApi' >
      <PB-STRUCTURE-1 NAME='BswM_GaaDMControl'></PB-STRUCTURE-1>
      <PB-STRUCTURE-2 NAME='BswM_GaaDMPduGroupList'></PB-STRUCTURE-2>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='ComIPduGroup' DEST-PARAM='ComIPduGroupHandleId' FLAG='BSWM_FALSE' PB-API-PRAMETER-TYPE='Disable' PB1-ELEMENT='ucIdDisable' PB1-ELEMENT-TOTAL-COUNT='ucTotalDisable'>BswMDisabledDMPduGroupRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='ComIPduGroup' DEST-PARAM='ComIPduGroupHandleId' FLAG='BSWM_TRUE'  PB-API-PRAMETER-TYPE='Enable'  PB1-ELEMENT='ucIdEnable'  PB1-ELEMENT-TOTAL-COUNT='ucTotalEnable'>BswMEnabledDMPduGroupRef</PARAMETER>
      </PARAMETERS>
      <STRUCT-TYPE>
/* For Available Actions BswMDeadlineMonitoringControl */
typedef struct STag_BswM_DMControlType
{
  /* the index of BswM_GaaDMPduGroupList */
  uint8 ucIdEnable;
  uint8 ucIdDisable;
  
  /* the number of selected Pdu Groups */
  uint8 ucTotalEnable;
  uint8 ucTotalDisable;
}BswM_DMControlType;
      </STRUCT-TYPE>
      <CONST-DECLARATION>
#if (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO)
extern CONST(BswM_DMControlType, BSWM_CONST) 
BswM_GaaDMControl[BSWM_NO_OF_DM_CONTROL];
#endif

#if (BSWM_NO_OF_DM_PDU_GROUP_LIST > BSWM_ZERO)
extern CONST(Com_IpduGroupIdType, BSWM_CONST) BswM_GaaDMPduGroupList[BSWM_NO_OF_DM_PDU_GROUP_LIST];
#endif
      </CONST-DECLARATION>
      <RAM-DECLARATION>
#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

extern VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddReceptionDMControlVector;

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"
      </RAM-DECLARATION>
      <RAM-DEFINITION>
#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddReceptionDMControlVector;

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"
      </RAM-DEFINITION>
      <EXTERN>
extern FUNC(void, BSWM_CODE) BswM_DeadlineMonitoringControl(uint8 index);
      </EXTERN>
      <FUNCTION-BODY>
/*******************************************************************************
** Function Name        : BswM_DeadlineMonitoringControl                      **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function sets the Ipdu DM group.               **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : index                                               **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaDMControl, BswM_GaaDMPduGroupList         **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Com_SetIpduGroup, Com_ReceptionDMControl          **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_DeadlineMonitoringControl(uint8 index)
{
  uint8 LucIndex;
  boolean LblFlag;
  Com_IpduGroupIdType LddId;
  
  LblFlag = BSWM_FALSE;
  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaDMControl[index].ucTotalEnable; LucIndex++)
  {
    LddId = BswM_GaaDMPduGroupList[BswM_GaaDMControl[index].ucIdEnable + LucIndex];
    Com_SetIpduGroup(BswM_GddReceptionDMControlVector, LddId, BSWM_TRUE);
    LblFlag = BSWM_TRUE;
  }
  
  if (LblFlag == BSWM_TRUE)
  {
    Com_ReceptionDMControl(BswM_GddReceptionDMControlVector);
  }
  
  LblFlag = BSWM_FALSE;
  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaDMControl[index].ucTotalDisable; LucIndex++)
  {
    LddId = BswM_GaaDMPduGroupList[BswM_GaaDMControl[index].ucIdDisable + LucIndex];
    Com_SetIpduGroup(BswM_GddReceptionDMControlVector, LddId, BSWM_FALSE);
    LblFlag = BSWM_TRUE;
  }
  
  if(LblFlag == BSWM_TRUE)
  {
    Com_ReceptionDMControl(BswM_GddReceptionDMControlVector);
  }
}
      </FUNCTION-BODY>
    </API>
    <API API-NAME="BswM_PduGroupSwitch" CONTAINER-NAME="BswMPduGroupSwitch" RETURN-TYPE="" RETURN="" FILE-INCLUSION="Com.h" PB-API-TYPE='ComPdu_EnableDisable' API-TYPE='ComPduApi' >
      <PB-STRUCTURE-1 NAME='BswM_GaaPduGroupSwitch'></PB-STRUCTURE-1>
      <PB-STRUCTURE-2 NAME='BswM_GaaPduGroupList'></PB-STRUCTURE-2>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' PB1-VALUE='blReinit' PB1-VALUE-TYPE='BOOL'>BswMPduGroupSwitchReinit</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='ComIPduGroup' DEST-PARAM='ComIPduGroupHandleId' FLAG='BSWM_FALSE' PB-API-PRAMETER-TYPE='Disable' PB1-ELEMENT='ucIdDisable' PB1-ELEMENT-TOTAL-COUNT='ucTotalDisable'>BswMDisabledPduGroupRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='ComIPduGroup' DEST-PARAM='ComIPduGroupHandleId' FLAG='BSWM_TRUE'  PB-API-PRAMETER-TYPE='Enable'  PB1-ELEMENT='ucIdEnable'  PB1-ELEMENT-TOTAL-COUNT='ucTotalEnable'>BswMEnabledPduGroupRef</PARAMETER>
      </PARAMETERS>
      <STRUCT-TYPE>
/* For Available Actions BswMPduGroupSwitch */
typedef struct STag_BswM_PduGroupSwitchType
{
  boolean blReinit;
  
  /* the index of BswM_GaaPduGroupList */
  uint8 ucIdEnable;
  uint8 ucIdDisable;
  
  /* the number of selected Pdu Groups */
  uint8 ucTotalEnable;
  uint8 ucTotalDisable;
}BswM_PduGroupSwitchType;
      </STRUCT-TYPE>
      <CONST-DECLARATION>
#if (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)
extern CONST(BswM_PduGroupSwitchType, BSWM_CONST) BswM_GaaPduGroupSwitch[BSWM_NO_OF_PDU_GROUP_SWITCH];
#endif

#if (BSWM_NO_OF_PDU_GROUP_LIST > BSWM_ZERO)
extern CONST(Com_IpduGroupIdType, BSWM_CONST) BswM_GaaPduGroupList[BSWM_NO_OF_PDU_GROUP_LIST];
#endif
      </CONST-DECLARATION>
      <RAM-DECLARATION>
#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

extern VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddIpduGroupControlVector;

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"
      </RAM-DECLARATION>
      <RAM-DEFINITION>
#define BSWM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"

VAR(Com_IpduGroupVector, BSWM_VAR_CLEARED) BswM_GddIpduGroupControlVector;

#define BSWM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"
      </RAM-DEFINITION>
      <EXTERN>
extern FUNC(void, BSWM_CODE) BswM_PduGroupSwitch(uint8 index);
      </EXTERN>
      <FUNCTION-BODY>
/*******************************************************************************
** Function Name        : BswM_PduGroupSwitch                                 **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function sets the IPdu group.                  **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : index                                               **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaPduGroupSwitch, BswM_GaaPduGroupList      **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Com_SetIpduGroup, Com_IpduGroupControl            **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_PduGroupSwitch(uint8 index)
{
  uint8 LucIndex;
  boolean LblFlag;
  Com_IpduGroupIdType LddId;
  
  LblFlag = BSWM_FALSE;
  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaPduGroupSwitch[index].ucTotalEnable; LucIndex++)
  {
    LddId = BswM_GaaPduGroupList[BswM_GaaPduGroupSwitch[index].ucIdEnable + LucIndex];
    Com_SetIpduGroup(BswM_GddIpduGroupControlVector, LddId, BSWM_TRUE);
    /*  SWS_Com_00733  */
    Com_SetIpduGroup(BswM_GddReceptionDMControlVector, LddId, BSWM_TRUE);
    LblFlag = BSWM_TRUE;
  }
  
  if (LblFlag == BSWM_TRUE)
  {
    Com_IpduGroupControl(BswM_GddIpduGroupControlVector, BswM_GaaPduGroupSwitch[index].blReinit);
  }
  
  LblFlag = BSWM_FALSE;
  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaPduGroupSwitch[index].ucTotalDisable; LucIndex++)
  {
    LddId = BswM_GaaPduGroupList[BswM_GaaPduGroupSwitch[index].ucIdDisable + LucIndex];
    Com_SetIpduGroup(BswM_GddIpduGroupControlVector, LddId, BSWM_FALSE);
    /*  SWS_Com_00685  */
    Com_SetIpduGroup(BswM_GddReceptionDMControlVector, LddId, BSWM_FALSE);
    LblFlag = BSWM_TRUE;
  }
  
  if (LblFlag == BSWM_TRUE)
  {
    Com_IpduGroupControl(BswM_GddIpduGroupControlVector, BswM_GaaPduGroupSwitch[index].blReinit);
  }
}
      </FUNCTION-BODY>
    </API>
    <API API-NAME="BswM_PduRouterControl" CONTAINER-NAME="BswMPduRouterControl" RETURN-TYPE="" RETURN="" FILE-INCLUSION="PduR.h" PB-API-TYPE='ComPdu' API-TYPE='ComPduApi' >
      <PB-STRUCTURE-1 NAME='BswM_GaaPduRouterControl'></PB-STRUCTURE-1>
      <PB-STRUCTURE-2 NAME='BswM_GaaPduRoutingList'></PB-STRUCTURE-2>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' PB1-VALUE='blAction' PB1-VALUE-TYPE='BOOL'>BswMPduRouterAction</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='PduRRoutingPathGroup' DEST-PARAM='PduRRoutingPathGroupId' PB1-ELEMENT='ucId' PB1-ELEMENT-TOTAL-COUNT='ucTotal'>BswMPduRoutingPathGroupRef</PARAMETER>
      </PARAMETERS>
      <STRUCT-TYPE>
/* For Available Actions BswMPduRouterControl */
typedef struct STag_BswM_PduRouterControlType
{
  boolean blAction;
  
  /* the index of BswM_GaaPduRoutingList */
  uint8 ucId;
  
  /* the number of selected Pdu Routings */
  uint8 ucTotal;
}BswM_PduRouterControlType;
      </STRUCT-TYPE>
      <CONST-DECLARATION>
#if (BSWM_NO_OF_PDUR_ROUTER_CONTROL > BSWM_ZERO)
extern CONST(BswM_PduRouterControlType, BSWM_CONST)
BswM_GaaPduRouterControl[BSWM_NO_OF_PDUR_ROUTER_CONTROL];
#endif

#if (BSWM_NO_OF_PDU_ROUTING_LIST > BSWM_ZERO)
extern CONST(PduR_RoutingPathGroupIdType, BSWM_CONST) BswM_GaaPduRoutingList[BSWM_NO_OF_PDU_ROUTING_LIST];
#endif
      </CONST-DECLARATION>
      <EXTERN>
extern FUNC(void, BSWM_CODE) BswM_PduRouterControl(uint8 index);
      </EXTERN>
      <FUNCTION-BODY>
/*******************************************************************************
** Function Name        : BswM_PduRouterControl                               **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function shall call PduR routing function      **
**                        with ids based on the configuration.                **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : index                                               **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaPduRouterControl, BswM_GaaPduRoutingList  **
**                                                                            **
**                        Function(s) invoked :                               **
**                          PduR_EnableRouting, PduR_DisableRouting           **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_PduRouterControl(uint8 index)
{
  uint8 LucIndex;
  PduR_RoutingPathGroupIdType LddId;

  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaPduRouterControl[index].ucTotal; LucIndex++)
  {
    LddId = BswM_GaaPduRoutingList[BswM_GaaPduRouterControl[index].ucId + LucIndex];
    
    if (BswM_GaaPduRouterControl[index].blAction == BSWM_TRUE)
    {
      PduR_EnableRouting(LddId);
    }
    else
    {
      PduR_DisableRouting(LddId);
    }
  }
}
      </FUNCTION-BODY>
    </API>
    <API API-NAME="BswM_TriggerIPduSend" CONTAINER-NAME="BswMTriggerIPduSend" RETURN-TYPE="" RETURN="" FILE-INCLUSION="Com.h" PB-API-TYPE='ComPdu' API-TYPE='ComPduApi' >
      <PB-STRUCTURE-1 NAME='BswM_GaaTriggerIpduSend'></PB-STRUCTURE-1>
      <PB-STRUCTURE-2 NAME='BswM_GaaIpduList'></PB-STRUCTURE-2>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' MANDATORY='No' DEST-CONT='ComIPdu' DEST-PARAM='ComIPduHandleId' PB1-ELEMENT='ucId' PB1-ELEMENT-TOTAL-COUNT='ucTotal'>BswMTriggeredIPduRef</PARAMETER>
      </PARAMETERS>
      <STRUCT-TYPE>
/* For Available Actions Com_TriggerPdu */
typedef struct STag_BswM_TriggerIpduSendType
{
  /* the index of BswM_GaaIpduList */
  uint8 ucId;
  
  /* the number of selected Ipdu */
  uint8 ucTotal;
}BswM_TriggerIpduSendType;
      </STRUCT-TYPE>
      <CONST-DECLARATION>
#if (BSWM_NO_OF_TRIGGER_IPDU_SEND > BSWM_ZERO)
extern CONST(BswM_TriggerIpduSendType, BSWM_CONST) BswM_GaaTriggerIpduSend[BSWM_NO_OF_TRIGGER_IPDU_SEND];
#endif

#if (BSWM_NO_OF_IPDU_LIST > BSWM_ZERO)
extern CONST(PduIdType, BSWM_CONST) BswM_GaaIpduList[BSWM_NO_OF_IPDU_LIST];
#endif
      </CONST-DECLARATION>
      <EXTERN>
extern FUNC(void, BSWM_CODE) BswM_TriggerIPduSend(uint8 index);
      </EXTERN>
      <FUNCTION-BODY>
/*******************************************************************************
** Function Name        : BswM_TriggerIPduSend                                **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function shall call Com trigger ipdu function  **
**                        with ids based on the configuration.                **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : index                                               **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GaaTriggerIpduSend, BswMGaaIPduList          **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Com_TriggerIPDUSend                               **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_TriggerIPduSend(uint8 index)
{
  uint8 LucIndex;
  PduIdType LddId;

  for (LucIndex = (uint8)BSWM_ZERO; LucIndex &lt; BswM_GaaTriggerIpduSend[index].ucTotal; LucIndex++)
  {
    LddId = BswM_GaaIpduList[BswM_GaaTriggerIpduSend[index].ucId + LucIndex];
    Com_TriggerIPDUSend(LddId);
  }
}
      </FUNCTION-BODY>
    </API>
    <API API-NAME="Com_SwitchIpduTxMode" CONTAINER-NAME="BswMSwitchIPduMode" RETURN-TYPE="" RETURN="" FILE-INCLUSION="Com.h" PB-API-TYPE='' API-TYPE=''>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComIPdu' DEST-PARAM='ComIPduHandleId'>BswMSwitchIPduModeRef</PARAMETER>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>BswMSwitchIPduModeValue</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="EcuM_GoDown" CONTAINER-NAME="BswMEcuMGoDown" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="EcuM.h" >
      <BEFORE-API></BEFORE-API>
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='EcuMFlexUserConfig' DEST-PARAM='EcuMFlexUser'>BswMEcuMUserIdRef</PARAMETER>
      </PARAMETERS>
      <AFTER-API></AFTER-API>
    </API>
    <API API-NAME="FrSM_SetEcuPassive" CONTAINER-NAME="BswMFrSMSetEcuPassive" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="FrSM.h" >
      <BEFORE-API></BEFORE-API>
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' DEST-CONT='' DEST-PARAM=''>BswMFrSMPassiveEnabled</PARAMETER>
      </PARAMETERS>
      <AFTER-API></AFTER-API>
    </API>
    <API API-NAME="EcuM_SelectShutdownTarget($Target$, $ref$)" CONTAINER-NAME="BswMEcuMSelectShutdownTarget" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="EcuM.h" API-TYPE='ShutdownApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' >BswMEcuMShutdownTarget</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' DEST-CONT='EcuMSleepMode' DEST-PARAM='EcuMSleepModeId'>BswMEcuMSleepModeRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL='Ignore' DEST-CONT='EcuMResetMode' DEST-PARAM='EcuMResetModeId'>BswMEcuMResetModeRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_TriggerSlaveRTEStop" CONTAINER-NAME="TriggerSlaveRTEStop" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="Os.h" API-TYPE='ChoiceSlaveRteStopApi'>
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>CoreId</PARAMETER>
      </PARAMETERS>
      <STOP-SLAVE-CONST-DECLARATION>
/* Global Array to store slave core property to Rte_Stop() */
extern CONST(BswM_SlaveCoreInfoType, BSWM_CONST) BswM_GaaStopSlaveCores[BSWM_NO_OF_STOP_SLAVE_CORES];
      </STOP-SLAVE-CONST-DECLARATION>
      <SLAVE-STRUCTURE-TYPE>typedef struct STag_BswM_SlaveCoreInfoType
{ 
  /* Slave Core Id */
  CoreIdType ddCoreId;

  /* Slave Task*/
  TaskType ddTask;

}BswM_SlaveCoreInfoType;</SLAVE-STRUCTURE-TYPE>
      <OS-INCLUDE-FILE>#include "Os.h"</OS-INCLUDE-FILE>
    </API>
    <API API-NAME="BswM_TriggerStartUpPhase2" CONTAINER-NAME="TriggerStartUpPhase2" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="Os.h" API-TYPE='ChoiceSlaveRteStartApi'>
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX=''>CoreId</PARAMETER>
      </PARAMETERS>
      <START-SLAVE-CONST-DECLARATION>
/* Global Array to store slave core property to Rte_Start() */
extern CONST(BswM_SlaveCoreInfoType, BSWM_CONST) BswM_GaaStartSlaveCores[BSWM_NO_OF_START_SLAVE_CORES];
      </START-SLAVE-CONST-DECLARATION>
      <SLAVE-STRUCTURE-TYPE>typedef struct STag_BswM_SlaveCoreInfoType
{ 
  /* Slave Core Id */
  CoreIdType ddCoreId;

  /* Slave Task*/
  TaskType ddTask;

}BswM_SlaveCoreInfoType;</SLAVE-STRUCTURE-TYPE>
      <OS-INCLUDE-FILE>#include "Os.h"</OS-INCLUDE-FILE>
    </API>
    <API API-NAME="" CONTAINER-NAME="UserCallout" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue">
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>      
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' IN-API-CALL='Constant' >UserCalloutFunction</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="if (BswMNMAction==BSWM_NM_ENABLE)Nm_EnableCommunication;if (BswMNMAction==BSWM_NM_DISABLE)Nm_DisableCommunication;" CONTAINER-NAME="BswMNMControl" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="Nm.h" API-TYPE='ChoiceApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' IN-API-CALL='Ignore'>BswMNMAction</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId'>BswMComMNetworkHandleRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="Rte_Switch_$Port_Name$_$ModeGroup_Name$($Mode_Name$)" CONTAINER-NAME="BswMRteSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION="Rte_BswM.h" API-TYPE='RteApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != RTE_E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='F' PREFIX='' POSTFIX='' INFO-KEY='Port_ModeGrp' RESOLVE-KEYS='Port_Name:ModeGroup_Name' DEST-RTE-CONT='MODE-SWITCH-INTERFACE' DEST-CONT='' DEST-PARAM='' IN-API-CALL='Ignore' RTE-DESTINATION="Software Component Description" >BswMModeSwitchInterfaceRef</PARAMETER>
        <PARAMETER TYPE='F' PREFIX='' POSTFIX='' INFO-KEY='ModDeclare' RESOLVE-KEYS='Mode_Type:Mode_Name' DEST-RTE-CONT='MODE-DECLARATION' DEST-CONT='' DEST-PARAM='' IN-API-CALL='Ignore' RTE-DESTINATION="Software Component Description" >BswMSwitchedMode</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="SchM_Switch_$ReqModeGroup_Name$_$ModeGroup_Name$($Mode_Name$)" CONTAINER-NAME="BswMSchMSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" FILE-INCLUSION='SchM_BswM.h' API-TYPE='SchMApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>if (LddReturnValue != SCHM_E_OK)
{
  $DemRepotApi$
  $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='F' PREFIX='' POSTFIX='' INFO-KEY='ModDeclare' RESOLVE-KEYS='Mode_Type:Mode_Name' DEST-RTE-CONT='MODE-DECLARATION' DEST-CONT='' DEST-PARAM='' IN-API-CALL='Ignore' RTE-DESTINATION="Software Component Description" >BswMSchMSwitchedMode</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="J1939Dcm_SetState" CONTAINER-NAME="BswMJ1939DcmStateSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddJ1939DcmReturnVal" FILE-INCLUSION="J1939Dcm.h" API-TYPE='ChoiceApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>  if (LddReturnValue != NM_E_OK)
{
    $DemRepotApi$
    $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMConfigSet' DEST-PARAM='ComMChannel' STRUCTURE-ELEMENT='ddChannel'>BswMJ1939DcmChannelRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='J1939NmConfigSet' DEST-PARAM='J1939NmNode' STRUCTURE-ELEMENT='ddNode'>BswMJ1939DcmNodeRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' >BswMJ1939DcmRequestedState</PARAMETER>        
      </PARAMETERS>
    </API>
    <API API-NAME="J1939Rm_SetState" CONTAINER-NAME="BswMJ1939RmStateSwitch" RETURN-TYPE="Std_ReturnType" RETURN="LddJ1939RmReturnVal" FILE-INCLUSION="J1939Rm.h" API-TYPE='ChoiceApi' >
      <DEM-REPORT>Dem_ReportErrorStatus($DemEvent$, DEM_EVENT_STATUS_FAILED);</DEM-REPORT>
      <DEM-ABORT-CALL>  if (LddReturnValue != NM_E_OK)
{
    $DemRepotApi$
    $Break$
}</DEM-ABORT-CALL>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMConfigSet' DEST-PARAM='ComMChannel' STRUCTURE-ELEMENT='ddChannel'>BswMJ1939RmChannelRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='J1939NmConfigSet' DEST-PARAM='J1939NmNode' STRUCTURE-ELEMENT='ddNode'>BswMJ1939RmNodeRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' IN-API-CALL=''>BswMJ1939RmRequestedState</PARAMETER>        
      </PARAMETERS>
    </API>
  </ACTIONS>

  <!-- Mode request port API details with argument sequence -->
  <MODE-REQUEST-PORT>
    <API API-NAME="BswM_CanSM_CurrentState" CONTAINER-NAME="CanSMIndication" TYPE='BSWM_CANSM_INDICATION' RULE-ARRAY-NAME='BswM_GaaCanSMCurrentState' RULE-VARIABLE='ddCurrentState' FILE-INCLUSION="CanSM.h" PRE-COMPILE_OPTION='CanSMEnabled' >
      <STRUCTURE NAME='BswM_GaaCanSMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_CANSM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaCanSMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaCanSMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_CANSM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaCanSMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaCanSMCurrentState[LucId].ddCurrentState = BswM_GaaCanSMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaCanSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_CANSM_INDICATION_INIT_STATUS))
      BswM_GaaCanSMCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_CANSM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_CanSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaCanSMCurrentState[BSWM_TOTAL_PORTS_OF_CANSM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_CanSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaCanSMCurrentState[BSWM_TOTAL_PORTS_OF_CANSM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId'>CanSMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_ComM_CurrentMode" CONTAINER-NAME="ComMIndication" TYPE='BSWM_COMM_INDICATION' RULE-ARRAY-NAME='BswM_GaaComMCurrentMode' RULE-VARIABLE='ddCurrentMode' FILE-INCLUSION="ComM.h" PRE-COMPILE_OPTION='ComMEnabled' >
      <STRUCTURE NAME='BswM_GaaComMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_COMM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaComMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaComMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_COMM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaComMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaComMCurrentMode[LucId].ddCurrentMode = BswM_GaaComMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaComMCurrentMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_COMM_INDICATION_INIT_STATUS))
      BswM_GaaComMCurrentMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_COMM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_ComMCurrentModeType, BSWM_VAR_CLEARED) BswM_GaaComMCurrentMode[BSWM_TOTAL_PORTS_OF_COMM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_ComMCurrentModeType, BSWM_VAR_CLEARED) BswM_GaaComMCurrentMode[BSWM_TOTAL_PORTS_OF_COMM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId'>ComMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_ComM_CurrentPNCMode" CONTAINER-NAME="ComMPncRequest" TYPE='BSWM_COMM_PNC_REQUEST' RULE-ARRAY-NAME='BswM_GaaComMPNCCurrentMode' RULE-VARIABLE='ddCurrentMode' FILE-INCLUSION="ComM.h" PRE-COMPILE_OPTION='ComMEnabled' >
      <STRUCTURE NAME='BswM_GaaComMPncIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaComMPncIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaComMPncIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS) || (BSWM_VALID == BSWM_COMM_PNC_REQUEST_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaComMPncIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaComMPNCCurrentMode[LucId].ddCurrentMode = BswM_GaaComMPncIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaComMPNCCurrentMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS) || (BSWM_INVALID == BSWM_COMM_PNC_REQUEST_INIT_STATUS))
      BswM_GaaComMPNCCurrentMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_COMM_PNC_REQUEST_INIT_STATUS)
    }
    #endif
  }
    </INIT-CODE-SNIPPET>
    <RAM-DECLARATION>
extern VAR(BswM_ComMPNCCurrentModeType, BSWM_VAR_CLEARED) BswM_GaaComMPNCCurrentMode[BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST];
    </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_ComMPNCCurrentModeType, BSWM_VAR_CLEARED) BswM_GaaComMPNCCurrentMode[BSWM_TOTAL_PORTS_OF_COMM_PNC_REQUEST];
      </RAM-DEFINITION>
    <API-DEFINITION></API-DEFINITION>
    <API-DECLARATION></API-DECLARATION>
    <PARAMETERS>
      <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMPnc' DEST-PARAM='ComMPncId' STRUCTURE-ELEMENT='ddNetworkId'>ComMPncRef</PARAMETER>
    </PARAMETERS>
  </API>
  <API API-NAME="BswM_Dcm_CommunicationMode_CurrentState" CONTAINER-NAME="DcmComModeRequest" TYPE='BSWM_DCM_COM_REQUEST' RULE-ARRAY-NAME='BswM_GaaDcmReqCommunication' RULE-VARIABLE='ddRequestedMode' FILE-INCLUSION="Dcm.h" PRE-COMPILE_OPTION='DcmEnabled' >
    <STRUCTURE NAME='BswM_GaaDcmComRequestProperty'></STRUCTURE>
    <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaDcmComRequestProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaDcmComRequestProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS) || (BSWM_VALID == BSWM_DCM_COM_REQUEST_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaDcmComRequestProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaDcmReqCommunication[LucId].ddRequestedMode = BswM_GaaDcmComRequestProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaDcmReqCommunication[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS) || (BSWM_INVALID == BSWM_DCM_COM_REQUEST_INIT_STATUS))
      BswM_GaaDcmReqCommunication[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_DCM_COM_REQUEST_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_DcmReqCommunicationType, BSWM_VAR_CLEARED) BswM_GaaDcmReqCommunication[BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_DcmReqCommunicationType, BSWM_VAR_CLEARED) BswM_GaaDcmReqCommunication[BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId' >DcmComMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_Dcm_ApplicationUpdated" CONTAINER-NAME="DcmApplicationUpdatedIndication" TYPE='BSWM_DCM_APPLICATION_UPDATED_INDICATION' FILE-INCLUSION="Dcm.h" PRE-COMPILE_OPTION='DcmEnabled' >
      <STRUCTURE NAME='BswM_GaaDcmApplicationUpdatedProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_DCM_APPLICATION_UPDATED_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaDcmApplicationUpdatedProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaDcmApplicationUpdatedProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
  }
      </INIT-CODE-SNIPPET>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS></PARAMETERS>
    </API>
    <API API-NAME="BswM_EcuM_CurrentState" CONTAINER-NAME="EcuMIndication" TYPE='BSWM_ECUM_INDICATION' RULE-ARRAY-NAME='BswM_GaaEcuMCurrentState' RULE-VARIABLE='ddCurrentState' FILE-INCLUSION="EcuM.h" ShortName='Yes' PRE-COMPILE_OPTION='EcuMEnabled' >
      <STRUCTURE NAME='BswM_GaaEcuMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ECUM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaEcuMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEcuMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_ECUM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaEcuMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaEcuMCurrentState[LucId].ddCurrentState = BswM_GaaEcuMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaEcuMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_ECUM_INDICATION_INIT_STATUS))
      BswM_GaaEcuMCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_ECUM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_EcuMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaEcuMCurrentState[BSWM_TOTAL_PORTS_OF_ECUM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_EcuMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaEcuMCurrentState[BSWM_TOTAL_PORTS_OF_ECUM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
    </API>
    <API API-NAME="BswM_EcuM_CurrentWakeup"           CONTAINER-NAME="BswMEcuMWakeupSource"          TYPE='BSWM_ECUM_WAKEUP_SOURCE'           RULE-ARRAY-NAME='BswM_GaaEcuMCurrentWakeup'        RULE-VARIABLE='ddState'              FILE-INCLUSION="EcuM.h" PRE-COMPILE_OPTION='EcuMEnabled' >
      <STRUCTURE NAME='BswM_GaaEcuMWakeupIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaEcuMWakeupIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEcuMWakeupIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS) || (BSWM_VALID == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaEcuMWakeupIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaEcuMCurrentWakeup[LucId].ddState = BswM_GaaEcuMWakeupIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaEcuMCurrentWakeup[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS) || (BSWM_INVALID == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS))
      BswM_GaaEcuMCurrentWakeup[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_ECUM_WAKEUP_SOURCE_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_EcuMCurrentWakeupType, BSWM_VAR_CLEARED) BswM_GaaEcuMCurrentWakeup[BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_EcuMCurrentWakeupType, BSWM_VAR_CLEARED) BswM_GaaEcuMCurrentWakeup[BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='EcuMWakeupSource' DEST-PARAM='EcuMWakeupSourceId' STRUCTURE-ELEMENT='ddEcuMWakeupSourceId' >BswMEcuMWakeupSrcRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_EthSM_CurrentState" CONTAINER-NAME="EthSMIndication" TYPE='BSWM_ETHSM_INDICATION' RULE-ARRAY-NAME='BswM_GaaEthSMCurrentState' RULE-VARIABLE='ddCurrentState' FILE-INCLUSION="EthSM.h" PRE-COMPILE_OPTION='EthSMEnabled' >
      <STRUCTURE NAME='BswM_GaaEthSMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaEthSMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaEthSMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
    
    #if ((BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_ETHSM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaEthSMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaEthSMCurrentState[LucId].ddCurrentState = BswM_GaaEthSMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaEthSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_ETHSM_INDICATION_INIT_STATUS))
      BswM_GaaEthSMCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_ETHSM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_EthSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaEthSMCurrentState[BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_EthSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaEthSMCurrentState[BSWM_TOTAL_PORTS_OF_ETHSM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId'>EthSMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_FrSM_CurrentState" CONTAINER-NAME="FrSMIndication" TYPE='BSWM_FRSM_INDICATION' RULE-ARRAY-NAME='BswM_GaaFrSMCurrentState' RULE-VARIABLE='ddCurrentState' FILE-INCLUSION="FrSm.h" PRE-COMPILE_OPTION='FrSMEnabled' >
      <STRUCTURE NAME='BswM_GaaFrSMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_FRSM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaFrSMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaFrSMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_FRSM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaFrSMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaFrSMCurrentState[LucId].ddCurrentState = BswM_GaaFrSMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaFrSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_FRSM_INDICATION_INIT_STATUS))
      BswM_GaaFrSMCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_FRSM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_FrSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaFrSMCurrentState[BSWM_TOTAL_PORTS_OF_FRSM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_FrSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaFrSMCurrentState[BSWM_TOTAL_PORTS_OF_FRSM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId'>FrSMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_RequestMode" CONTAINER-NAME="BswMGenericRequest" TYPE='BSWM_GENERIC_REQUEST' RULE-ARRAY-NAME='BswM_GaaGenericCurrentState' RULE-VARIABLE='ddRequestedState' RULE-VARIABLE-PREFIX='(BswM_ModeType)' FILE-INCLUSION="" PRE-COMPILE_OPTION='GenericRequestEnabled' >
      <STRUCTURE NAME='BswM_GaaGenericRequestProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaGenericRequestProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaGenericRequestProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS) || (BSWM_VALID == BSWM_GENERIC_REQUEST_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaGenericRequestProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaGenericCurrentState[LucId].ddRequestedState = BswM_GaaGenericRequestProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaGenericCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS) || (BSWM_INVALID == BSWM_GENERIC_REQUEST_INIT_STATUS))
      BswM_GaaGenericCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_GENERIC_REQUEST_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_GenericRequestModeType, BSWM_VAR_CLEARED) BswM_GaaGenericCurrentState[BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_GenericRequestModeType, BSWM_VAR_CLEARED) BswM_GaaGenericCurrentState[BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' STRUCTURE-ELEMENT='usModeRequesterId'>ModeRequesterId</PARAMETER>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' STRUCTURE-ELEMENT='usRequestedModeMax'>RequestedModeMax</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_LinSM_CurrentState" CONTAINER-NAME="LinSMIndication" TYPE='BSWM_LINSM_INDICATION' RULE-ARRAY-NAME='BswM_GaaLinSMCurrentState' RULE-VARIABLE='ddCurrentState' FILE-INCLUSION="LinSM.h" PRE-COMPILE_OPTION='LinSMEnabled' >
      <STRUCTURE NAME='BswM_GaaLinSMIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LINSM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaLinSMIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinSMIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_LINSM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaLinSMIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaLinSMCurrentState[LucId].ddCurrentState = BswM_GaaLinSMIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaLinSMCurrentState[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_LINSM_INDICATION_INIT_STATUS))
      BswM_GaaLinSMCurrentState[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_LINSM_INDICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_LinSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaLinSMCurrentState[BSWM_TOTAL_PORTS_OF_LINSM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_LinSMCurrentStateType, BSWM_VAR_CLEARED) BswM_GaaLinSMCurrentState[BSWM_TOTAL_PORTS_OF_LINSM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT='ddNetworkId'>LinSMChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_LinSM_CurrentSchedule" CONTAINER-NAME="LinScheduleIndication" TYPE='BSWM_LIN_SCHEDULE_INDICATION' FILE-INCLUSION="LinSM.h" PRE-COMPILE_OPTION='LinSMEnabled' >
      <STRUCTURE NAME='BswM_GaaLinScheduleIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LIN_SCHEDULE_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaLinScheduleIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinScheduleIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
  }
      </INIT-CODE-SNIPPET>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel'  DEST-PARAM='ComMChannelId'  STRUCTURE-ELEMENT='ddNetworkId'>LinSMChannelRef</PARAMETER>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='LinSMSchedule'  DEST-PARAM='LinSMScheduleIndex'  STRUCTURE-ELEMENT='ucScheduleId'>LinScheduleRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_LinTp_RequestMode" CONTAINER-NAME="LinTpModeRequest" TYPE='BSWM_LINTP_MODE_REQUEST' RULE-ARRAY-NAME='BswM_GaaLinTpRequestMode' RULE-VARIABLE='ddLinTpRequestedMode' FILE-INCLUSION="LinIf.h" PRE-COMPILE_OPTION='LinTpEnabled' >
      <STRUCTURE NAME='BswM_GaaLinTpModeRequestProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaLinTpModeRequestProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaLinTpModeRequestProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS) || ( BSWM_VALID == BSWM_LINTP_MODE_REQUEST_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaLinTpModeRequestProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaLinTpRequestMode[LucId].ddLinTpRequestedMode = BswM_GaaLinTpModeRequestProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaLinTpRequestMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS) || (BSWM_INVALID == BSWM_LINTP_MODE_REQUEST_INIT_STATUS))
      BswM_GaaLinTpRequestMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_LINTP_MODE_REQUEST_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_LinTpRequestModeType, BSWM_VAR_CLEARED) BswM_GaaLinTpRequestMode[BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_LinTpRequestModeType, BSWM_VAR_CLEARED) BswM_GaaLinTpRequestMode[BSWM_TOTAL_PORTS_OF_LINTP_MODE_REQUEST];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='LinIfChannel' DEST-PARAM='LinIfChannelId' STRUCTURE-ELEMENT='ddNetworkId'>LinTpChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_NvM_CurrentBlockMode" CONTAINER-NAME="NvMRequest" TYPE='BSWM_NVM_CURRENT_BLOCK_MODE' RULE-ARRAY-NAME='BswM_GaaNvMCurrentBlockMode' RULE-VARIABLE='ddCurrentBlockMode'   FILE-INCLUSION="NvM.h" PRE-COMPILE_OPTION='NvMEnabled' >
      <STRUCTURE NAME='BswM_GaaNvMBlockModeIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaNvMBlockModeIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaNvMBlockModeIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS) || (BSWM_VALID == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaNvMBlockModeIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaNvMCurrentBlockMode[LucId].ddCurrentBlockMode = BswM_GaaNvMBlockModeIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaNvMCurrentBlockMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS) || (BSWM_INVALID == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS))
      BswM_GaaNvMCurrentBlockMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_BLOCK_MODE_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_NvMCurrentBlockModeType, BSWM_VAR_CLEARED) BswM_GaaNvMCurrentBlockMode[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_NvMCurrentBlockModeType, BSWM_VAR_CLEARED) BswM_GaaNvMCurrentBlockMode[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_BLOCK_MODE];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='R' PREFIX='' POSTFIX='' DEST-CONT='NvMBlockDescriptor' DEST-PARAM='NvMNvramBlockIdentifier' STRUCTURE-ELEMENT='ddBlockId'>NvMBlockRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_NvM_CurrentJobMode" CONTAINER-NAME="NvMJobModeIndication" TYPE='BSWM_NVM_CURRENT_JOB_MODE' RULE-ARRAY-NAME='BswM_GaaNvMCurrentJobMode' RULE-VARIABLE='ddCurrentJobMode' FILE-INCLUSION="NvM.h" PRE-COMPILE_OPTION='NvMEnabled' >
      <STRUCTURE NAME='BswM_GaaNvMJobModeIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaNvMJobModeIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaNvMJobModeIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS) || (BSWM_VALID == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaNvMJobModeIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaNvMCurrentJobMode[LucId].ddCurrentJobMode = BswM_GaaNvMJobModeIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaNvMCurrentJobMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS) || (BSWM_INVALID == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS))
      BswM_GaaNvMCurrentJobMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_NVM_CURRENT_JOB_MODE_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_NvMCurrentJobModeType, BSWM_VAR_CLEARED) BswM_GaaNvMCurrentJobMode[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_NvMCurrentJobModeType, BSWM_VAR_CLEARED) BswM_GaaNvMCurrentJobMode[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='P' PREFIX='' POSTFIX='' STRUCTURE-ELEMENT='ucServiceId'>NvmService</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_WdgM_RequestPartitionReset" CONTAINER-NAME="WdgMRequestPartitionReset" TYPE='BSWM_WDGM_REQUEST_PARTITION_RESET' FILE-INCLUSION="WdgM.h" PRE-COMPILE_OPTION='WdgMMEnabled'>
      <STRUCTURE NAME='BswM_GaaWdgMPartitionResetProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_WDGM_REQUEST_PARTITION_RESET; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaWdgMPartitionResetProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaWdgMPartitionResetProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
  }
      </INIT-CODE-SNIPPET>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='S' PREFIX='' POSTFIX='' DEST-CONT='OsApplication' DEST-PARAM='ShortName' STRUCTURE-ELEMENT='ddApplication' >WdgMRequestPartitionResetRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="SchM_Mode_$bsnp$_$vi$_$ai$_$name$(&amp;BswM_GaaBswModeNotification[LucId].ddCurrentMode)" CONTAINER-NAME="BswModeNotification" TYPE='BSWM_BSW_MODE_NOTIFICATION' RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" RULE-ARRAY-NAME='BswM_GaaBswModeNotification' RULE-VARIABLE='ddCurrentMode' RULE-VARIABLE-PREFIX='(BswM_ModeDeclarationType)' FILE-INCLUSION="SchM_BswM.h" API-TYPE='SchMApi' PRE-COMPILE_OPTION='SchMEnabled' >
      <STRUCTURE NAME='BswM_GaaBswModeNotificationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaBswModeNotificationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaBswModeNotificationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
    
    #if ((BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS) || (BSWM_VALID == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaBswModeNotificationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaBswModeNotification[LucId].ddCurrentMode = BswM_GaaBswModeNotificationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaBswModeNotification[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS))
      BswM_GaaBswModeNotification[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_BSW_MODE_NOTIFICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_BswModeNotificationType, BSWM_VAR_CLEARED) BswM_GaaBswModeNotification[BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_BswModeNotificationType, BSWM_VAR_CLEARED) BswM_GaaBswModeNotification[BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='F' PREFIX='' POSTFIX='' INFO-KEY='PrvModeGrp' RESOLVE-KEYS='bsnp:vi:ai:name' DEST-RTE-CONT='MODE-DECLARATION-GROUP-PROTOTYPE' DEST-CONT='' DEST-PARAM='' IN-API-CALL='Ignore' RTE-DESTINATION="Software Component Description" >BswMBswModeDeclarationGroupPrototypeRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="Rte_Mode_$Notification_Port_Name$_currentMode(&amp;BswM_GaaSwcModeNotification[LucId].ddCurrentMode)" CONTAINER-NAME="SwcModeNotification" TYPE='BSWM_SWC_MODE_NOTIFICATION' RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" RULE-ARRAY-NAME='BswM_GaaSwcModeNotification' RULE-VARIABLE='ddCurrentMode' RULE-VARIABLE-PREFIX='(BswM_ModeDeclarationType)' FILE-INCLUSION="Rte.h" API-TYPE='RteApi'>
      <STRUCTURE NAME='BswM_GaaSwcModeNotificationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaSwcModeNotificationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaSwcModeNotificationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
    
    #if ((BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS) || (BSWM_VALID == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaSwcModeNotificationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaSwcModeNotification[LucId].ddCurrentMode = BswM_GaaSwcModeNotificationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaSwcModeNotification[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS))
      BswM_GaaSwcModeNotification[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_SWC_MODE_NOTIFICATION_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_SwcModeNotificationType, BSWM_VAR_CLEARED) BswM_GaaSwcModeNotification[BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_SwcModeNotificationType, BSWM_VAR_CLEARED) BswM_GaaSwcModeNotification[BSWM_TOTAL_PORTS_OF_SWC_MODE_NOTIFICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='F' PREFIX='' POSTFIX='' INFO-KEY='PrvModeGrp' RESOLVE-KEYS='Notification_Mode_Type:Notification_Mode_Name' DEST-RTE-CONT='MODE-DECLARATION-GROUP-PROTOTYPE' DEST-CONT='' DEST-PARAM='' IN-API-CALL='Ignore' RTE-DESTINATION="Software Component Description" >SwcModeNotificationModeDeclarationGroupPrototypeRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="Rte_Read_$Requested_Port_Name$_requestedMode(&amp;BswM_GaaSwcModeRequest[LucId].ddRequestedMode)" CONTAINER-NAME="SwcModeRequest" TYPE='BSWM_SWC_MODE_REQUEST' RETURN-TYPE="Std_ReturnType" RETURN="LddReturnValue" RULE-ARRAY-NAME='BswM_GaaSwcModeRequest' RULE-VARIABLE='ddRequestedMode' RULE-VARIABLE-PREFIX='(BswM_ModeDeclarationType)' FILE-INCLUSION="Rte.h" API-TYPE='RteApi'>
      <STRUCTURE NAME='BswM_GaaSwcModeRequestProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaSwcModeRequestProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaSwcModeRequestProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }
    
    #if ((BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS) || (BSWM_VALID == BSWM_SWC_MODE_REQUEST_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaSwcModeRequestProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaSwcModeRequest[LucId].ddRequestedMode = BswM_GaaSwcModeRequestProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaSwcModeRequest[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS) || (BSWM_INVALID == BSWM_SWC_MODE_REQUEST_INIT_STATUS))
      BswM_GaaSwcModeRequest[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_SWC_MODE_REQUEST_INIT_STATUS)
    }
    #endif
  }
  </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_SwcModeRequestType, BSWM_VAR_CLEARED) BswM_GaaSwcModeRequest[BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_SwcModeRequestType, BSWM_VAR_CLEARED) BswM_GaaSwcModeRequest[BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_J1939DcmBroadcastStatus" CONTAINER-NAME="J1939DcmBroadcastStatus" TYPE='BSWM_J1939DCM_BROADCAST_STATUS' RULE-ARRAY-NAME='BswM_GaaJ1939CurrentDcmStatus' RULE-VARIABLE='ddCurrentMode' FILE-INCLUSION="J1939Dcm.h" PRE-COMPILE_OPTION='J1939DcmEnabled' >
      <STRUCTURE NAME='BswM_GaaJ1939DcmBroadcastStatusProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS) || (BSWM_VALID == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaJ1939CurrentDcmStatus[LucId].ddCurrentMode = BswM_GaaJ1939DcmBroadcastStatusProperty[LucId].ucModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaJ1939CurrentDcmStatus[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS) || (BSWM_INVALID == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS))
      BswM_GaaJ1939CurrentDcmStatus[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_J1939DCM_BROADCAST_STATUS_INIT_STATUS)
    }
    #endif
  }
      </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_J1939CurrentDcmModeType, BSWM_VAR_CLEARED) BswM_GaaJ1939CurrentDcmStatus[BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_J1939CurrentDcmModeType, BSWM_VAR_CLEARED) BswM_GaaJ1939CurrentDcmStatus[BSWM_TOTAL_PORTS_OF_J1939DCM_BROADCAST_STATUS];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT=''>J1939DcmChannelRef</PARAMETER>
      </PARAMETERS>
    </API>
    <API API-NAME="BswM_J1939Nm_StateChangeNotification" CONTAINER-NAME="J1939NmIndication" TYPE='BSWM_J1939NM_INDICATION' RULE-ARRAY-NAME='BswM_GaaJ1939CurrentNmMode' RULE-VARIABLE='ddCurrentMode' FILE-INCLUSION="J1939Nm.h" PRE-COMPILE_OPTION='J1939NmEnabled' >
      <STRUCTURE NAME='BswM_GaaJ1939NmIndicationProperty'></STRUCTURE>
      <INIT-CODE-SNIPPET>
  for (LucId = BSWM_ZERO; LucId &lt; BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION; LucId++)
  {
    /* Initialize previous evaluation result of a rule */
    LpRuleId = BswM_GaaJ1939NmIndicationProperty[LucId].pRuleId;
    for (LddId = BSWM_ZERO; LddId &lt; BswM_GaaJ1939NmIndicationProperty[LucId].ddTotalRules; LddId++)
    {
      BswM_InitializeRulePreviousResult(LpRuleId[LddId]);
    }

    #if ((BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS) || (BSWM_VALID == BSWM_J1939NM_INDICATION_INIT_STATUS))
    #if (BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS)
    if (BSWM_VALID == BswM_GaaJ1939NmIndicationProperty[LucId].blModeInitValueStatus)
    {
    #endif
      /* Update Current State with configured initial value */
      BswM_GaaJ1939CurrentNmMode[LucId].ddCurrentMode = BswM_GaaJ1939NmIndicationProperty[LucId].ddModeInitValue;
      
      /* Update Current State status as VALID */
      BswM_GaaJ1939CurrentNmMode[LucId].blModeValueStatus = BSWM_VALID;
      
    #if (BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS)
    }
    else
    #endif
    #endif
    #if (BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS)
    {
    #endif
      #if ((BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS) || (BSWM_INVALID == BSWM_J1939NM_INDICATION_INIT_STATUS))
      BswM_GaaJ1939CurrentNmMode[LucId].blModeValueStatus = BSWM_INVALID;
      #endif
    #if (BSWM_MIXED == BSWM_J1939NM_INDICATION_INIT_STATUS)
    }
    #endif
  }
      </INIT-CODE-SNIPPET>
      <RAM-DECLARATION>
extern VAR(BswM_J1939CurrentNmModeType, BSWM_VAR_CLEARED) BswM_GaaJ1939CurrentNmMode[BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION];
      </RAM-DECLARATION>
      <RAM-DEFINITION>
VAR(BswM_J1939CurrentNmModeType, BSWM_VAR_CLEARED) BswM_GaaJ1939CurrentNmMode[BSWM_TOTAL_PORTS_OF_J1939NM_INDICATION];
      </RAM-DEFINITION>
      <API-DEFINITION></API-DEFINITION>
      <API-DECLARATION></API-DECLARATION>
      <PARAMETERS>
        <PARAMETER TYPE='' PREFIX='' POSTFIX='' DEST-CONT='ComMChannel' DEST-PARAM='ComMChannelId' STRUCTURE-ELEMENT=''>J1939NmChannelRef</PARAMETER>
        <PARAMETER TYPE='' PREFIX='' POSTFIX='' DEST-CONT='J1939NmNode' DEST-PARAM='J1939NmNodeId' STRUCTURE-ELEMENT=''>J1939NmNodeRef</PARAMETER>
      </PARAMETERS>
    </API>
  </MODE-REQUEST-PORT>

  <!-- Init function API frame work -->
  <INIT-FUNCTION-FORMAT>
/*******************************************************************************
** Function Name        : BswM_Init                                           **
**                                                                            **
** Service ID           : 0x00                                                **
**                                                                            **
** Description          : This Service Initializes the BSW Mode Manager       **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : None                                                **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : The Bsw Mode manager must be initialized.           **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          BswM_GblInitStatus                                **
**                                                                            **
**                        Function(s) invoked :                               **
**                          Det_ReportError                                   **
*******************************************************************************/
FUNC(void, BSWM_CODE) BswM_Init
 (P2CONST(BswM_ConfigType, AUTOMATIC, BSWM_APPL_CONST) ConfigPtr)
{
  /* Definition of local variable */
  uint8 LucId;
  BswM_RuleIdType LddId;
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONST) LpRuleId;

  BSWM_UNUSED_PTR(ConfigPtr);
  
$InitCodeSnippet$

  /* Set the variable BswM_GblInitStatus to indicate BswM is initialized */
  BswM_GblInitStatus = BSWM_INITIALIZED;
}
</INIT-FUNCTION-FORMAT>

  <TRIGGER-SLAVE-RTE-START-FUNCTION>
/*******************************************************************************
** Function Name        : BswM_TriggerStartUpPhase2                           **
**                                                                            **
** Service ID           : 0x12                                                **
**                                                                            **
** Description          : This function shall call ActivateTask which starts  **
**                        RTE on the slave core.                              **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : CoreID                                              **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : Std_ReturnType                                      **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                          None                                              **
**                                                                            **
**                        Function(s) invoked :                               **
**                          ActivateTask                                      **
*******************************************************************************/
FUNC(Std_ReturnType, BSWM_CODE) BswM_TriggerStartUpPhase2 (CoreIdType CoreID)
{
  StatusType LddResult;
  Std_ReturnType LddReturnValue;
  uint8 LucIndex; 

  /* Set return value with E_OK */
  LddReturnValue = E_OK;

  for(LucIndex = BSWM_ZERO; LucIndex &lt; BSWM_NO_OF_START_SLAVE_CORES; LucIndex++)
  {
    if (BswM_GaaStartSlaveCores[LucIndex].ddCoreId == CoreID)
    {
      LddResult = ActivateTask(BswM_GaaStartSlaveCores[LucIndex].ddTask);
      if (LddResult != E_OK)
      {
        LddReturnValue = (Std_ReturnType)LddResult;
      }
      LucIndex = BSWM_NO_OF_START_SLAVE_CORES;
    }
  }
  return (LddReturnValue);
}
</TRIGGER-SLAVE-RTE-START-FUNCTION>

  <TRIGGER-SLAVE-RTE-STOP-FUNCTION>
/*******************************************************************************
** Function Name        : BswM_TriggerSlaveRTEStop                            **
**                                                                            **
** Service ID           : 0x13                                                **
**                                                                            **
** Description          : This function shall call ActivateTask which stops   **
**                        RTE on the slave core.                              **
**                                                                            **
** Reentrancy           : Non Reentrant                                       **
**                                                                            **
** Input Parameters     : CoreID                                              **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : Std_ReturnType                                      **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s)  :                               **
**                        None                                                **
**                                                                            **
**                        Function(s) invoked :                               **
**                        ActivateTask                                        **
*******************************************************************************/
FUNC(Std_ReturnType, BSWM_CODE) BswM_TriggerSlaveRTEStop (CoreIdType CoreID)
{
  StatusType LddResult;
  Std_ReturnType LddReturnValue;
  uint8 LucIndex;

  /* Set return value with E_OK */
  LddReturnValue = E_OK;

  for(LucIndex = BSWM_ZERO; LucIndex &lt; BSWM_NO_OF_STOP_SLAVE_CORES; LucIndex++)
  {
    if (BswM_GaaStopSlaveCores[LucIndex].ddCoreId == CoreID)
    {
      LddResult = ActivateTask(BswM_GaaStopSlaveCores[LucIndex].ddTask);
      if (LddResult != E_OK)
      {
        LddReturnValue = (Std_ReturnType)LddResult;
      }
      LucIndex = BSWM_NO_OF_STOP_SLAVE_CORES;
    }
  }
  return (LddReturnValue);
}

</TRIGGER-SLAVE-RTE-STOP-FUNCTION>
  
  <!-- Enumeration operator and its matching replacement operator -->
  <ENUM-OPERATORS>
    <ENUM-OPERATOR NAME='BSWM_EQUALS'     OPERATOR='=='></ENUM-OPERATOR>
    <ENUM-OPERATOR NAME='BSWM_EQUALS_NOT' OPERATOR='!='></ENUM-OPERATOR>
    <ENUM-OPERATOR NAME='BSWM_AND'        OPERATOR='&amp;&amp;'></ENUM-OPERATOR>
    <ENUM-OPERATOR NAME='BSWM_NAND'       OPERATOR='&amp;&amp;'></ENUM-OPERATOR>
    <ENUM-OPERATOR NAME='BSWM_OR'         OPERATOR='||'></ENUM-OPERATOR>
    <ENUM-OPERATOR NAME='BSWM_XOR'        OPERATOR='^'></ENUM-OPERATOR>
  </ENUM-OPERATORS>

  <!-- Config type structure -->
  <CONFIG-TYPE-STRUCTURE NAME='BswM_GaaConfig' ></CONFIG-TYPE-STRUCTURE>

  <!-- Recursion count is the total number of times loops to exectute to resolve
  a logical expression -->
  <RECURSION-COUNT>30</RECURSION-COUNT>
  
  <!-- Explicit Rule Order List -->
  <RULE-ORDERS>
    <RULE-ORDER>ComModeNotification ComControl</RULE-ORDER>
    <RULE-ORDER>ENABLE_TX_NM ENABLE_TX_NORM</RULE-ORDER>
    <RULE-ORDER>ENABLE_NM ENABLE_TX</RULE-ORDER>
    <RULE-ORDER>ENABLE_RX DISABLE_DM</RULE-ORDER>
  </RULE-ORDERS>
  
  <!-- Explicit ModeRequestSource Order List -->
  <MODE-REQUEST-SOURCE-ORDERS>
    <MODE-REQUEST-SOURCE-ORDER>SwcModeRequest BswModeNotification SwcModeNotification</MODE-REQUEST-SOURCE-ORDER>
  </MODE-REQUEST-SOURCE-ORDERS>
</GENERAL-INFORMATION>

<!--
################################################################################
#                               Revision History                               #
################################################################################
# Revision   Date          By            Description                           #
################################################################################
# 2.5.3      14-Dec-2016   Sanghoon Bae  Redmine #5981, #5980, #6245 #6801     #
# 2.5.2      22-Jul-2016   Sanghoon Bae  Redmine #5381, #5569, #5583, #5638    #
# 2.5.1      06-Jun-2016   Daejun Park   Redmine #5225                         #
# 2.5.0      28-May-2016   Sanghoon Bae  Redmine #4856, #4591, #4950           #
#                          Daejun Park                                         #
# 2.4.3      29-Apr-2016   Sanghoon Bae  Template version and Supported Tool   #
#                          Daejun Park    Version are updated.                 #
#                                        Redmine #4714, #4201                  #
# 2.4.2      23-Dec-2015   Daejun Park   Template version and Supported Tool   #
#                                         Version are updated.                 #
#                                        Redmine #3584                         #
#                                        -Add mandatory parameter              #
# 2.4.1      12-Nov-2015   Daejun Park   Template version and Supported Tool   #
#                                         Version are updated.                 #
#                                        Redmine #3471                         #
#                                        -Fix variable memory section          #
# 2.4.0      17-Sep-2015   Daejun Park   Template version and Supported Tool   #
#                                         Version are updated.                 #
#                                        Redmine #3164                         #
#                                        -Use SwcBswMapping                    #
#                                        Redmine #2720                         #
#                                        -Remove Non-standard APIs             #
# 2.3.1      21-Aug-2015   Daejun Park   -Template version and Supported Tool  #
#                                         Version are updated.                 #
#            04-Jun-2015   Daejun Park   Redmine #2674                         #
#                                        -Improvement for CoreId verification  #
#            22-May-2015   Daejun Park   Redmine #2645                         #
#                                        -Fix for MISRA-C violation            #
# 2.3.0      07-May-2015   Daejun Park   Redmine #2551                         #
#                                        -Fix for GenericRequest               #
#            30-Apr-2015   Daejun Park   Redmine #2535                         #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
#                                        -Add parameter for LinScheduleInd     #
# 2.2.1      26-Dec-2014   Daejun Park   Redmine #657, #1879, #1883, #2099     #
#                                        -SUPPORTED-TOOL-VERSIONS and          #
#                                         TEMPLATE-VERSION are updated.        #
#                                        -Support SwcModeRequest               #
#                                        -Update SWC Map name.                 #
# 2.2.0      26-Nov-2014   Daejun Park   Redmine #1388, #1389, #1411, #1443,   #
#                                        #1458                                 #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
# 2.1.0      24-Sep-2014   Daejun Park   Redmine #1214, #1304, #1335, #1336,   #
#                                        #1337, #1355                          #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
# 2.0.2      13-Jun-2014   Daejun Park   -Template version and Supported Tool  #
#                                         Version are updated.                 #
#                                        -Update PmUserId                      #
# 2.0.1      24-Apr-2014   Daejun Park   Template version and Supported Tool   #
#                                        Version are updated.                  #
# 1.1.3      16-Apr-2014   Daejun Park   Add multicore feature                 #
#                                        for BswM_SlaveCoreInfoType            #
# 1.1.1      11-Mar-2014   Daejun Park   -Template version and Supported Tool  #
#                                         Version are updated.                 #
# 1.1.0      10-Mar-2014   Daejun Park   -Template version and Supported Tool  #
#                                         Version are updated.                 #
# 1.0.15     08-Jan-2014   Daejun Park   CR~209, XAR~780                       #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
# 1.0.14     07-Jan-2014   Daejun Park   CR~209, XAR~780                       #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
#                                        -Remove DcmApplicationUpdatedType     #
#                                        -Modify indendation                   #
# 1.0.13     27-Dec-2013   Daejun Park   CR~209, XAR~780 : Validation          #
#                                        -Template version and Supported Tool  #
#                                         Version are updated.                 #
#                                        -Support BswM_Dcm_ApplicationUpdated  #
# 1.0.12     13-Dec-2013   Daejun Park   CR~209, XAR~780 : Dem                 #
#                                        Separate BswM_Dem_Cfg.h for Dem event #
# 1.0.11     07-Nov-2013   Daejun Park   CR~182, XAR~662                       #
#                                        -BswM_SetIpduDmGroup added            #
#                                        -Generate code only when configured   #
# 1.0.10     31-Oct-2013   Daejun Park   CR~182, XAR~662                       #
#                                        -Mode switch event modified           #
# 1.0.9      04-Jul-2013   Daejun Park   CR~129, XAR~581 : Dem event           #
#                                        -Modify macros for Dem event          #
# 1.0.0      03-Mar-2013   Daejun Park   Initial version                       #
################################################################################
-->
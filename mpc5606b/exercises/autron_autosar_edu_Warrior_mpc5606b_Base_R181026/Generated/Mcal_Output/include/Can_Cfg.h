/**
*   @file    Can_Cfg.h
*   @version 1.0.1
*
*   @brief   AUTOSAR Can - module interface
*   @details Configuration settings generated by user settings.
*
*   @addtogroup CAN_DRIVER
*   @{
*/
/*==================================================================================================
*   Project              : AUTOSAR 4.0 MCAL
*   Platform             : PA
*   Peripheral           : FLEXCAN
*   Dependencies         : 
*
*   Autosar Version      : 4.0.3
*   Autosar Revision     : ASR_REL_4_0_REV_0003
*   Autosar Conf.Variant :
*   SW Version           : 1.0.1
*   Build Version        : MPC560xB_MCAL_1_0_1_RTM_ASR_REL_4_0_REV_0003_20140606
*
*   (c) Copyright 2006-2014 Freescale Semiconductor Inc and STMicroelectronics
*   All Rights Reserved.
==================================================================================================*/
/*==================================================================================================
==================================================================================================*/
/*
@brief   (CAN023) The consistency of the configuration must be checked by the configuration tool(s).
@brief   (CAN022) The code configurator of the Can module is CAN controller specific.
         If the CAN controller is sited on-chip, the code generation tool for the Can module is Controller specific.
         If the CAN controller is an external device the generation tool must not be Controller specific.
@brief   (CAN024) The valid values that can be configured are hardware dependent.
         Therefore the rules and constraints can't be given in the standard.
         The configuration tool is responsible to do a static configuration checking, also regarding dependencies between modules (i.e. Port driver, MCU driver etc.)
*/
/*
* @file    Can_Cfg.h
* @implements DCAN02001, DCAN02606, DCAN02603
*/

#ifndef CAN_CFG_H
#define CAN_CFG_H

#ifdef __cplusplus
extern "C"{
#endif

/**
* @page misra_violations MISRA-C:2004 violations
*
* @section Can_Cfg_h_REF_1
* Violates MISRA 2004 Required Rule 19.15, Repeated include file MemMap.h
* There are different kinds of execution code sections.
*
* @section Can_Cfg_h_REF_2
* Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.
* This violation is because many controllers have defined Interrupt handlers with only 1 macro.
*
* @section Can_Cfg_h_REF_3
* Violates MISRA 2004 Required Rule 1.4, Identifier clash, Identifier clash
* This violation is due to the requirement that request to have a file version check.
*
* @section Can_Cfg_h_REF_4
* Violates MISRA 2004 Required Rule 19.4, C macros shall only expand to a braced initialiser, a constant, a
* parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
*
* @section Can_Cfg_h_REF_5
* Violates MISRA 2004 Required Rule 5.1, Identifiers (internal and external) shall not rely on the
* significance of more than 31 characters.
*
* @section Can_Cfg_h_REF_6
* Violates MISRA 2004 Required Rule 19.4, C macros shall only expand to a braced initialiser, a constant, a
* parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
*
* @section Can_Cfg_h_REF_7
* Violates MISRA 2004 Required Rule 5.1, Identifiers (internal and external) shall not rely on the
* significance of more than 31 characters.
*/
/*==================================================================================================
*                                        INCLUDE FILES
* 1) system and project includes
* 2) needed interfaces from external units
* 3) internal and external interfaces from this unit
==================================================================================================*/
/* @violates @ref Can_Cfg_h_REF_1 Violates MISRA 2004 Required Rule 19.15, Repeated include file MemMap.h*/
#include "Std_Types.h"
#include "Soc_Ips.h"
#include "Mcal.h"

/*==================================================================================================
*                              SOURCE FILE VERSION INFORMATION
==================================================================================================*/
/*
* @file           Can_Cfg.h
* @implements     DCAN02604
*/
#define CAN_VENDOR_ID_CFG                       43
#define CAN_MODULE_ID_CFG                       80
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CAN_AR_RELEASE_MAJOR_VERSION_CFG_H      4
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CAN_AR_RELEASE_MINOR_VERSION_CFG_H      0
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CAN_AR_RELEASE_REVISION_VERSION_CFG_H   3
#define CAN_SW_MAJOR_VERSION_CFG_H              1
#define CAN_SW_MINOR_VERSION_CFG_H              0
#define CAN_SW_PATCH_VERSION_CFG_H              1




/*==================================================================================================
*                                          CONSTANTS
==================================================================================================*/
/**
* @brief          Implicit index value used by Full can hardware objects.
* @details        Implicit index value used by Full can hardware objects.
*/
#define CAN_MAXMASKCOUNT    65535U
/**
* @brief          Can Controllers. Defines for conversion between object names and object IDs.
* @details        Can Controllers. Defines for conversion between object names and object IDs.
                  (PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_Cfg.h file
*
* @implements     DCAN02607
*/
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
#define CanConf_CanController_ECU1_Project ((uint8)0U)  /* Default configuration for FlexCAN_B */
        

/**
* @brief          Can Controller Configurations.
* @details        Can Controller Configurations.
                  (PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_Cfg.h file.
*
* @implements     DCAN02608
*/
#define ECU1_Project_config (0U)  /* Default configuration for CanController ID=0, FlexCAN_B */
        

/**
* @brief          Can Hardware Objects.
* @details        Can Hardware Objects.
                  (PR-MCAL-2944)Numeric ID's in configuration and definition of symbolic names in Can_Cfg.h file.
*
* @implements     DCAN02609
*/




/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x7df_GST_Msg_TP_Func (7U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x707_GST_Msg_TP2 (6U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x706_GST_Msg_TP1 (5U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x703_GST_Msg_TP_Phys (4U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x503_ECU2_Msg_P1 (3U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x301_ECU2_Msg_PIF1 (2U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x103_ECU2_Msg_POE1 (1U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_IN_HwObj_ECU1_Project_0x3_ECU2_Msg_OE1 (0U) /* RECEIVE object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x705_ECU1_GST_Msg_TP (22U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x704_ECU1_Msg_TP2 (21U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x701_ECU1_Msg_TP1 (20U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x602_ECU1_Msg_P4 (19U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x601_ECU1_Msg_P3 (18U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x502_ECU1_Msg_P2 (16U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x501_ECU1_Msg_P1 (15U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x300_ECU1_Msg_PIF1 (14U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x200_ECU1_Msg_IF1 (12U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x102_ECU1_Msg_POE2 (10U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x101_ECU1_Msg_POE1 (9U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x100_ECU1_Msg_POE3 (8U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x55_ECU1_Msg_GW1 (17U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x2_ECU1_Msg_OE2 (13U) /* TRANSMIT object of Can Controller ID = 0 */

/* @violates @ref Can_Cfg_h_REF_3 Violates MISRA 2004 Required Rule 1.4, Identifier clash */
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CanConf_CanHwObj_OUT_HwObj_ECU1_Project_0x1_ECU1_Msg_OE1 (11U) /* TRANSMIT object of Can Controller ID = 0 */


/*
* @brief          Extended identifiers.
* @details        Extended identifiers.
                   - (STD_ON)  - if at least one extended identifier is used.
                   - (STD_OFF) - if no extended identifiers are used at all
                  If no extended identifiers are used then the IDs and MASKs can be stored in uint16 rather than uint32.
*
* @implements     DCAN02610
*/
#define CAN_EXTENDEDID (STD_OFF)

/*
* @brief          Switches the Can_ChangeBaudrate API and Can_CheckBaudRate API ON or OFF.
* @details        (CAN460) Configuration of Can_CheckBaudrate(Controller, Baudrate): If Can supports changing of the
                  baudrate and thus this service, shall be configurable via CAN_CHANGE_BAUDRATE_SUPPORT
*
* @implements     DCAN02903
*/
#define CAN_CHANGE_BAUDRATE_API (STD_OFF)


/*
* @brief          Switches the Development Error Detection and Notification ON or OFF.
* @details        (CAN028) Call the Development Error Tracer when DET is switched on and the Can module detects an error.
                  (CAN082) The detection of development errors is configurable (ON / OFF) at pre- compile time.
                  The switch CanDevErrorDetection (see chapter 10) shall activate or deactivate the detection of all development errors.
*
* @implements     DCAN01403, DCAN01013
*/
#define CAN_DEV_ERROR_DETECT (STD_ON)

/*
* @brief          CAN driver support for wakeup over CAN Bus.
* @details        CAN driver support for wakeup over CAN Bus.
*
* @implements     DCAN02611
*/
#define CAN_WAKEUP_SUPPORT (STD_OFF)

/*
* @brief          Extended number of can hardware objects
* @details        Extended number of can hardware objects:
                   - STD_ON if more than 256 can hardware objects are needed (up to 65536)
                   - STD_OFF if no more than 256 can hardware objects are needed
                  The specification only allows up to 256 can hardware objects. The driver supports a non-standard extension of this limit.
*
* @implements     DCAN02612
*/
#define CAN_MBCOUNTEXTENSION (STD_OFF)

/*
* @brief          Support for version info API
* @details        Switches the Can_GetVersionInfo() API ON or OFF.
*
* @implements     DCAN02051
*/
#define CAN_VERSION_INFO_API (STD_OFF)

/*
* @brief          Support for Multiplexed Transmision
* @details        MB set for Tx is put on bus from any TxMB that is available (free).
*                 (CAN277) The Can module shall allow that the functionality Multiplexed Transmission is statically configurable (ON | OFF) at pre-compile time.
*
* @implements     DCAN01114
*/
#define CAN_MULTIPLEXED_TRANSMISSION (STD_OFF)

/*
* @brief          Support for Transmision Cancellation
* @details        Support for Transmision Cancellation
*                 (CAN278) The Can module shall allow that the functionality Transmit Cancellation is statically configurable (ON | OFF) at pre-compile time.
*
* @implements     DCAN01068
*/
#define CAN_HW_TRANSMIT_CANCELLATION (STD_OFF)

/*
* @brief          Support for Identical Id Cancellation
* @details        Enables/disables cancellation of pending PDUs with identical ID.
*
* @implements     DCAN02050
*/
#define CAN_IDENTICAL_ID_CANCELLATION (STD_OFF)

/*
* @brief          Support for Special MB Abort API
* @details        Enable an additional API, to write an ABORT code (b1001) to the MBCB filed of the MB to abort a message transmission.
*
* @implements     DCAN02613
*/
#define CAN_API_ENABLE_ABORT_MB (STD_OFF)

/*
* @brief          Support for MB Abort  API
* @details         This parameter is enabled only if CanMultiplexedTransmission=STD_ON and aborts only one message buffer
* @implements   DCAN02060
*/
#define Can_Abort_Only_One_MB (STD_OFF)
/*
* @brief          Instance # of the driver - used for Det_ReportError().
* @details        Instance # of the driver - used for Det_ReportError().
*
* @implements     DCAN02614
*/
#define CAN_INSTANCE (0U)

/*
* @brief          Platform support mix of controllers with 64 and 32 MBs.
* @details        Platform support mix of controllers with 64 and 32 MBs.
*
* @implements     DCAN02615
*/
#define CAN_MIX_MB_SUPPORT  (STD_OFF)

/*
@brief    Support for esr read status API
*/
#define CAN_API_ERROR_STATUS  (STD_OFF)
/*
* @brief    Support for checking TX message cancelation
*/
#define CAN_API_TXCANCEL_CHECK  (STD_OFF)

/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
* @implements     DCAN02616
*/

#define CAN_MAXMBCOUNT_0 23U


/*
* @brief          Maximum possible Message Buffers per controller specific to this platform.
* @details        Maximum possible Message Buffers per controller specific to this platform.
*
* @implements     DCAN02617
*/
/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CAN_MAXMB_SUPPORTED (64U)



    
        
        
            
                
                
                
                
                
            
        
    

/*
* @brief          Maximum number of Message Buffers configured.
* @details        Maximum number of Message Buffers configured.
*
* @implements     DCAN02061
*/
#define CAN_MAXMB_CONFIGURED (23U)

/*
* @brief          Maximum possible controllers per specific derivative.
* @details        Maximum possible controllers per specific derivative.
*
* @implements     DCAN02618
*/
#define CAN_MAXCTRL_SUPPORTED (6U)

/**
* @brief          Maximum No. of supported controllers (vary according to Processor Family).
* @details        Maximum No. of supported controllers (vary according to Processor Family).
*
* @implements     DCAN02619
*/

#define CAN_MAXCONTROLLERCOUNT_0 1U


/*
* @brief          Maximum No. of controllers Configured
* @details      Maximum No. of controllers Configured
*
* @implements     DCAN02062
*/

 
#define CAN_MAXCTRL_CONFIGURED (1U)


/**
* @brief          Hardware events detected by an interrupt or by polling
* @details        (CAN099) The hardware events may be detected by an interrupt or by polling status flags of the hardware objects.
*                 The configuration possibilities regarding polling is hardware dependent (i.e. which events can be polled, which events need to be polled), and not restricted by this standard.
*                 (CAN007)It shall be possible to configure the driver such that no interrupts at all are used (complete polling).
*
* @implements     DCAN01116, DCAN01050
*/


/**
* @brief          This macros enable Interrupts for controllers if Tx processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if Tx processing is set to Interrupt Mode.
*
* @implements     DCAN02620
*/

#define CAN_B_TXINT_SUPPORTED  (STD_ON)







/*
* @brief          This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
* @details        This macro enables Can_MainFunction_Write() if at least one controller is set to process Tx in Polling Mode.
*
* @implements     DCAN02621
*/
#define CAN_TXPOLL_SUPPORTED   (STD_OFF)



/**
* @brief          This macros enable Interrupts for controllers if Rx processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if Rx processing is set to Interrupt Mode.
*
* @implements     DCAN02622
*/

#define CAN_B_RXINT_SUPPORTED  (STD_ON)






/*
* @brief          This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
* @details        This macro enables Can_MainFunction_Read() if at least one controller is set to process Rx in Polling Mode.
*
* @implements     DCAN02623
*/
#define CAN_RXPOLL_SUPPORTED   (STD_OFF)



/**
* @brief          This macros enable Interrupts for controllers if BusOff processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if BusOff processing is set to Interrupt Mode.
*
* @implements     DCAN02624
*/

#define CAN_B_BUSOFFINT_SUPPORTED  (STD_ON)







/*
* @brief          This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
* @details        This macro enables Can_MainFunction_BusOff() if at least one controller is set to process BusOff in Polling Mode.
*
* @implements     DCAN02625
*/
#define CAN_BUSOFFPOLL_SUPPORTED   (STD_OFF)


/**
* @brief          This macros enable Interrupts for controllers if Wakeup processing is set to Interrupt Mode.
* @details        This macros enable Interrupts for controllers if Wakeup processing is set to Interrupt Mode.
*
* @implements     DCAN02626
*/

#define CAN_B_WAKEUPINT_SUPPORTED  (STD_ON)







/*
* @brief          This macro enables Can_MainFunction_Wakeup() if at least one controller is set to process WakeUp in Polling Mode.
* @details        This macro enables Can_MainFunction_Wakeup() if at least one controller is set to process WakeUp in Polling Mode.
*
* @implements     DCAN02627
*/
#define CAN_WAKEUPPOLL_SUPPORTED   (STD_OFF)

/*
* @brief          Maximum number of MB Filters configured.
* @details        Maximum number of MB Filters configured.
*
* @implements     DCAN02628
*/
#define CAN_MAXFILTERCOUNT_0 2U


/**
* @brief          Maximum number of baudrate configured.
* @details        Maximum number of baudrate configured.
*                 Controller Baudrates configured are in kbps
*
* @implements     DCAN02008
*/
#define CAN_CFGSET0_BAUDRATE_FC_B_0        500U
#define CAN_CFGSET0_MAX_BAUDRATE_FC_B_0         1U


/*
* @brief          Maximum number of Filters configured for RxFifo.
* @details        Maximum number of Filters configured for RxFifo.
*
* @implements     DCAN02629
*/


/*
* @brief          Support for Rx Fifo
* @details        Support for Rx Fifo - If at least one controller supports RxFifo, then this define is set to STD_ON.
*                 This define is global for the entire hardware unit (all controllers). Every controller has particular
*                 configuration for Rx Fifo (see Can_ControllerConfigType structure).
*
* @implements     DCAN02630
*/
#define CAN_RXFIFO_ENABLE (STD_OFF)

/*
* @brief          Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
* @details        Set if Rx Fifo events (Warning/Overflow/FrameAvailable) are configured on the same int on INTC vector table.
*                 Based on this define separate interrupts handlers or not will be used for the 3 events of the RxFifo.
*
* @implements     DCAN02631
*/
#define CAN_RXFIFO_EVENT_UNIFIED (STD_ON)

/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
* @implements     DCAN02659
*/
#define CAN_ERROR_NOTIFICATION_ENABLE (STD_OFF)



/*
* @brief          Index into the configuration structures.
* @details        Index into the configuration structures.
*
* @implements     DCAN02632
*/
#define CAN_FCB_INDEX       ((uint8)0U)


/*
* @brief          Index into the hardware platform.
* @details        Index into the hardware platform.
*
* @implements     DCAN02633
*/
#define FLEXCAN_B_OFFSET    ((uint8)1U)
/*
* @brief          RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
* @details        RxFifo Functionality enabled/disabled. Used for Interrupts mapping in Can_Irq.c file.
*
* @implements     DCAN02634
*/
#define CAN_B_FIFO_EN       (STD_OFF)

/*
* @brief          Error notification enabled/disabled.
* @details        Enables/Disables the Error Controller Notification. Used for Interrupts mapping in Can_Irq.c file.
*
* @implements     DCAN02658
*/
#define CAN_B_ERROR_NOTIFICATION_ENABLE  (STD_OFF)


#if (CAN_API_ERROR_STATUS == STD_ON)
/*
@brief    Macro used to define the NoAck Error   .
*/
#define CAN_NO_ACK_ERR  ((uint32)0x00U)
#endif

/*
* @brief          Optimization of interrupt service code for size.
* @details        Optimization of interrupt service code for size.
*
* @implements     DCAN02635
*/
#define CAN_ISROPTCODESIZE (STD_OFF)

/*
* @brief          Enable Non-Autosar API for Dual-Clock support.
* @details        Enable Non-Autosar API for Dual-Clock support.
*                 This can be set to STD_ON only if it is activated from Resource file (Can.CanConfig.DualClockMode = STD_ON)
*
* @implements     DCAN02636
*/
#define CAN_DUAL_CLOCK_MODE (STD_OFF)

/*
* @brief          (CAN113_Conf) Specifies the maximum time for blocking function until a timeout is detected. Unit in loops.
* @details        (CAN281) The Can module shall use the free running timer provided by the system service for timeout detection in case the hardware does not react
*                  in the expected time (hardware malfunction) to prevent endless loops.
*
* @implements     DCAN02048, DCAN01076, DCAN02637
*/

#if defined(ERR_IPV_FLEXCAN_0008)
    #if (ERR_IPV_FLEXCAN_0008 == STD_ON)
        #define CAN_TIMEOUT_DURATION 50000U
    #else
        #error: The define ERR_IPV_FLEXCAN_0008 should not be STD_OFF
    #endif
#else
    #define CAN_TIMEOUT_DURATION 20000U
#endif /* ERR_IPV_FLEXCAN_0008 */

/**
* @brief   Switches the Production Error Detection and Notification OFF
*
* @api
*/
/*
* @violates @ref Can_Cfg_h_REF_6 C macros shall only expand to a braced initialiser, a constant, a parenthesised expression 
* @violates @ref Can_Cfg_h_REF_7 Identifiers (internal and external) shall not rely on the significance of more than 31
* characters.
*/
#define CAN_DISABLE_DEM_REPORT_ERROR_STATUS   STD_OFF /* Disable Production Error Detection */


#define CAN_PRECOMPILE_SUPPORT (STD_OFF)



/**
* @brief          Export Can_ConfigType structure.
* @details        Export Can_ConfigType structure. This is the type of the external data structure containing
*                 the overall initialization data for the CAN driver and affecting all controllers.
*
* @implements     DCAN02639
*/

#if (CAN_PRECOMPILE_SUPPORT == STD_OFF)

  /* Export Driver configuration */
  /* @violates @ref Can_Cfg_h_REF_4 C macros shall only expand to a braced initialiser,  a constant, a parenthesised expression */
  #define CAN_INIT_CONFIG_PB_DEFINES \
    extern CONST(Can_ConfigType, CAN_CONST) CanConfigSet; 

#endif



/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN355_Conf) CanMainFunctionBusoffPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Busoff. Unit is seconds.
*
* @implements     DCAN02038
*/
#define CAN_MAINFUNCTION_PERIOD_BUSOFF  (0U)


#if (CAN_RXPOLL_SUPPORTED == STD_ON)
/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN356_Conf) CanMainFunctionReadPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Read. Unit is seconds.
*
* @implements     DCAN02039
*/
#define CAN_MAINFUNCTION_PERIOD_READ    (0.0010U)

#endif /* (CAN_RXPOLL_SUPPORTED == STD_OFF) */


/*
* @brief          Periods for cyclic call of Main function
* @details        (CAN357_Conf) CanMainFunctionWakeupPeriod - This parameter describes the period for cyclic call to Can_MainFunction_Wakeup. Unit is seconds.
*
* @implements     DCAN02040
*/
#define CAN_MAINFUNCTION_PERIOD_WAKEUP  0U


#if (CAN_TXPOLL_SUPPORTED == STD_ON)
/*
* @brief          Periods for cyclic call of Main function Write
* @details        (CAN358_Conf) CanMainFunctionWritePeriod - This parameter describes the period for cyclic call to Can_MainFunction_Write. Unit is seconds.
*
* @implements     DCAN02041
*/
#define CAN_MAINFUNCTION_PERIOD_WRITE    (0.0010U)

#endif /* (CAN_TXPOLL_SUPPORTED == STD_OFF) */

/*
* @brief          Periods for cyclic call of Main function Mode
* @details        (CAN376_Conf) This parameter describes the period for cyclic call to Can_MainFunction_Mode. Unit is seconds.
*
* @implements     DCAN02042
*/
#define CAN_MAINFUNCTION_MODE_PERIOD   (0U)


/*
* @brief    Defines if Backwards Compatibility Configuration (BCC) feature of CAN controller is used in the configuration.
*           If BCC feature of CAN controller is enabled, Individual Rx masking and queue feature are disabled.
*           If BCC feature of CAN controller is disabled, Individual Rx masking and queue feature are enabled.
*/
#define CAN_BCC_SUPPORT_ENABLE (STD_OFF)


/*
@brief    Macro used to define the maximum of Can object IDs configured  .
*/
#define CAN_MAX_OBJECT_ID ((uint32)23U)
/*==================================================================================================
*                                      DEFINES AND MACROS
==================================================================================================*/

/* @violates @ref Can_Cfg_h_REF_5 This is required as per autosar Requirement. */
#define CAN_LPDU_NOTIFICATION_ENABLE (STD_OFF)

/*==================================================================================================
*                                             ENUMS
==================================================================================================*/

/*==================================================================================================
*                                STRUCTURES AND OTHER TYPEDEFS
==================================================================================================*/

/*==================================================================================================
*                                GLOBAL VARIABLE DECLARATIONS
==================================================================================================*/

/*==================================================================================================
*                                    FUNCTION PROTOTYPES
==================================================================================================*/


#ifdef __cplusplus
}
#endif

#endif /* _CAN_CFG_H_ */

/** @} */

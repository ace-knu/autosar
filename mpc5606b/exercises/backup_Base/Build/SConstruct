# -*- coding: UTF-8 -*-
import os  # Do not touch this line
import cdt  # Do not touch this line
import common  # Do not touch this line
from SCons.Script import COMMAND_LINE_TARGETS  # Do not touch this line
from SCons.Script import SConscript  # Do not touch this line
from SCons.Script import DefaultEnvironment  # Do not touch this line

CCompiler = r'E:\Freescale\CW MCU v10.5\MCU\PA_Tools\Command_Line_Tools\mwcceppc.exe'
McalGenerator = r'D:\ts_mirr\xml\eb-tresos-MPC560XB_MCAL4_0_RTM_1_0_1_HF13\bin\tresos_cmd.bat'

BUILD_SCRIPT_DIR = 'Build'

env = DefaultEnvironment(tools=[
    'gcc',
    ('tresosmcal', {'MCALGENERATOR': McalGenerator}),
    'autronbsw',
    'freescaleos',
    ('codewarrior', {'CC': CCompiler, }),
    ('release', {'BUILD_SCRIPT_DIR': BUILD_SCRIPT_DIR}),
    'timestamp',
])
common.setting(env)
env['TEST_ENABLE'] = 'ON'
env['COMPILE_RULE'] = 'Build'
env['REMOVE_TIMESTAMP'] = True  # Remove timestamps of generated files.
env['DEBUG_DIR'] = 'Debug'
env['BSW_OUTPUT_DIR'] = os.path.join('Generated', 'Bsw_Output')
env['MCAL_OUTPUT_DIR'] = os.path.join('Generated', 'Mcal_Output')
env['BUILD_SCRIPT_DIR'] = BUILD_SCRIPT_DIR
env['LOG_DIR'] = '.log'
env['LIB_INSTALL_DIR'] = 'Library'
env['LIB_OUTPUT_DIR'] = env['DEBUG_DIR']
env['LIB_DIR_LIST'] = [
    'lib',
    'ext_lib',
]
env['LIB_LEVEL'] = 'l9'
ext = ARGUMENTS.get('ext', 0)
if int(ext) == 1:
  env['EXT_LIB_OPTION'] = 1
  env['RELEASE_EXCEPTED_DIR'].remove('lib')
  env['LIB_DIR_LIST'].remove('lib')
  
#env['ENV']['LM_LICENSE_FILE'] = r'C:\Freescale\CW MCU v10.5\MCU\license.dat'
#env['ENV']['LM_LICENSE_FILE'] = r'C:\license.dat'

#env['ENV']['GHS_LMHOST'] = '10.208.199.206'  # Set 'license Server IP' or 'license file path' of compiler.
#env['ENV']['GHS_LMWHICH'] = 'ghs'
#env['ENV']['LICENSE_FILE_DIR'] = os.path.join(os.getcwd(), 'Build')

env['ASFLAGS'] = [
    '-proc Zen',
    '-vle',
    '-sym dwarf-2,full',
    '-gdwarf-2',
    '-DMWERKS',
]

env['CCFLAGS'] = [
    '-proc Zen',
    # '-lang c',  # illegal implicit conversion 
    '-lang c99',
    '-opt all',
    '-common off',
    '-sdatathreshold 0',
    '-sdata2threshold 0',
    '-vle',
    '-use_lmw_stmw on',
    '-ppc_asm_to_vle',
    '-Cpp_exceptions off',
    '-func_align 4',
    '-sym dwarf-2,full',
    '-gdwarf-2',
    #'-w on',
    '-r',
    #'-w undefmacro',  # undefined macro '__COLDFIRE__' used in #if or #elif conditional 
    '-char unsigned',
    '-nosyspath',
    '-fp none',
    '-common off',
    # ===  Add for Os ===
    '-msgstyle gcc',
    '-nostdinc',
    '-pragma "read_only_switch_tables on"',  # required for memory protection places switch tables in a read-only section
    # ===  Add for Toolset ===
    '-c',  # Instructs the compiler to compile but not invoke the linker to link the object code.
]

env['CPPDEFINES'] = [
    #'AUTOSAR_OS_NOT_USED',
    'MWERKS',
    #'OSMPC5607B',  # used in Os_InitSram.c/FreescaleOs # it is defined os_prop.h which is os generated file.
    'OSCWPPC',  # used in vector.c/app_compiler_abstraction.h/execption.c/FreescaleOs/mcal memmap
    'FLASH_START',  # used in flashrchw.c/Os_InitSram.c
    'DISABLE_MCAL_INTERMODULE_ASR_CHECK',  # used in mcal #error "AutoSar Version Numbers of Gpt.h and EcuM_Cbk.h are different" 
]

env['LINKFLAGS'] = [
    '-proc Zen',
    '-code_merging all',
    '-far_near_addressing',
    '-vle_enhance_merging',
    '-listdwarf',
    '-sym dwarf-2,full',
    '-char unsigned',
    # ===  Add for Toolset ===
    '-m __start',
    '-map ${DEBUG_DIR}/${PROJECT}.map',
    '-srec ${DEBUG_DIR}/${PROJECT}.sre',
    '-sreclength 26',
    '-sreceol dos',
    '-romaddr 0x00003000',
    '-rambuffer 0x00003000',
    '-application',
]

env['LIBPATH'] = [
    os.path.join('Static_Code', 'Integration_Code'), 
    #r'Static_Code\Modules\b_autosar_sys_CryptoLib\delivery\Autron\bin',
    #r'Static_Code\Modules\b_autosar_sys_CryptoLib\delivery\CycurLib\bin',
]

#env['LIBS'] = ['sys', 'startup', 'arch', 'ansi', 'ind']
env['LIBS'] = ['c_E200z0_VLE_Soft', #'HacPrng_MPC560xB', 
              #'cycurlib_MPC560xB', 
	          #'ASK_MPC560xB_IBU',
	          ]

env['PREFIX'] = 'Build' + os.sep + 'MPC5606B_FLASH_VLE.prefix'

env['LINKSCRIPT'] = 'Build' + os.sep + 'default560B.lcf'
#env['LINKSCRIPT'] = 'Build' + os.sep + 'linker_command_file.ld's

env['OBJECTS'] = [
    #os.path.join(os.path.dirname(env['CC']), 'lib', 'ppc5514', 'crt0.o')
    # os.path.join('Static_Code', 'libcs_fpu.a')
    os.path.join('Static_Code', 'Integration_Code', 'crt0_s.obj'),
    os.path.join('Static_Code', 'Integration_Code', 'rchw_init_c.obj'),
    os.path.join('Static_Code', 'Integration_Code', 'romcopy_c.obj'),
    
]

if 'LIBRARY' in COMMAND_LINE_TARGETS:
	env['LIB_OUTPUT_DIR'] = env['LIB_INSTALL_DIR']
	env['DEBUG_DIR'] = env['LIB_INSTALL_DIR']
else:

	generateScript = os.path.join(env['BUILD_SCRIPT_DIR'], 'generate.py')
	SConscript(generateScript, exports=['env', ])

compileScript = os.path.join(env['BUILD_SCRIPT_DIR'], 'compile.py')
SConscript(compileScript, exports=['env', ])

if 'Release' in COMMAND_LINE_TARGETS:
    (target, source) = cdt.CdtProject().get_release_targets(env)
    rel = env.InstallAs(target, source)
 #  rel += env.InstallAs(os.path.join(env['RELEASE_DIR'], env['LIB_INSTALL_DIR'], os.path.basename(env['LIBRARY_FILE'])),
 #                      env['LIBRARY_FILE'])
    release = env.Default(rel)
 #   env.Depends(release, 'LIBRARY')
    re = env.Release(source=env['PROJECT_FILES'])
    Alias('Release', [re, rel])
    renamedRelease = env.Default(re)
    env.Depends(renamedRelease, release)  # because '.pyc' permission

<?xml version="1.0" encoding="UTF-8"?>
<GENERAL-INFORMATION>

  <!-- Template version -->
  <TEMPLATE-VERSION>1.3.3</TEMPLATE-VERSION>

  <!-- Generation Tool versions which are supported by this Template -->
  <SUPPORTED-TOOL-VERSIONS>1.0.3 1.3.1 1.3.2 1.3.3 1.3.4</SUPPORTED-TOOL-VERSIONS>

  <!-- Parser Details for Config Module -->
  <PARSER-DETAILS>
    <!-- Module under test -->
    <MODULE-UNDER-TEST>MEMIF</MODULE-UNDER-TEST>
    <!-- Modules required MDT File information -->
    <MODULE-UNDER-TEST-MDT>MEMIF</MODULE-UNDER-TEST-MDT>
    <!-- Mandatory Modules required to Parse MemIf -->
    <MANDATORY-MODULES>MEMIF NVM</MANDATORY-MODULES>
    <!-- All the Modules to be Parsed -->
    <MODULES>MEMIF NVM EA FEE EEP FLS</MODULES>
    <!-- Provide all command line options here in capital case, first letter of each commandline option will also be
         a valid command line option but it need not be mentioned below.
         command line options should not conflict with each other including the first charactor of option
    -->
    <CMDLINEOPTIONS></CMDLINEOPTIONS>
    <!-- To check if the correct description file is provided as input.
      ArReleaseVersion in the description file is compared with the below versions -->
    <FOR-VERSION-CHECK>
      <VERSIONS>4.0.3</VERSIONS>
      <MESSAGE-TYPE>INF</MESSAGE-TYPE>
    </FOR-VERSION-CHECK>
  </PARSER-DETAILS>

  <!-- Map Names -->
  <MAP-NAMES>
    <CONTAINER-DETAILS>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'MemIfGeneral' MAP-NAME = 'General'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'MemIfDevErrorDetect' MAP-NAME = 'DevErrorDetect'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'MemIfNumberOfDevices' MAP-NAME = 'NoOfDevices'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'MemIfVersionInfoApi' MAP-NAME = 'VersionInfoApi'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'FlsGeneral' MAP-NAME = 'FlsGeneral'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'FlsDriverIndex' MAP-NAME = 'FlsDriverIndex'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'EepGeneral' MAP-NAME = 'EepGeneral'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'EepDriverIndex' MAP-NAME = 'EepDriverIndex'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
    </CONTAINER-DETAILS>
  </MAP-NAMES>

  <!-- Container Count -->
  <CONTAINER-COUNTS>
    <CONTAINER-COUNT MAP-NAME = 'General'                    COUNT = '0'></CONTAINER-COUNT>
  </CONTAINER-COUNTS>

  <!-- Pre compile options -->
  <PRE-COMPILE-OPTIONS>
    <MACRO-ENTRY
      Name      = 'MEMIF_DEV_ERROR_DETECT'
      Type      = '1'
      Value     = 'STD_OFF'
      Pos       = '1'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Enables/Disables Development error detection'
      Container = 'General'
      Parameter = 'DevErrorDetect' >
    </MACRO-ENTRY>

    <MACRO-ENTRY
      Name      = 'MEMIF_VERSION_INFO_API'
      Type      = '1'
      Value     = 'STD_OFF'
      Pos       = '2'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Enables/Disables GetVersionInfo API'
      Container = 'General'
      Parameter = 'VersionInfoApi' >
    </MACRO-ENTRY>
<!--    
    <MACRO-ENTRY
      Name      = 'MEMIF_EEP_DRIVER_INDEX'
      Type      = '2'
      Value     = '0'
      Pos       = '4'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'EepDriverIndex'
      Container = 'EepGeneral'
      Parameter = 'EepDriverIndex' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'MEMIF_FLS_DRIVER_INDEX'
      Type      = '2'
      Value     = '0'
      Pos       = '3'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'FlsDriverIndex'
      Container = 'FlsGeneral'
      Parameter = 'FlsDriverIndex' >
    </MACRO-ENTRY>
-->    
    <MACRO-ENTRY
      Name      = 'MEMIF_NUMBER_OF_DEVICE'
      Type      = '2'
      Value     = '0'
      Pos       = '5'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'MemIfNumberOfDevices'
      Container = 'General'
      Parameter = 'NoOfDevices' >
    </MACRO-ENTRY>    
    
           
  </PRE-COMPILE-OPTIONS>

  <!-- Contains all consistency checks -->
  <CONSISTENCY-CHECKS>

    <!-- Mandatory check -->
    <MANDATORY-CHECK>
      <CONTAINER NAME = 'General'>
        <PARAMETER-NAME>DevErrorDetect</PARAMETER-NAME>
        <PARAMETER-NAME>NoOfDevices</PARAMETER-NAME>
        <PARAMETER-NAME>VersionInfoApi</PARAMETER-NAME>
      </CONTAINER>
    </MANDATORY-CHECK>
  </CONSISTENCY-CHECKS>

  <!-- Static code that is to be added in the output files -->
  <OUTPUT-FILES>
    <MemIf_Cfg.h>
      <TEMPLATE>/*******************************************************************************
**  FILE-NAME: MemIf_Cfg.h                                                    **
**                                                                            **
**  MODULE-NAME: AUTOSAR Memory Abstraction Interface Module                  **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef MEMIF_CFG_H
#define MEMIF_CFG_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "MemIf_Types.h"
/*******************************************************************************
**                      Version Information                                   **
*******************************************************************************/
AR_SW_VERSIONS
/*******************************************************************************
**                      Common Published Information                          **
*******************************************************************************/
AR_SW_COMMONPUB_VERSIONS
/*******************************************************************************
**                      Precompile Options                                    **
*******************************************************************************/
PRECOMPILE_OPTIONS
/*******************************************************************************
**                      Macros                                                **
*******************************************************************************/

#endif /* MEMIF_CFG_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </MemIf_Cfg.h>
<MemIf.h>
<TEMPLATE>/*******************************************************************************
**  FILE-NAME: MemIf.h                                                        **
**                                                                            **
**  MODULE-NAME: AUTOSAR Memory Abstraction Interface Module                  **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef MEMIF_H
#define MEMIF_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "Std_Types.h"
#include "MemIf_Cfg.h"
INCLUDE_SECTION

/*******************************************************************************
**                      Global symbols                                        **
*******************************************************************************/
/* Macro for Instance Id to be used as one of the return values on call of
  "Det_GetVersionInfo".*/
#define MEMIF_INSTANCE_ID                 0x00
MACROS

#define MEMIF_ZERO             0x00
#define MEMIF_BROADCAST_ID     ((uint8)0xFF)
#define MEMIF_TRUE             0x01
#define MEMIF_FALSE            0x00
/*******************************************************************************
**                        Service IDs                                         **
*******************************************************************************/
SERVICE_ID
/* Service ID for Get Version Info  */
#define MEMIF_GETVERSIONINFO_SID            0x08

/*******************************************************************************
**                      DET Error Codes                                       **
*******************************************************************************/
/* DET code for invalid device number */
#define MEMIF_E_PARAM_DEVICE       0x01
/* DET code for invalid pointer for GetVersionInfo */
#define MEMIF_E_PARAM_POINTER      0x02

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/
EXTERN_PROTOTYPE
#endif /* MEMIF_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
</MemIf.h>
    <MemIf.c>
      <TEMPLATE>/*******************************************************************************
**  FILE-NAME: MemIf.c                                                        **
**                                                                            **
**  MODULE-NAME: AUTOSAR Memory Abstraction Interface Module                  **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **                                                               
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE
/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "MemIf.h"
INCLUDE_SECTION
/*******************************************************************************
**                      Version Information                                  **
*******************************************************************************/
AR_VERSION
/*******************************************************************************
**                      Version Check                                         **
*******************************************************************************/
VERSION_CHECK
/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/
MemIf_Functions
MemIf_Getversioninfo
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </MemIf.c>
  </OUTPUT-FILES>
 <EA-FEE>
 <DEFINE>
#define MemIf_SetMode(Mode)  $choice$_SetMode(Mode)

#define MemIf_Read(DeviceIndex, BlockNumber, BlockOffset, DataBufferPtr, Length)\
  $choice$_Read(BlockNumber, BlockOffset, DataBufferPtr, Length)

#define MemIf_Write(DeviceIndex, BlockNumber, DataBufferPtr)\
  $choice$_Write(BlockNumber, DataBufferPtr)

#define MemIf_Cancel(DeviceIndex)  $choice$_Cancel()

#define MemIf_GetStatus(DeviceIndex)  $choice$_GetStatus()

#define MemIf_GetJobResult(DeviceIndex)  $choice$_GetJobResult()

#define MemIf_InvalidateBlock(DeviceIndex, BlockNumber)\
  $choice$_InvalidateBlock(BlockNumber)

#define MemIf_EraseImmediateBlock(DeviceIndex, BlockNumber)\
  $choice$_EraseImmediateBlock(BlockNumber)</DEFINE></EA-FEE>
<EXTERN-PROTOTYPE>
<PROTOTYPE>#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(void, MEMIF_CODE) MemIf_SetMode(MemIf_ModeType Mode);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(MemIf_StatusType, MEMIF_CODE) MemIf_GetStatus(uint8
  DeviceIndex);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(Std_ReturnType, MEMIF_CODE) MemIf_Read(uint8 DeviceIndex,
  uint16 BlockNumber, uint16 BlockOffset,
  P2VAR(uint8, AUTOMATIC, MEMIF_APPL_DATA)DataBufferPtr, uint16 Length);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(Std_ReturnType, MEMIF_CODE) MemIf_Write(uint8 DeviceIndex,
  uint16 BlockNumber, P2VAR(uint8, AUTOMATIC, MEMIF_APPL_DATA)DataBufferPtr);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(void, MEMIF_CODE) MemIf_Cancel(uint8 DeviceIndex);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(MemIf_JobResultType, MEMIF_CODE) MemIf_GetJobResult(uint8
  DeviceIndex);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(Std_ReturnType, MEMIF_CODE) MemIf_InvalidateBlock(uint8
  DeviceIndex, uint16 BlockNumber);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"

#define MEMIF_START_SEC_CODE
#include "MemMap.h"
extern FUNC(Std_ReturnType, MEMIF_CODE) MemIf_EraseImmediateBlock(uint8
  DeviceIndex, uint16 BlockNumber);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</PROTOTYPE>
<VERSION>
#define MEMIF_START_SEC_CODE
#include "MemMap.h"
/* Function for MEMIF getting Version Information API */
extern FUNC(void, MEMIF_CODE) MemIf_GetVersionInfo
  (P2VAR(Std_VersionInfoType, AUTOMATIC, MEMIF_APPL_DATA)VersionInfoPtr);
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</VERSION>
</EXTERN-PROTOTYPE>
<SERVICE-ID>
/* Service ID for Read  */
#define MEMIF_READ_SID                      0x02
/* Service ID for Write  */
#define MEMIF_WRITE_SID                     0x03
/* Service ID for Cancel  */
#define MEMIF_CANCEL_SID                    0x04
/* Service ID for Get Status  */
#define MEMIF_GETSTATUS_SID                 0x05
/* Service ID for Get Job Result  */
#define MEMIF_GETJOBRESULT_SID              0x06
/* Service ID for Invalidate Block */
#define MEMIF_INVALIDATEBLOCK_SID           0x07
/* Service ID for  Erase Immediate Block */
#define MEMIF_ERASEIMMEDIATEBLOCK_SID       0x09</SERVICE-ID>
<DEFINED>
#define MEMIF_BROADCAST_ID    0xFF
#define MEMIF_TRUE            0X01
#define MEMIF_FALSE           0X00</DEFINED>
<MEMIF-SETMODE>
/*******************************************************************************
** Function Name      : MemIf_SetMode                                         **
**                                                                            **
** Service ID         : 0x01                                                  **
**                                                                            **
** Description        : This API maps to service Fee_SetMode and Ea_SetMode   **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : Mode                                                  **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : None                                                  **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked:Ea_SetMode                        **
**                                          Fee_SetMode                       **
*******************************************************************************/

#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(void, MEMIF_CODE) MemIf_SetMode (MemIf_ModeType Mode)
{
  /* Invoke set mode */
    $MemIf_Setmode_Fls_On$
    
    $MemIf_Setmode_Eep_On$
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-SETMODE>
<MEMIF-SETMODE-FLS-ON>
  Fee_SetMode(Mode);
</MEMIF-SETMODE-FLS-ON>
<MEMIF-SETMODE-EEP-ON>
  Ea_SetMode(Mode);
</MEMIF-SETMODE-EEP-ON>
<MEMIF-FUNCTIONS>
MemIf_SetMode
MemIf_Read
MemIf_Write
MemIf_Cancel
MemIf_Getstatus
MemIf_Getjobresult
MemIf_Invalidateblock
MemIf_Eraseimmediateblock
</MEMIF-FUNCTIONS>
<MEMIF-READ>
/*******************************************************************************
** Function Name      : MemIf_Read                                            **
**                                                                            **
** Service ID         : 0x02                                                  **
**                                                                            **
** Description        : This API maps to service Fee_Read or Ea_Read          **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex,BlockNumber,BlockOffset, Length           **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : DataBufferPtr                                         **
**                                                                            **
** Return Parameter   : (E_OK, E_NOT_OK)                                      **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(Std_ReturnType, MEMIF_CODE) MemIf_Read
  (uint8 DeviceIndex, uint16 BlockNumber, uint16 BlockOffset,
  P2VAR(uint8, AUTOMATIC, MEMIF_APPL_DATA) DataBufferPtr, uint16 Length)
{
  Std_ReturnType LddReturnValue;
  #if(MEMIF_DEV_ERROR_DETECT == STD_ON)
  LddReturnValue = E_NOT_OK;
  #endif

  $MemIf_Read_Det_On$
  
  $MemIf_Read_Det_Off$

  return(LddReturnValue);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-READ>
<MEMIF-READ-DET-ON>
  if(DataBufferPtr == NULL_PTR)
  {
    /* Invalid Pointer, Report error to DET */
    (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_READ_SID,
      MEMIF_E_PARAM_POINTER);
  }
  else
  {
    if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
    {
      /* Invalid DeviceIndex, Report error to DET */
      (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_READ_SID,
        MEMIF_E_PARAM_DEVICE);
    }    	
    
    /* Check the passed DeviceIndex and call the underlying
       Read API as applicable */

    $MemIf_Read_Fls_On$
    
    $MemIf_Read_Eep_On$

  }
</MEMIF-READ-DET-ON>
<MEMIF-READ-DET-OFF>
  /* Check the passed DeviceIndex and call the underlying
    Read API as applicable */
    
    $MemIf_Read_Fls_On$
    
    $MemIf_Read_Eep_On$    
    
</MEMIF-READ-DET-OFF>
<MEMIF-READ-FLS-ON>
    if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
    {
      LddReturnValue = Fee_Read(BlockNumber, BlockOffset, DataBufferPtr, Length);
    }

</MEMIF-READ-FLS-ON>
<MEMIF-READ-EEP-ON>
    if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
    {
      LddReturnValue = Ea_Read(BlockNumber, BlockOffset, DataBufferPtr, Length);
    }
</MEMIF-READ-EEP-ON>
<MEMIF-WRITE>
/*******************************************************************************
** Function Name      : MemIf_Write                                           **
**                                                                            **
** Service ID         : 0x03                                                  **
**                                                                            **
** Description        : This API maps to service Fee_Write or                 **
**                      Ea_Write                                              **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex, BlockNumber, DataBufferPtr               **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : (E_OK, E_NOT_OK)                                      **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(Std_ReturnType, MEMIF_CODE) MemIf_Write (uint8 DeviceIndex,
  uint16 BlockNumber,P2VAR(uint8, AUTOMATIC, MEMIF_APPL_DATA) DataBufferPtr)
{
  
  Std_ReturnType LddReturnValue;

  #if(MEMIF_DEV_ERROR_DETECT == STD_ON)
  LddReturnValue = E_NOT_OK;
  #endif

  $MemIf_Write_Det_On$
  
  $MemIf_Write_Det_Off$

  return(LddReturnValue);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-WRITE>
<MEMIF-WRITE-DET-ON>
  if(DataBufferPtr == NULL_PTR)
  {
    /* Invalid Pointer, Report error to DET */
    (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_WRITE_SID,
      MEMIF_E_PARAM_POINTER);
  }
  else
  {
    if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
    {
      (void)Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_WRITE_SID,
        MEMIF_E_PARAM_DEVICE);    	    
    }
        
    /*Check the passed DeviceIndex and call the underlying
      Write API as applicable*/
    $MemIf_Write_Fls_On$
    
    $MemIf_Write_Eep_On$    

  }
</MEMIF-WRITE-DET-ON>
<MEMIF-WRITE-DET-OFF>
  /* Check the passed DeviceIndex and call the underlying
    Write API as applicable */
    $MemIf_Write_Fls_On$
    
    $MemIf_Write_Eep_On$
</MEMIF-WRITE-DET-OFF>
<MEMIF-WRITE-FLS-ON>
    if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
    {
      LddReturnValue = Fee_Write(BlockNumber, DataBufferPtr);
    }

</MEMIF-WRITE-FLS-ON>
<MEMIF-WRITE-EEP-ON>
    if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
    {
      LddReturnValue = Ea_Write(BlockNumber, DataBufferPtr);
    }
</MEMIF-WRITE-EEP-ON>
<MEMIF-CANCEL>
/*******************************************************************************
** Function Name      : MemIf_Cancel                                          **
**                                                                            **
** Service ID         : 0x04                                                  **
**                                                                            **
** Description        : This API maps to service Fee_Cancel or                **
**                      Ea_Cancel                                             **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex                                           **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : None                                                  **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(void, MEMIF_CODE) MemIf_Cancel (uint8 DeviceIndex)
{
  $MemIf_Cancel_Det_On$
  
  $MemIf_Cancel_Det_Off$
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-CANCEL>
<MEMIF-CANCEL-DET-ON>

  if (DeviceIndex >= (MEMIF_NUMBER_OF_DEVICE))
  {
    /* Invalid DeviceIndex, Report error to DET */
    (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_CANCEL_SID,
      MEMIF_E_PARAM_DEVICE);
  }        		
  $MemIf_Cancel_Fls_On$
  
  $MemIf_Cancel_Eep_On$
</MEMIF-CANCEL-DET-ON>
<MEMIF-CANCEL-DET-OFF>
  $MemIf_Cancel_Fls_On$
  
  $MemIf_Cancel_Eep_On$
</MEMIF-CANCEL-DET-OFF>
<MEMIF-CANCEL-FLS-ON>
  /* Check the passed DeviceIndex and call the underlying
    Cancel API as applicable */
  if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
  {
    Fee_Cancel();
  }

</MEMIF-CANCEL-FLS-ON>
<MEMIF-CANCEL-EEP-ON>
  /* Check the passed DeviceIndex and call the underlying
    Cancel API as applicable */
  if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
  {
    Ea_Cancel();
  }
</MEMIF-CANCEL-EEP-ON>
<MEMIF-GETJOBRESULT>
/*******************************************************************************
** Function Name      : MemIf_GetJobResult                                    **
**                                                                            **
** Service ID         : 0x06                                                  **
**                                                                            **
** Description        : This API maps to service Fee_GetJobResult or          **
**                      Ea_GetJobResult                                       **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex                                           **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : (MEMIF_JOB_OK, MEMIF_JOB_FAILED,                      **
**                      MEMIF_JOB_PENDING, MEMIF_JOB_CANCELED,                **
**                      MEMIF_BLOCK_INCONSISTENT, MEMIF_BLOCK_INVALID)        **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(MemIf_JobResultType,MEMIF_CODE)MemIf_GetJobResult(uint8 DeviceIndex)
{
  MemIf_JobResultType LddJobResultType;
  #if(MEMIF_DEV_ERROR_DETECT == STD_ON)
  LddJobResultType = MEMIF_JOB_FAILED;
  #endif

  $MemIf_Getjobresult_Det_On$
  
  $MemIf_Getjobresult_Det_Off$

  return(LddJobResultType);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-GETJOBRESULT>
<MEMIF-GETJOBRESULT-DET-ON>
  if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
  {
    /* Invalid DeviceIndex, Report error to DET */
    (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID,
      MEMIF_GETJOBRESULT_SID, MEMIF_E_PARAM_DEVICE);
  }  	
  $MemIf_Getjobresult_Fls_On$
  
  $MemIf_Getjobresult_Eep_On$
</MEMIF-GETJOBRESULT-DET-ON>
<MEMIF-GETJOBRESULT-DET-OFF>
  $MemIf_Getjobresult_Fls_On$
  
  $MemIf_Getjobresult_Eep_On$
</MEMIF-GETJOBRESULT-DET-OFF>
<MEMIF-GETJOBRESULT-FLS-ON>
  /* Check the passed DeviceIndex and call the underlying
    GetJobResult API as applicable */
  if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
  {
    LddJobResultType = Fee_GetJobResult();
  }

</MEMIF-GETJOBRESULT-FLS-ON>
<MEMIF-GETJOBRESULT-EEP-ON>
  /* Check the passed DeviceIndex and call the underlying
    GetJobResult API as applicable */
  if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
  {
    LddJobResultType = Ea_GetJobResult();
  }
</MEMIF-GETJOBRESULT-EEP-ON>
<MEMIF-INVALIDATEBLOCK>
/*******************************************************************************
** Function Name      : MemIf_InvalidateBlock                                 **
**                                                                            **
** Service ID         : 0x07                                                  **
**                                                                            **
** Description        : This API maps to service Fee_InvalidateBlock          **
**                      respectively Ea_InvalidateBlock                       **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex, BlockNumber                              **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : (E_OK, E_NOT_OK)                                      **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(Std_ReturnType, MEMIF_CODE) MemIf_InvalidateBlock
  (uint8 DeviceIndex, uint16 BlockNumber)
{
  Std_ReturnType LddReturnValue;
  #if(MEMIF_DEV_ERROR_DETECT == STD_ON)
  LddReturnValue = E_NOT_OK;
  #endif

  $MemIf_Invalidateblock_Det_On$
  
  $MemIf_Invalidateblock_Det_Off$

  return(LddReturnValue);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-INVALIDATEBLOCK>
<MEMIF-INVALIDATEBLOCK-DET-ON>
  if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
  {
    (void)Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID,
     MEMIF_INVALIDATEBLOCK_SID, MEMIF_E_PARAM_DEVICE); 
  }
  $MemIf_Invalidateblock_Fls_On$
  
  $MemIf_Invalidateblock_Eep_On$
</MEMIF-INVALIDATEBLOCK-DET-ON>
<MEMIF-INVALIDATEBLOCK-DET-OFF>
  $MemIf_Invalidateblock_Fls_On$
  
  $MemIf_Invalidateblock_Eep_On$
</MEMIF-INVALIDATEBLOCK-DET-OFF>
<MEMIF-INVALIDATEBLOCK-FLS-ON>
  /* Check the passed DeviceIndex and call the underlying
    InvalidateBlock API as applicable */
  if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
  {
    LddReturnValue = Fee_InvalidateBlock(BlockNumber);
  }

</MEMIF-INVALIDATEBLOCK-FLS-ON>
<MEMIF-INVALIDATEBLOCK-EEP-ON>
  /* Check the passed DeviceIndex and call the underlying
    InvalidateBlock API as applicable */
  if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
  {
    LddReturnValue = Ea_InvalidateBlock(BlockNumber);
  }
</MEMIF-INVALIDATEBLOCK-EEP-ON>
<MEMIF-ERASEIMMEDIATEBLOCK>
/*******************************************************************************
** Function Name      : MemIf_EraseImmediateBlock                             **
**                                                                            **
** Service ID         : 0x09                                                  **
**                                                                            **
** Description        : This API maps to service Fee_EraseImmediateBlock      **
**                      respectively Ea_EraseImmediateBlock                   **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex, BlockNumber                              **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : (E_OK, E_NOT_OK)                                      **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(Std_ReturnType, MEMIF_CODE) MemIf_EraseImmediateBlock
  (uint8 DeviceIndex, uint16 BlockNumber)
{
  Std_ReturnType LddReturnValue;
   #if(MEMIF_DEV_ERROR_DETECT == STD_ON)
  LddReturnValue = E_NOT_OK;
   #endif

  $MemIf_Eraseimmediateblock_Det_On$
  
  $MemIf_Eraseimmediateblock_Det_Off$

  return(LddReturnValue);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-ERASEIMMEDIATEBLOCK>
<MEMIF-ERASEIMMEDIATEBLOCK-DET-ON>
  if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
  {
    (void)Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID,
       MEMIF_ERASEIMMEDIATEBLOCK_SID, MEMIF_E_PARAM_DEVICE);
  }
  $MemIf_Eraseimmediateblock_Fls_On$
  
  $MemIf_Eraseimmediateblock_Eep_On$
</MEMIF-ERASEIMMEDIATEBLOCK-DET-ON>
<MEMIF-ERASEIMMEDIATEBLOCK-DET-OFF>
  $MemIf_Eraseimmediateblock_Fls_On$
  
  $MemIf_Eraseimmediateblock_Eep_On$
</MEMIF-ERASEIMMEDIATEBLOCK-DET-OFF>
<MEMIF-ERASEIMMEDIATEBLOCK-FLS-ON>
  /* Check the passed DeviceIndex and call the underlying
    EraseImmediateBlock API as applicable */
  if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
  {
    LddReturnValue = Fee_EraseImmediateBlock(BlockNumber);
  }

</MEMIF-ERASEIMMEDIATEBLOCK-FLS-ON>
<MEMIF-ERASEIMMEDIATEBLOCK-EEP-ON>
  /* Check the passed DeviceIndex and call the underlying
    EraseImmediateBlock API as applicable */
  if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
  {
    LddReturnValue = Ea_EraseImmediateBlock(BlockNumber);
  }
</MEMIF-ERASEIMMEDIATEBLOCK-EEP-ON>
<MEMIF-GETVERSIONINFO>
/*******************************************************************************
** Function Name      : MemIf_GetVersionInfo                                  **
**                                                                            **
** Service ID         : 0x08                                                  **
**                                                                            **
** Description        : This service returns the version information of this  **
**                      component.                                            **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Reentrant                                             **
**                                                                            **
** Input Parameters   : None                                                  **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : VersionInfoPtr                                        **
**                                                                            **
** Return Parameter   : None                                                  **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(void, MEMIF_CODE) MemIf_GetVersionInfo
  (P2VAR(Std_VersionInfoType, AUTOMATIC, MEMIF_APPL_DATA)VersionInfoPtr)
{
  $MemIf_Getversioninfo_Det_On$
  
  $MemIf_Getversioninfo_Det_Off$
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-GETVERSIONINFO>
<MEMIF-GETVERSIONINFO-DET-ON>
  /* If DET is enabled check for null pointer */

  /* Check whether Version Information is equal to Null Ptr */
  if(VersionInfoPtr == NULL_PTR)
  {
    /* Report to DET  */
    (void) Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID,
      MEMIF_GETVERSIONINFO_SID, MEMIF_E_PARAM_POINTER);
  }
  else
  {
    /* Copy the vendor Id */
    VersionInfoPtr->vendorID = MEMIF_VENDOR_ID;
    /* Copy the module Id */
    VersionInfoPtr->moduleID = MEMIF_MODULE_ID;
    /* Copy Software Major Version */
    VersionInfoPtr->sw_major_version = MEMIF_SW_MAJOR_VERSION;
    /* Copy Software Minor Version */
    VersionInfoPtr->sw_minor_version = MEMIF_SW_MINOR_VERSION;
    /* Copy Software Patch Version */
    VersionInfoPtr->sw_patch_version = MEMIF_SW_PATCH_VERSION;
  }
</MEMIF-GETVERSIONINFO-DET-ON>
<MEMIF-GETVERSIONINFO-DET-OFF>
  /* Copy the vendor Id */
  VersionInfoPtr->vendorID = MEMIF_VENDOR_ID;
  /* Copy the module Id */
  VersionInfoPtr->moduleID = MEMIF_MODULE_ID;
  /* Copy Software Major Version */
  VersionInfoPtr->sw_major_version = MEMIF_SW_MAJOR_VERSION;
  /* Copy Software Minor Version */
  VersionInfoPtr->sw_minor_version = MEMIF_SW_MINOR_VERSION;
  /* Copy Software Patch Version */
  VersionInfoPtr->sw_patch_version = MEMIF_SW_PATCH_VERSION;
</MEMIF-GETVERSIONINFO-DET-OFF>
<MEMIF-GETSTATUS>
/*******************************************************************************
** Function Name      : MemIf_GetStatus                                       **
**                                                                            **
** Service ID         : 0x05                                                  **
**                                                                            **
** Description        : This API maps to service Fee_GetStatus or             **
**                      Ea_GetStatus                                          **
**                                                                            **
** Sync/Async         : Synchronous                                           **
**                                                                            **
** Re-entrancy        : Non Reentrant                                         **
**                                                                            **
** Input Parameters   : DeviceIndex                                           **
**                                                                            **
** InOut parameter    : None                                                  **
**                                                                            **
** Output Parameters  : None                                                  **
**                                                                            **
** Return Parameter   : (MEMIF_BUSY, MEMIF_UNINIT,                            **
                         MEMIF_IDLE, MEMIF_BUSY_INTERNAL)                     **
**                                                                            **
** Preconditions      : None                                                  **
**                                                                            **
** Remarks            : Global Variable(s):None                               **
**                      Function(s) Invoked: $Invoked_Functions$
*******************************************************************************/
#define MEMIF_START_SEC_CODE
#include "MemMap.h"

FUNC(MemIf_StatusType, MEMIF_CODE) MemIf_GetStatus(uint8 DeviceIndex)
{
  MemIf_StatusType LddStatusType;

  /* Initialize the local variables */
  LddStatusType = MEMIF_UNINIT;

  /* Check whether passed DeviceIndex value is broadcast device ID */
  if(DeviceIndex != MEMIF_BROADCAST_ID)
  {
    $MemIf_Getstatus_Det_On$
    
    $MemIf_Getstatus_Det_Off$
  }
  else /* The DeviceIndex is denoting a broadcast */
  {

    $MemIf_Getstatus_Broad_Fls_On$
    
    $MemIf_Getstatus_Broad_Eep_On$
    
    $MemIf_Getstatus_Broad_Fls_Eep_On$
    
  } /* End else part of if(DeviceIndex != MEMIF_BROADCAST_ID) */
  return(LddStatusType);
}
#define MEMIF_STOP_SEC_CODE
#include "MemMap.h"</MEMIF-GETSTATUS>
<MEMIF-GETSTATUS-DET-ON>
    if (DeviceIndex >= MEMIF_NUMBER_OF_DEVICE)
    {
      /* Invalid DeviceIndex, Report error to DET */
      (void)Det_ReportError(MEMIF_MODULE_ID, MEMIF_INSTANCE_ID, MEMIF_GETSTATUS_SID,
        MEMIF_E_PARAM_DEVICE);    	    
    }
    $MemIf_Getstatus_Fls_On$
    
    $MemIf_Getstatus_Eep_On$    
</MEMIF-GETSTATUS-DET-ON>
<MEMIF-GETSTATUS-DET-OFF>
    $MemIf_Getstatus_Fls_On$
    
    $MemIf_Getstatus_Eep_On$
</MEMIF-GETSTATUS-DET-OFF>
    
<MEMIF-GETSTATUS-FLS-ON>
    /* Check the passed DeviceIndex and call the underlying
      GetStatus API as applicable */
    if(DeviceIndex == MEMIF_FLS_DRIVER_INDEX)
    {
      LddStatusType = Fee_GetStatus();
    }
</MEMIF-GETSTATUS-FLS-ON>
<MEMIF-GETSTATUS-EEP-ON>
    /* Check the passed DeviceIndex and call the underlying
      GetStatus API as applicable */
    if(DeviceIndex == MEMIF_EEP_DRIVER_INDEX)
    {
      LddStatusType = Ea_GetStatus();
    }
</MEMIF-GETSTATUS-EEP-ON>

<MEMIF-GETSTATUS-BROAD-FLS-ON>

    /* Invoke the GetStatus API for Fee devices. */
    LddStatusType = Fee_GetStatus();

</MEMIF-GETSTATUS-BROAD-FLS-ON>
<MEMIF-GETSTATUS-BROAD-EEP-ON>

    /* Invoke the GetStatus API for Ea devices. */
    LddStatusType = Ea_GetStatus();

</MEMIF-GETSTATUS-BROAD-EEP-ON>
<MEMIF-GETSTATUS-BROAD-FEE-EEP-ON>

    MemIf_StatusType LddStatusTypeEa;
    MemIf_StatusType LddStatusTypeFee;
  
    /* Invoke the GetStatus API for Ea and Fee devices. */
    LddStatusTypeEa = Ea_GetStatus();
    LddStatusTypeFee = Fee_GetStatus();

    if((LddStatusTypeEa == MEMIF_IDLE) &amp;&amp; (LddStatusTypeFee == MEMIF_IDLE))
    {
      LddStatusType = MEMIF_IDLE;
    }
    /* One of the devices has returned MEMIF_UNINIT */
    else if((LddStatusTypeEa == MEMIF_UNINIT) ||
      (LddStatusTypeFee == MEMIF_UNINIT))
    {
      LddStatusType = MEMIF_UNINIT;
    }
    /* If no device has returned MEMIF_UNINIT, check if one of the devices
       returned MEMIF_BUSY */
    else if((LddStatusTypeEa == MEMIF_BUSY) ||
      (LddStatusTypeFee == MEMIF_BUSY))
    {
      LddStatusType = MEMIF_BUSY;
    }
    /* No device has returned MEMIF_BUSY or MEMIF_UNINIT.
       Check if atleast one device returns MEMIF_BUSY_INTERNAL */
    else if((LddStatusTypeEa == MEMIF_BUSY_INTERNAL) ||
      (LddStatusTypeFee == MEMIF_BUSY_INTERNAL))
    {
      LddStatusType = MEMIF_BUSY_INTERNAL;
    }
    else
    {
      /* No action required */
    }

</MEMIF-GETSTATUS-BROAD-FEE-EEP-ON>
    
 </GENERAL-INFORMATION>
<!--
################################################################################
# Revision History:                                                            #
# Version No.  Last modified  Author           Description                     #
################################################################################
# 1.3.4        25-May-2016    CY Song          Redmine #4990                   #
# 1.3.3        05-Apr-2016    CY Song          Redmine #4567                   #
# 1.3.2        11-Mar-2015    CY Song          Update Support Tool Version     #
# 1.3.1        23-Jan-2015    CY Song          Update Support Tool Version     #
# 1.0.4        26-June-2013   CY Song          As CR 142, Add precompile option#
#                                              MEMIF_FLS_DRIVER_INDEX,         #
#                                              MEMIF_EEP_DRIVER_INDEX          #
#                                              Update for Library              #
#                                              Modify MemIf.c template         #
# 1.0.0        07-Feb-2013    CY Song          Initial version.                #
################################################################################
-->
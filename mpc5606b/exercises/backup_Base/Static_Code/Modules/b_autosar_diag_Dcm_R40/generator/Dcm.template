<?xml version="1.0" encoding="UTF-8"?>
<GENERAL-INFORMATION>

  <!-- Template version -->
  <TEMPLATE-VERSION>1.0.8</TEMPLATE-VERSION>
  
  <!-- Generation Tool versions which are supported by this Template -->
  <SUPPORTED-TOOL-VERSIONS>1.6.0 1.7.0 1.7.1 1.7.2</SUPPORTED-TOOL-VERSIONS>

  <!-- Parser Details for Config Module -->
  <PARSER-DETAILS>
    <!-- Module under test -->
    <MODULE-UNDER-TEST>DCM</MODULE-UNDER-TEST>
    <!-- Modules required MDT File information -->
    <MODULE-UNDER-TEST-MDT>DCM</MODULE-UNDER-TEST-MDT>
    <!-- Mandatory Modules required to Parse Dcm -->
    <MANDATORY-MODULES>DCM PDUR</MANDATORY-MODULES>
    <!-- All the Modules to be Parsed -->
    <MODULES>DCM PDUR DEM NVM BSWMDT COMM SWC</MODULES>
    <!-- CommandLine Options -->
    <CMDLINEOPTIONS>BEND LEND 8</CMDLINEOPTIONS>
    <!-- CommandLine Options -->
    <CMDLINEOPTIONS></CMDLINEOPTIONS>
    <!-- Containers which contain reference parameters -->
    <REFERENCE-CONTAINER-ARRAY>DsdService DsdSubService DslProtocolRow DslMainConnection
    DslPeriodicConnection DspDid Data DspControl DspRead Signal WriteMemoryRangeInfo ReadMemoryRangeInfo 
    DspWrite PidService02 DspRoutine DspRoutineAuthorization DspTestResultObdMidTids SourceDid MemoryRangeDDid
    ComControlSetting ControlDTCSetting BswRule DspDidRange DslProtocolRx ComControlSpecificChannel</REFERENCE-CONTAINER-ARRAY>
    <FOR-VERSION-CHECK>
      <VERSIONS>4.0.3</VERSIONS>
      <MESSAGE-TYPE>INF</MESSAGE-TYPE>
    </FOR-VERSION-CHECK>
    <SYMREF-PARAM>
      <ENTRY NAME = 'DsdService' DETAILS = 'SidTabSecLevelRef SidTabSessionLevelRef SidTabModeRuleRef'></ENTRY>
      <ENTRY NAME = 'SourceDid' DETAILS = 'SourceDidSecurityLevelRef SourceDidSessionRef'></ENTRY>
      <ENTRY NAME = 'MemoryRangeDDid' DETAILS = 'MemoryRangeDDDidSecurity MemoryRangeDDDidSession'></ENTRY>
      <ENTRY NAME = 'DsdSubService'    DETAILS = 'SubServiceSecurityRef SubServiceSessionRef SubServiceModeRuleRef'></ENTRY>
      <ENTRY NAME = 'DslProtocolRow'    DETAILS = 'ProtocolRxBufferId ProtocolSIDTable ProtocolTxBufferId SessionRef'></ENTRY>
      <ENTRY NAME = 'DspDid' DETAILS = 'DidRef DidInfoRef'></ENTRY>
      <ENTRY NAME = 'DspDidRange' DETAILS = 'RangeInfoRef'></ENTRY>
      <ENTRY NAME = 'Signal'    DETAILS = 'DataRef'></ENTRY>
      <ENTRY NAME = 'Data' DETAILS = 'DataInfoRef DataBlockIdRef'></ENTRY>
      <ENTRY NAME = 'DspRoe' DETAILS = 'RoeBlockIdRef'></ENTRY>
      <ENTRY NAME = 'DspControl'    DETAILS = 'ControlSecurityLevelRef ControlSessionRef ControlModeRuleRef'></ENTRY>
      <ENTRY NAME = 'DspRead'    DETAILS = 'ReadSecurityLevelRef ReadSessionRef ReadModeRuleRef'></ENTRY>
      <ENTRY NAME = 'DspWrite' DETAILS = 'WriteSecurityLevelRef WriteSessionRef WriteModeRuleRef'></ENTRY>
      <ENTRY NAME = 'DspRoutineAuthorization'    DETAILS = 'RoutineSecurityLevelRef RoutineSessionRef RoutineModeRuleRef'></ENTRY>
      <ENTRY NAME = 'DspTestResultObdMidTids'    DETAILS = 'TestResultObdmidTidRef'></ENTRY>
      <ENTRY NAME = 'WriteMemoryRangeInfo'    DETAILS = 'WriteMemoryRangeSecurityRef'></ENTRY>
      <ENTRY NAME = 'ReadMemoryRangeInfo' DETAILS = 'ReadMemoryRangeSecurityRef'></ENTRY>
      <ENTRY NAME = 'DspRoutine' DETAILS = 'RoutineInfoRef'></ENTRY>
      <ENTRY NAME = 'DslMainConnection' DETAILS = 'PeriodicTransmissionConRef ROEConnectionRef'></ENTRY>
      <ENTRY NAME = 'DslPeriodicConnection' DETAILS = 'PeriodicTxBufferRef'></ENTRY>
      <ENTRY NAME = 'PidService02' DETAILS = 'PidDataDemRef'></ENTRY>
      <ENTRY NAME = 'ComControlSetting' DETAILS = 'ComReEnabledModeRuleRef'></ENTRY>
      <ENTRY NAME = 'ControlDTCSetting' DETAILS = 'ControlDTCReEnableModeRuleRef'></ENTRY>   
      <ENTRY NAME = 'BswRule' DETAILS = 'ArgumentRef'></ENTRY>  
      <ENTRY NAME = 'DslProtocolRx' DETAILS = 'ProtocolRxComMChannelRef'></ENTRY>
      <ENTRY NAME = 'ComControlSpecificChannel' DETAILS = 'SpecificComMChannelRef'></ENTRY>  
    </SYMREF-PARAM>
    <REFERENCES>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'PeriodicTransmissionConRef' DESTINATION-CONTAINER = 'DslPeriodicTransmission' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ROEConnectionRef' DESTINATION-CONTAINER = 'DslResponseOnEvent' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SidTabSecLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SidTabSessionLevelRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SidTabModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SubServiceSecurityRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SubServiceSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SubServiceModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>      
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ProtocolRxBufferId' DESTINATION-CONTAINER = 'DslBuffer' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ProtocolSIDTable' DESTINATION-CONTAINER = 'DsdServiceIdTable' DESTINATION-PARAMETER = 'SidTabId'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ProtocolTxBufferId' DESTINATION-CONTAINER = 'DslBuffer' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'PeriodicTxBufferRef' DESTINATION-CONTAINER = 'DslBuffer' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SessionRef' DESTINATION-CONTAINER = 'DspSession' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DidRef' DESTINATION-CONTAINER = 'DspDid' DESTINATION-PARAMETER = 'DidIdentifier'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DidInfoRef' DESTINATION-CONTAINER = 'DspDidInfo' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RangeInfoRef' DESTINATION-CONTAINER = 'DspDidInfo' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DataRef' DESTINATION-CONTAINER = 'Data' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DataInfoRef' DESTINATION-CONTAINER = 'DataInfo' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'DataBlockIdRef' DESTINATION-CONTAINER = 'NvMBlockDescriptor' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'PidDataDemRef' DESTINATION-CONTAINER = 'DemPidDataElement' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ControlModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>      
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ControlSecurityLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ControlSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ReadModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>      
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ReadSecurityLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ReadSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'WriteModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>      
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SourceDidSecurityLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SourceDidSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'MemoryRangeDDDidSecurity' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'MemoryRangeDDDidSession' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'WriteSecurityLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'WriteSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RoutineModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RoutineSecurityLevelRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RoutineSessionRef' DESTINATION-CONTAINER = 'DspSessionRow' DESTINATION-PARAMETER = 'SessionLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'WriteMemoryRangeSecurityRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'TestResultObdmidTidRef' DESTINATION-CONTAINER = 'DspTestResultTid' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ReadMemoryRangeSecurityRef' DESTINATION-CONTAINER = 'DspSecurityRow' DESTINATION-PARAMETER = 'SecurityLevel'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RoutineInfoRef' DESTINATION-CONTAINER = 'DspRoutineInfo' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ComReEnabledModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ControlDTCReEnableModeRuleRef' DESTINATION-CONTAINER = 'ModeRule' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ArgumentRef' DESTINATION-CONTAINER = 'ModeRule|ModeCondition' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ProtocolTxPduRef' DESTINATION-CONTAINER = 'DslProtocolTx' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'ProtocolRxComMChannelRef' DESTINATION-CONTAINER = 'ComMChannel' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'SpecificComMChannelRef' DESTINATION-CONTAINER = 'ComMChannel' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
      <REFERENCE-PARAM-DETAIL REFERENCE-PARAM-NAME = 'RoeBlockIdRef' DESTINATION-CONTAINER = 'NvMBlockDescriptor' DESTINATION-PARAMETER = 'ShortName'></REFERENCE-PARAM-DETAIL>
    </REFERENCES>
    
    <PARAM-MULTIPLICITY>
      <ENTRY>ArgumentRef</ENTRY>
      <ENTRY>DidRef</ENTRY>
      <ENTRY>SidTabSecLevelRef</ENTRY>
      <ENTRY>SidTabSessionLevelRef</ENTRY>
      <ENTRY>SubServiceSecurityRef</ENTRY>
      <ENTRY>SubServiceSessionRef</ENTRY>
      <ENTRY>ControlSecurityLevelRef</ENTRY>
      <ENTRY>ControlSessionRef</ENTRY>
      <ENTRY>ReadSecurityLevelRef</ENTRY>
      <ENTRY>ReadSessionRef</ENTRY>
      <ENTRY>WriteSecurityLevelRef</ENTRY>
      <ENTRY>WriteSessionRef</ENTRY>
      <ENTRY>RoutineSecurityLevelRef</ENTRY>
      <ENTRY>RoutineSessionRef</ENTRY>
      <ENTRY>SourceDidSecurityLevelRef</ENTRY>
      <ENTRY>SourceDidSessionRef</ENTRY>
      <ENTRY>MemoryRangeDDDidSecurity</ENTRY>
      <ENTRY>MemoryRangeDDDidSession</ENTRY>
      <ENTRY>DcmDspSupportedAddressAndLengthFormatIdentifier</ENTRY>
      <ENTRY>TestResultObdmidTidRef</ENTRY>
      <ENTRY>HeaderFileInclusion</ENTRY>      
    </PARAM-MULTIPLICITY>
    <PARAMETER-COPY>
      <ENTRY NAME = 'ArgumentRef'         DETAILS = 'ArgRef'></ENTRY>
    </PARAMETER-COPY>
    <REF-MUL>
      <ENTRY>PeriodicTxPduRef</ENTRY>
      <ENTRY>PeriodicTransmissionConRef</ENTRY>
      <ENTRY>PeriodicTxBufferRef</ENTRY>
      <ENTRY>ROEConnectionRef</ENTRY>
      <ENTRY>RoeTxPduRef</ENTRY>
      <ENTRY>SidTabSecLevelRef</ENTRY>
      <ENTRY>SidTabSessionLevelRef</ENTRY>
      <ENTRY>SidTabModeRuleRef</ENTRY>
      <ENTRY>SubServiceSecurityRef</ENTRY>
      <ENTRY>SubServiceSessionRef</ENTRY>
      <ENTRY>SubServiceModeRuleRef</ENTRY>
      <ENTRY>SessionRef</ENTRY>
      <ENTRY>DidRef</ENTRY>
      <ENTRY>DataInfoRef</ENTRY>
      <ENTRY>DataBlockIdRef</ENTRY>
      <ENTRY>PidDataDemRef</ENTRY>
      <ENTRY>ControlModeRuleRef</ENTRY>
      <ENTRY>ControlSecurityLevelRef</ENTRY>
      <ENTRY>ControlSessionRef</ENTRY>
      <ENTRY>ReadModeRuleRef</ENTRY>
      <ENTRY>ReadSecurityLevelRef</ENTRY>
      <ENTRY>ReadSessionRef</ENTRY>
      <ENTRY>WriteModeRuleRef</ENTRY>
      <ENTRY>WriteSecurityLevelRef</ENTRY>
      <ENTRY>WriteSessionRef</ENTRY>
      <ENTRY>WriteMemoryRangeSecurityRef</ENTRY>
      <ENTRY>ReadMemoryRangeSecurityRef</ENTRY>
      <ENTRY>MemoryRangeDDDidSecurity</ENTRY>
      <ENTRY>MemoryRangeDDDidSession</ENTRY>
      <ENTRY>RoutineModeRuleRef</ENTRY>
      <ENTRY>RoutineSecurityLevelRef</ENTRY>
      <ENTRY>RoutineSessionRef</ENTRY>
      <ENTRY>SourceDidSecurityLevelRef</ENTRY>
      <ENTRY>SourceDidSessionRef</ENTRY>
      <ENTRY>ComReEnabledModeRuleRef</ENTRY>
      <ENTRY>ControlDTCReEnableModeRuleRef</ENTRY>
      <ENTRY>ArgumentRef</ENTRY>
      <ENTRY>TestResultObdmidTidRef</ENTRY>
      <ENTRY>SpecificComMChannelRef</ENTRY>
    </REF-MUL>
  </PARSER-DETAILS>
  
  <HANDLE-ID-DETAILS>
    <HANDLE-ENTRY CONTAINER-NAME = 'DslProtocolRow'     PARAMETER-NAME = 'ProtocolId' TYPE-CAST = 'Dcm_ProtocolType'></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DspSecurityRow'   PARAMETER-NAME = 'SecurityLevel' TYPE-CAST = 'Dcm_SecLevelType' ></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DspSessionRow'   PARAMETER-NAME = 'SessionLevel' TYPE-CAST = 'Dcm_SesCtrlType' ></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DslProtocolRx'   PARAMETER-NAME = 'ProtocolRxPduId' TYPE-CAST = 'PduIdType' ></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DslPeriodicConnection'   PARAMETER-NAME = 'PeriodicTxConfirmationPduId' TYPE-CAST = 'PduIdType' ></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DslProtocolTx'   PARAMETER-NAME = 'ConfirmationPduId' TYPE-CAST = 'PduIdType' ></HANDLE-ENTRY>
    <HANDLE-ENTRY CONTAINER-NAME = 'DslResponseOnEvent'   PARAMETER-NAME = 'RoeTxConfirmationPduId' TYPE-CAST = 'PduIdType' ></HANDLE-ENTRY>
  </HANDLE-ID-DETAILS>
  <SWC-DETAILS>
     <SWC-TAG ORIGINAL-NAME = 'VENDOR-ID'          MAP-NAME = 'VendorId'></SWC-TAG>
    <SWC-TAG ORIGINAL-NAME = 'VENDOR-API-INFIX'          MAP-NAME = 'VendorApiInfix'></SWC-TAG>
    <SWC-TAG ORIGINAL-NAME = 'MODULE-ID'          MAP-NAME = 'ModuleId'></SWC-TAG>
  </SWC-DETAILS>
  <DECIMAL-FIELDS></DECIMAL-FIELDS>

  <!-- Map Names -->
  <MAP-NAMES>
    <CONTAINER-DETAILS>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmConfigSet' MAP-NAME = 'ConfigSet'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDsdServiceTable' MAP-NAME = 'DsdServiceIdTable'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabId' MAP-NAME = 'SidTabId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDsdService' MAP-NAME = 'DsdService'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabFnc' MAP-NAME = 'SidTabFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabServiceId' MAP-NAME = 'SidTabServiceId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabSubfuncAvail' MAP-NAME = 'SidTabSubfuncAvail'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabSecurityLevelRef' MAP-NAME = 'SidTabSecLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabSessionLevelRef' MAP-NAME = 'SidTabSessionLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSidTabModeRuleRef' MAP-NAME = 'SidTabModeRuleRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDsdSubService' MAP-NAME = 'DsdSubService'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSubServiceId' MAP-NAME = 'SubServiceId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSubServiceSecurityLevelRef' MAP-NAME = 'SubServiceSecurityRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSubServiceSessionLevelRef' MAP-NAME = 'SubServiceSessionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSubServiceModeRuleRef' MAP-NAME = 'SubServiceModeRuleRef'></PARAMETER-DETAIL>
         <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDsdSubServiceFnc' MAP-NAME = 'SubServiceFnc'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslBuffer' MAP-NAME = 'DslBuffer'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslBufferSize' MAP-NAME = 'BufferSize'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslCallbackDCMRequestService' MAP-NAME = 'CallBackDCMReqServ'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslDiagResp' MAP-NAME = 'DslDiagResp'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslDiagRespMaxNumRespPend' MAP-NAME = 'MaxNumRespPend'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslDiagRespOnSecondDeclinedRequest' MAP-NAME = 'SecondDeclinedRequest'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRow' MAP-NAME = 'DslProtocolRow'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolID' MAP-NAME = 'ProtocolId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolIsParallelExecutab' MAP-NAME = 'ProtocolIsParallelExecutab'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolPreemptTimeout' MAP-NAME = 'ProtocolPreemptTimeout'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolPriority' MAP-NAME = 'ProtocolPriority'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolTransType' MAP-NAME = 'ProtocoltransType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmSendRespPendOnTransToBoot' MAP-NAME = 'TransToBoot'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmTimStrP2ServerAdjust' MAP-NAME = 'TimStrP2ServerAdjust'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmTimStrP2StarServerAdjust' MAP-NAME = 'TimStrP2StarServerAdjust'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxBufferID' MAP-NAME = 'ProtocolRxBufferId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolSIDTable' MAP-NAME = 'ProtocolSIDTable'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolTimeLimit' MAP-NAME = 'ProtocolTimeLimit'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolTxBufferID' MAP-NAME = 'ProtocolTxBufferId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolSessionRef' MAP-NAME = 'SessionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolEndiannessConvEnabled' MAP-NAME = 'EndiannessConvEnabled'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslConnection' MAP-NAME = 'DslConnection'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslMainConnection' MAP-NAME = 'DslMainConnection'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicTranmissionConRef' MAP-NAME = 'PeriodicTransmissionConRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslROEConnectionRef' MAP-NAME = 'ROEConnectionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxTesterSourceAddr' MAP-NAME = 'RxTesterSource'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRx' MAP-NAME = 'DslProtocolRx'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxAddrType' MAP-NAME = 'ProtocolRxAddrType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxChannelId' MAP-NAME = 'RxChannelId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxTesterSourceAddr' MAP-NAME = 'RxTesterSource'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxPduRef' MAP-NAME = 'ProtocolRxPduRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxComMChannelRef' MAP-NAME = 'ProtocolRxComMChannelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolRxPduId' MAP-NAME = 'ProtocolRxPduId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolTx' MAP-NAME = 'DslProtocolTx'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslTxConfirmationPduId' MAP-NAME = 'ConfirmationPduId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslProtocolTxPduRef' MAP-NAME = 'ProtocolTxPduRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicTransmission' MAP-NAME = 'DslPeriodicTransmission'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicConnection' MAP-NAME = 'DslPeriodicConnection'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicMaxDidNbr' MAP-NAME = 'MaxDidNbr'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicTxConfirmationPduId' MAP-NAME = 'PeriodicTxConfirmationPduId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicTxPduRef' MAP-NAME = 'PeriodicTxPduRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslPeriodicTxBufferRef' MAP-NAME = 'PeriodicTxBufferRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslResponseOnEvent' MAP-NAME = 'DslResponseOnEvent'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslRoeTxConfirmationPduId' MAP-NAME = 'RoeTxConfirmationPduId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDslRoeTxPduRef' MAP-NAME = 'RoeTxPduRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslServiceRequestManufacturerNotification' MAP-NAME = 'ManufacturerIndication'>
       </CONTAINER-DETAIL>  
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDslServiceRequestSupplierNotification' MAP-NAME = 'SupplierIndication'>
      </CONTAINER-DETAIL> 
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDsp' MAP-NAME = 'Dsp'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPowerDownTime' MAP-NAME = 'PowerDownTime'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMaxDidToRead' MAP-NAME = 'MaxDidToRead'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMaxPeriodicDidScheduler' MAP-NAME = 'MaxPeriodicScheduler'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMaxPeriodicDidToRead' MAP-NAME = 'MaxPeriodicDidToRead'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDDDIDcheckPerSourceDID' MAP-NAME = 'DDDIDcheckPerSourceDID'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPeriodicTransmission' MAP-NAME = 'DspPeriodicTransmission'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPeriodicTransmissionSlowRate' MAP-NAME = 'PeriodicTransmissionSlowRate'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPeriodicTransmissionMediumRate' MAP-NAME = 'PeriodicTransmissionMediumRate'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPeriodicTransmissionFastRate' MAP-NAME = 'PeriodicTransmissionFastRate'></PARAMETER-DETAIL>
    <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspResponseType' MAP-NAME = 'ResponseType'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDid' MAP-NAME = 'DspDid'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidIdentifier' MAP-NAME = 'DidIdentifier'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRoeQueueEnabled' MAP-NAME = 'RoeQueueEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidUsed' MAP-NAME = 'DidUsed'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidInfoRef' MAP-NAME = 'DidInfoRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRef' MAP-NAME = 'DidRef'></PARAMETER-DETAIL>
    <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidPreConfigured' MAP-NAME = 'PreConfigured'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidExtRoe' MAP-NAME = 'ExtRoe'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRoeActivateFnc' MAP-NAME = 'RoeActivateFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRoeEventId' MAP-NAME = 'RoeEventId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidSignal' MAP-NAME = 'Signal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidDataPos' MAP-NAME = 'DataPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidDataRef' MAP-NAME = 'DataRef'></PARAMETER-DETAIL>
         <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidSignalEndianness' MAP-NAME = 'SignalEndianness'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspData' MAP-NAME = 'Data'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataConditionCheckReadFnc' MAP-NAME = 'DataConditionCheckreadFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataEcuSignal' MAP-NAME = 'DataEcuSignal'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataFreezeCurrentStateFnc' MAP-NAME = 'DataFreezeCurrentStateFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataGetScalingInfoFnc' MAP-NAME = 'DataGetScalingInfoFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataReadDataLengthFnc' MAP-NAME = 'DataReadDataLengthFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataReadEcuSignal' MAP-NAME = 'DataReadEcuSignal'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataReadFnc' MAP-NAME = 'DataReadFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataResetToDefaultFnc' MAP-NAME = 'DataResetToDefaultFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataReturnControlToEcuFnc' MAP-NAME = 'DataReturnControlToEcuFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataShortTermAdjustmentFnc' MAP-NAME = 'DataShortTermAdjustmentFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataSize' MAP-NAME = 'DataSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataType' MAP-NAME = 'DataType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataUsePort' MAP-NAME = 'DataUsePort'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataWriteFnc' MAP-NAME = 'DataWriteFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataBlockIdRef' MAP-NAME = 'DataBlockIdRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataInfoRef' MAP-NAME = 'DataInfoRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidRange' MAP-NAME = 'DspDidRange'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeHasGaps' MAP-NAME = 'DidRangeHasGaps'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeUsePort' MAP-NAME = 'RangeUsePort'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeIsDidAvailableFnc' MAP-NAME = 'RangeIsDidAvailableFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeReadDidFnc' MAP-NAME = 'DidRangeReadDidFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeWriteDidFnc' MAP-NAME = 'RangeWriteDidFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeIdentifierLowerLimit' MAP-NAME = 'RangeIdentifierLowerLimit'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeIdentifierUpperLimit' MAP-NAME = 'RangeIdentifierUpperLimit'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataResetToDefaultFnc' MAP-NAME = 'DataResetToDefaultFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeMaxDataLength' MAP-NAME = 'RangeMaxDataLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidRangeInfoRef' MAP-NAME = 'RangeInfoRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDataInfo' MAP-NAME = 'DataInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataFixedLength' MAP-NAME = 'DataFixedLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDataScalingInfoSize' MAP-NAME = 'DataScalingInfoSize'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidInfo' MAP-NAME = 'DspDidInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidDynamicallyDefined' MAP-NAME = 'DynamicallyDefined'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidControl' MAP-NAME = 'DspControl'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidControlModeRuleRef' MAP-NAME = 'ControlModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidControlSecurityLevelRef' MAP-NAME = 'ControlSecurityLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidControlSessionRef' MAP-NAME = 'ControlSessionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidFreezeCurrentState' MAP-NAME = 'FreezeCurrentState'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidResetToDefault' MAP-NAME = 'ResetToDefault'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidReturnControlToEcu' MAP-NAME = 'ReturnControlToEcu'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidShortTermAdjustment' MAP-NAME = 'ShortTermAdjustment'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidRead' MAP-NAME = 'DspRead'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidReadModeRuleRef' MAP-NAME = 'ReadModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidReadSecurityLevelRef' MAP-NAME = 'ReadSecurityLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidReadSessionRef' MAP-NAME = 'ReadSessionRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDDDIDMaxElements' MAP-NAME = 'DDDIDMaxElements'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspDidWrite' MAP-NAME = 'DspWrite'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidWriteModeRuleRef' MAP-NAME = 'WriteModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidWriteSecurityLevelRef' MAP-NAME = 'WriteSecurityLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspDidWriteSessionRef' MAP-NAME = 'WriteSessionRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspSourceDid' MAP-NAME = 'SourceDid'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSourceDidSecurityLevelRef' MAP-NAME = 'SourceDidSecurityLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSourceDidSessionRef' MAP-NAME = 'SourceDidSessionRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspMemoryRangeDDDid' MAP-NAME = 'MemoryRangeDDid'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMemoryRangeDDDidSecurityLevelRef' MAP-NAME = 'MemoryRangeDDDidSecurity'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMemoryRangeDDDidSessionRef' MAP-NAME = 'MemoryRangeDDDidSession'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspMemory' MAP-NAME = 'Memory'>
      <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspUseMemoryId' MAP-NAME = 'UseMemoryId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspMemoryIdInfo' MAP-NAME = 'MemoryIdInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspMemoryIdValue' MAP-NAME = 'MemoryIdValue'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspWriteMemoryRangeInfo' MAP-NAME = 'WriteMemoryRangeInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspWriteMemoryRangeHigh' MAP-NAME = 'WriteMemoryRangeHigh'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspWriteMemoryRangeLow' MAP-NAME = 'WriteMemoryRangeLow'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspWriteMemoryRangeModeRuleRef' MAP-NAME = 'WriteMemoryRangeModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspWriteMemoryRangeSecurityLevelRef' MAP-NAME = 'WriteMemoryRangeSecurityRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspReadMemoryRangeInfo' MAP-NAME = 'ReadMemoryRangeInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspReadMemoryRangeHigh' MAP-NAME = 'ReadMemoryRangeHigh'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspReadMemoryRangeLow' MAP-NAME = 'ReadMemoryRangeLow'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspReadMemoryRangeModeRuleRef' MAP-NAME = 'ReadMemoryRangeModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspReadMemoryRangeSecurityLevelRef' MAP-NAME = 'ReadMemoryRangeSecurityRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspAddressAndLengthFormatIdentifier' MAP-NAME = 'AddressLength'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSupportedAddressAndLengthFormatIdentifier ' MAP-NAME = 'DcmDspSupportedAddressAndLengthFormatIdentifier'></PARAMETER-DETAIL>
        </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoe' MAP-NAME = 'DspRoe'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeBufSize' MAP-NAME = 'RoeBufSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeInitOnDSC' MAP-NAME = 'InitOnDSC'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeInterMessageTime' MAP-NAME = 'InterMessageTime'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeMaxNumberOfRetry' MAP-NAME = 'RoeMaxNumberOfRetry'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeMaxEventLength' MAP-NAME = 'MaxEventLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeQueueEnabled' MAP-NAME = 'RoeQueueEnab'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeMaxQueueLength' MAP-NAME = 'MaxQueueLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeStopFnc' MAP-NAME = 'RoeStopFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeInitFnc' MAP-NAME = 'RoeInitFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoeBlockIdRef' MAP-NAME = 'RoeBlockIdRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRequestControl' MAP-NAME = 'DspRequestControl'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestControlInBufferSize' MAP-NAME = 'RequestControlInBufferSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestControlOutBufferSize' MAP-NAME = 'DcmDspRequestControlOutBufferSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestControlTestId' MAP-NAME = 'RequestControlTestId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestControlFnc' MAP-NAME = 'RequestControlFnc'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutine' MAP-NAME = 'DspRoutine'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestResultsRoutineFnc' MAP-NAME = 'RequestResultsRoutineFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineIdentifier' MAP-NAME = 'RoutineIdentifier'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineUsePort' MAP-NAME = 'RoutineUsePort'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineFixedLength' MAP-NAME = 'RoutineFixedLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineUsed' MAP-NAME = 'RoutineUsed'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspStartRoutineFnc' MAP-NAME = 'StartRoutineFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspStopRoutineFnc' MAP-NAME = 'StopRoutineFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineInfoRef' MAP-NAME = 'RoutineInfoRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRequestResultsRoutineSupported' MAP-NAME = 'RequestResultsRoutineSupported'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspStopRoutineSupported' MAP-NAME = 'StopRoutineSupported'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineInfo' MAP-NAME = 'DspRoutineInfo'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineAuthorization' MAP-NAME = 'DspRoutineAuthorization'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineModeRuleRef' MAP-NAME = 'RoutineModeRuleRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSecurityLevelRef' MAP-NAME = 'RoutineSecurityLevelRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSessionRef' MAP-NAME = 'RoutineSessionRef'></PARAMETER-DETAIL>
                
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopIn' MAP-NAME = 'RoutineStopIn'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopInSignal' MAP-NAME = 'RoutineStopInSignal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalLength' MAP-NAME = 'RoutineSignalLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalPos' MAP-NAME = 'RoutineSignalPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalType' MAP-NAME = 'RoutineSignalType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopInEndianness' MAP-NAME = 'RoutineStopInEndianness'></PARAMETER-DETAIL>
        
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopOut' MAP-NAME = 'RoutineStopOut'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopOutSignal' MAP-NAME = 'RoutineStopOutSignal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalLength' MAP-NAME = 'RoutineSignalLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalPos' MAP-NAME = 'RoutineSignalPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalType' MAP-NAME = 'RoutineSignalType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStopOutEndianness' MAP-NAME = 'RoutineStopOutEndianness'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspStartRoutineIn' MAP-NAME = 'StartRoutineIn'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspStartRoutineInSignal' MAP-NAME = 'StartRoutineInSignal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalLength' MAP-NAME = 'RoutineSignalLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalPos' MAP-NAME = 'RoutineSignalPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalType' MAP-NAME = 'RoutineSignalType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStartInEndianness' MAP-NAME = 'RoutineStartInEndianness'></PARAMETER-DETAIL>
    
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspStartRoutineOut' MAP-NAME = 'StartRoutineOut'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspStartRoutineOutSignal' MAP-NAME = 'StartRoutineOutSignal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalLength' MAP-NAME = 'RoutineSignalLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalPos' MAP-NAME = 'RoutineSignalPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalType' MAP-NAME = 'RoutineSignalType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineStartOutEndianness' MAP-NAME = 'RoutineStartOutEndianness'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineRequestResOut' MAP-NAME = 'RoutineRequestResOut'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineRequestResOutSignal' MAP-NAME = 'RoutineRequestResOutSignal'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalLength' MAP-NAME = 'RoutineSignalLength'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalPos' MAP-NAME = 'RoutineSignalPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineSignalType' MAP-NAME = 'RoutineSignalType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspRoutineRequestEndianness' MAP-NAME = 'RoutineRequestEndianness'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPid' MAP-NAME = 'DspPid'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidIdentifier' MAP-NAME = 'PidIdentifier'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidSize' MAP-NAME = 'PidSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidService' MAP-NAME = 'PidService'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidUsed' MAP-NAME = 'PidUsed'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPidData' MAP-NAME = 'DspPidData'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataPos' MAP-NAME = 'PidDataPos'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataSize' MAP-NAME = 'PidDataSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataType' MAP-NAME = 'PidDataType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidSignalEndianness' MAP-NAME = 'PidSignalEndianness'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataSupportInfo' MAP-NAME = 'PidDataSupportInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataSupportInfoBit' MAP-NAME = 'PidDataSupportInfoBit'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataSupportInfoRef' MAP-NAME = 'PidDataSupportInfoRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPidService01' MAP-NAME = 'PidService01'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataReadFnc' MAP-NAME = 'PidDataReadFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataUsePort' MAP-NAME = 'PidDataUsePort'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPidService02' MAP-NAME = 'PidService02'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidDataDemRef' MAP-NAME = 'PidDataDemRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspPidSupportInfo' MAP-NAME = 'PidSupportInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidSupportInfoLen' MAP-NAME = 'PidSupportInfoLen'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspPidSupportInfoPos' MAP-NAME = 'PidSupportInfoPos'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityRow' MAP-NAME = 'DspSecurityRow'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityADRSize' MAP-NAME = 'SecurityADRSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityDelayTime' MAP-NAME = 'SecurityDelayTime'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityDelayTimeOnBoot' MAP-NAME = 'SecurityDelayTimeOnBoot'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityKeySize' MAP-NAME = 'SecurityKeySize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityLevel' MAP-NAME = 'SecurityLevel'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityNumAttDelay' MAP-NAME = 'SecurityNumAttDelay'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecuritySeedSize' MAP-NAME = 'SecuritySeedSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityGetSeedFnc' MAP-NAME = 'GetSeedFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityGetCompareFnc' MAP-NAME = 'GetCompareFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSecurityUsePort' MAP-NAME = 'SecurityUsePort'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspSession' MAP-NAME = 'DspSession'>
       </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspSessionRow' MAP-NAME = 'DspSessionRow'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSessionLevel' MAP-NAME = 'SessionLevel'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSessionP2ServerMax' MAP-NAME = 'SessionP2ServerMax'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSessionP2StarServerMax' MAP-NAME = 'SessionP2StarServerMax'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSessionForBoot' MAP-NAME = 'SessionBoot'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultObdmidTid' MAP-NAME = 'DspTestResultObdMidTid'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultObdmid' MAP-NAME = 'TestResultObdmid'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultObdmidTids' MAP-NAME = 'DspTestResultObdMidTids'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultObdmidTidUaSid' MAP-NAME = 'TestResultObdmidTidUaSid'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultObdmidTidRef' MAP-NAME = 'TestResultObdmidTidRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultTid' MAP-NAME = 'DspTestResultTid'>
       <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspObdGetDTRFnc' MAP-NAME = 'GetDTRFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspTestResultTestId' MAP-NAME = 'TestResultTestId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfo' MAP-NAME = 'DspVehInfo'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoInfoType' MAP-NAME = 'VehInfoInfoType'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoData' MAP-NAME = 'DspVehInfoData'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoDataOrder' MAP-NAME = 'VehInfoDataOrder'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoDataReadFnc' MAP-NAME = 'VehInfoDataReadFnc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoDataSize' MAP-NAME = 'VehInfoDataSize'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspVehInfoDataUsePort' MAP-NAME = 'VehInfoDataUsePort'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmGeneral' MAP-NAME = 'General'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDevErrorDetect' MAP-NAME = 'DevErrorDetect'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmEnableResponseFromMainFunc' MAP-NAME = 'EnableResponseFromMainFunc'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmRespondAllRequest' MAP-NAME = 'RespondAllRequest'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmTaskTime' MAP-NAME = 'TaskTime'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmVersionInfoApi' MAP-NAME = 'VersionInfoApi'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmRequestManufacturerNotificationEnabled' MAP-NAME = 'ManufacturerEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmRequestSupplierNotificationEnabled' MAP-NAME = 'SupplierEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmStandardSupport' MAP-NAME = 'StandardSupport'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmAutronFblUsed' MAP-NAME = 'AutronFblUsed'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmHeaderFileInclusion' MAP-NAME = 'HeaderFileInclusion'></PARAMETER-DETAIL>	
       </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmPageBufferCfg' MAP-NAME = 'PageBufferCfg'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmPagedBufferEnabled' MAP-NAME = 'PagedBufferEnabled'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmPagedBufferTimeout' MAP-NAME = 'PagedBufferTimeout'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspComControl' MAP-NAME = 'ComControl'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspComControlAllChannel' MAP-NAME = 'ComControlAllChannel'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspAllComMChannelRef' MAP-NAME = 'AllComMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspComControlSetting' MAP-NAME = 'ComControlSetting'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspComControlCommunicationReEnableModeRuleRef' MAP-NAME = 'ComReEnabledModeRuleRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspComControlSpecificChannel' MAP-NAME = 'ComControlSpecificChannel'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSubnetNumber' MAP-NAME = 'SubnetNumber'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspSpecificComMChannelRef' MAP-NAME = 'SpecificComMChannelRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmDspControlDTCSetting' MAP-NAME = 'ControlDTCSetting'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmDspControlDTCSettingReEnableModeRuleRef' MAP-NAME = 'ControlDTCReEnableModeRuleRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
       <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmProcessingConditions' MAP-NAME = 'ProcessingConditions'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmModeCondition' MAP-NAME = 'ModeCondition'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmConditionType' MAP-NAME = 'ConditionType'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmBswModeRef' MAP-NAME = 'BswModeRef'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmSwcModeRef' MAP-NAME = 'SwcModeRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DcmModeRule' MAP-NAME = 'ModeRule'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmLogicalOperator' MAP-NAME = 'LogicalOperator'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmModeRuleNrcValue' MAP-NAME = 'ModeRuleNrcValue'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'DcmArgumentRef' MAP-NAME = 'ArgumentRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'ComMChannel' MAP-NAME = 'ComMChannel'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'ComMChannelId' MAP-NAME = 'ComMChannelId'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
   <CONTAINER-DETAIL ORIGINAL-NAME = 'PduRBswModules' MAP-NAME = 'PduRBswModules'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'PduRCancelReceive' MAP-NAME = 'PduRCancelReceive'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'PduRCancelTransmit' MAP-NAME = 'PduRCancelTransmit'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'PduRBswModuleRef' MAP-NAME = 'PduRBswModuleRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'PduRSrcPdu' MAP-NAME = 'PduRSrcPdu'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'PduRSourcePduHandleId' MAP-NAME = 'PduRSourcePduHandleId'></PARAMETER-DETAIL>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'PduRSrcPduRef' MAP-NAME = 'PduRSrcPduRef'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'NvMBlockDescriptor' MAP-NAME = 'NvMBlockDescriptor'>
        <PARAMETER-DETAIL ORIGINAL-NAME = 'NvMNvramBlockIdentifier' MAP-NAME = 'NvMNvramBlockIdentifier'></PARAMETER-DETAIL>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DemPidClass' MAP-NAME = 'DemPidClass'>
      </CONTAINER-DETAIL>
      <CONTAINER-DETAIL ORIGINAL-NAME = 'DemPidDataElement' MAP-NAME = 'DemPidDataElement'>
      </CONTAINER-DETAIL>
        
    </CONTAINER-DETAILS>
  </MAP-NAMES>
    <!-- Container Count -->
  <CONTAINER-COUNTS>
    <CONTAINER-COUNT MAP-NAME = 'CommonPublishedInformation' COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ConfigSet'                  COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Dsd'                        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DsdServiceIdTable'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DsdService'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DsdSubService'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Dsl'                        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslBuffer'                  COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'CallBackDCMReqServ'         COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslDiagResp'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslProtocol'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslProtocolRow'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslConnection'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslMainConnection'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslProtocolRx'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslProtocolTx'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslPeriodicConnection'      COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslPeriodicTransmission'    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslResponseOnEvent'         COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DslSessionControl'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Dsp'                        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspDid'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspDidRange'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ExtRoe'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Signal'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Data'                       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DataInfo'                   COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspDidInfo'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspDidAccess'               COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspControl'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRead'                    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspWrite'                   COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'Memory'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'AddressLength'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'MemoryIdInfo'               COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'WriteMemoryRangeInfo'       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ReadMemoryRangeInfo'        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'SourceDid'                  COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'MemoryRangeDDid'            COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DownloadMemoryRangeInfo'    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'UploadMemoryRangeInfo'      COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspPid'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspPidData'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PidDataSupportInfo'         COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PidService01'               COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PidService02'               COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PidSupportInfo'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRequestControl'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRoe'                     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRoeQueue'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRoutine'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRoutineInfo'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspRoutineAuthorization'    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'RoutineRequestResOutSignal' COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'RoutineStopInSignal'        COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'RoutineStopOutSignal'       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'StartRoutineInSignal'       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'StartRoutineOutSignal'      COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspSecurity'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspSecurityRow'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspSession'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspSessionRow'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspTestResultObdMidTids'    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspTestResultObdMidTid'     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspTestResultTid'           COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspVehInfo'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspVehInfoData'             COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'General'                    COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PageBufferCfg'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'PduRSrcPdu'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ComMChannel'                COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'NvMBlockDescriptor'         COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ManufacturerIndication'     COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'SupplierIndication'         COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DemPidDataElement'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ComControl'                 COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ComControlAllChannel'       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ComControlSetting'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ComControlSpecificChannel'  COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ControlDTCSetting'          COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ProcessingConditions'       COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ModeCondition'              COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'ModeRule'                   COUNT = '0'></CONTAINER-COUNT>
    <CONTAINER-COUNT MAP-NAME = 'DspPeriodicTransmission'    COUNT = '0'></CONTAINER-COUNT> 
   
  </CONTAINER-COUNTS>
  
  <PRE-COMPILE-OPTIONS>
    <MACRO-ENTRY
      Name      = 'DCM_READDTC_SUPPORT'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '25'
      Pos       = '1'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Read DTC support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ECURESET_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '17'
      Pos       = '2'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Ecu Reset Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_CLR_DIAG_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '20'
      Pos       = '3'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Clear Diagnostic Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_CONTROL_DTC_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '133'
      Pos       = '4'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Control DTC Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_TESTER_PRESENT_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '62'
      Pos       = ''
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Tester Present Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_DATA_BYIDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '34'
      Pos       = '6'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Read Data By Identifier Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_MEMORY_BY_ADDRESS_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '35'
      Pos       = '7'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Read Data by Address Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_SCALINGDATA_BYIDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '36'
      Pos       = '8'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Scaling Data Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_COMMUNICATION_CONTROL_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '40'
      Pos       = '9'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Communication Control Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_DATA_BYPERIODICIDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '42'
      Pos       = '10'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Read Data by Periodic Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DYNAMICALLYDEFINE_DATA_IDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '44'
      Pos       = '11'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Dynamically Defined Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_WRITEDATA_BYIDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '46'
      Pos       = '12'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Write Data By Identifier Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_IOCONTROL_BYIDENTIFIER_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '47'
      Pos       = '13'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for IOControl By Identifier Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROUTINECONTROL_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '49'
      Pos       = '14'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Routine Control Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_REQUEST_DOWNLOAD_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '52'
      Pos       = '15'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Download Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_REQUEST_UPLOAD_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '53'
      Pos       = '16'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Upload Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TRANSFER_DATA_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '54'
      Pos       = '17'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Transfer Data Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TRANSFER_EXIT_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '55'
      Pos       = '18'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Transfer Exit Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_WRITE_MEMORY_BY_ADDRESS_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '61'
      Pos       = '19'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Write Data By Address Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RESPONSE_ON_EVENT_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '134'
      Pos       = '20'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Response On Event Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_REQCURRENT_POWERTRAIN_DIAGDATA_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '1'
      Pos       = '21'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Power Train Diagnostic Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_REQPOWERTRAIN_FREEZEFRAMEDATA_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '2'
      Pos       = '22'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Freeze Frame Data Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_GETDTC_03_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '3'
      Pos       = '23'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Get DTC 03 Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_GETDTC_07_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '7'
      Pos       = '24'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Get DTC 07 Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_GETDTC_0A_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '10'
      Pos       = '25'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Get DTC 0A Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_REQ_ONBOARD_MONITORRESULT_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '6'
      Pos       = '26'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Monitor Result Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_CLRRESET_EMISSION_DIAGINFO_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '4'
      Pos       = '27'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Emission Diag Info Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_REQVEHICLE_INFO_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '9'
      Pos       = '28'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Veh Info Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_REQ_CTLRL_ONBOADSYSTEM_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '8'
      Pos       = '29'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for On Board System Service Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_DIAG_SESSION_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '16'
      Pos       = '30'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Diagnostic Session Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SECURITY_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '39'
      Pos       = '31'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Diagnostic Security Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DEV_ERROR_DETECT'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '32'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'To enable/disable development error detection'
      Container = 'General'
      Parameter = 'DevErrorDetect' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_VERSION_INFO_API'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '33'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'To enable/disable the Dcm_GetVersionInfo API'
      Container = 'General'
      Parameter = 'VersionInfoApi' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RESPOND_ALL_REQUEST'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '34'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Respond All Support'
      Container = 'General'
      Parameter = 'RespondAllRequest' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_NUMBER_OF_REQUEST_MANUFACTURER_INDICATION'
      Type      = '5'
      Value     = '0'
      Pos       = '35'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Manufacturer Indication Support'
      Container = 'ManufacturerIndication' >
    </MACRO-ENTRY>
     
    <MACRO-ENTRY
      Name      = 'DCM_NUMBER_OF_REQUEST_SUPPLIER_INDICATION'
      Type      = '5'
      Value     = '0'
      Pos       = '36'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Supplier Indication Support'
      Container = 'SupplierIndication' >
    </MACRO-ENTRY>
    
    <MACRO-ENTRY
      Name      = 'DCM_PAGEDBUFFER_ENABLED'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '37'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Page Buffer Support'
      Container = 'PageBufferCfg'
      Parameter = 'PagedBufferEnabled' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TASK_TIME'
      Type      = '28'
      Value     = '0'
      Pos       = '38'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Task Time'
      Container = 'General'
      Parameter = 'TaskTime' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PAGEDBUFFERTIMEOUT'
      Type      = '28'
      Value     = '0'
      Pos       = '39'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Timeout for Paged Buffer'
      Container = 'PageBufferCfg'
      Parameter = 'PagedBufferTimeout' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DIAG_RESP_MAX_NUM_RESPEND'
      Type      = '4'
      Value     = '0'
      Pos       = '40'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Response Maximum Respend'
      Container = 'DslDiagResp'
      Parameter = 'MaxNumRespPend' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_MAX_DID_TO_READ'
      Type      = '4'
      Value     = '0'
      Pos       = '41'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Maximum Did to Read'
      Container = 'Dsp'
      Parameter = 'MaxDidToRead' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_PIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '42'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of PIDs Configured'
      Container = 'DspPid' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_OBDMIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '43'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of ObdMids Configured'
      Container = 'DspTestResultObdMidTid' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_TIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '44'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of TIDs Configured'
      Container = 'DspRequestControl' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_VIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '45'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of VIDs Configured'
      Container = 'DspVehInfo' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_DIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '46'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of DIDs Configured'
      Container = 'DspDid' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_RPT_NOOFDTC'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '1'
      CheckDTCValue1 = '7'
      CheckDTCValue2 = '17'
      CheckDTCValue3 = '18'
      Pos       = '47'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x01,0x07,0x11, 12 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTC'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '2'
      CheckDTCValue1 = '10'
      CheckDTCValue2 = '15'
      CheckDTCValue3 = '19'
      CheckDTCValue5 = '21'
      Pos       = '48'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x02,0x0A,0x0F,0x13 and 0x15 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCSNAPSHOTREC_IDENTFN'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '3'
      Pos       = '49'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x03 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCSNAPSHOTREC_BYDTCNUM'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '4'
      Pos       = '50'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x04 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCSNAPSHOTREC_BYSNAPSHOTNUM'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '5'
      Pos       = '51'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x05 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCEXTENDEDDATARECORD'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '6'
      CheckDTCValue1 = '16'
      Pos       = '52'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x06 and 0x10 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCBYSEVERITYMASKRECORD'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '8'
      Pos       = '53'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x08 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTCBYSEVERITYINFOFDTC'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '9'
      Pos       = '54'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x09 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_FAILEDCONFIRMEDDTCINFO'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '11'
      CheckDTCValue1 = '12'
      CheckDTCValue2 = '13'
      CheckDTCValue3 = '14'
      Pos       = '55'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x0B,0x0C,0x0D,0x0E of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_RPT_DTC_FLT_DET_CTR'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '20'
      Pos       = '56'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x14 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_SESSION_CONTROL'
      Type      = '5'
      Value     = '0'
      Pos       = '57'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Sessions Configured'
      Container = 'DspSessionRow' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_SEC_LEVEL'
      Type      = '5'
      Value     = '0'
      Pos       = '58'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Security Levels Configured'
      Container = 'DspSecurityRow' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_NUM_PROTOCOL_CONFIGD'
      Type      = '5'
      Value     = '0'
      Pos       = '59'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Protocols Configured'
      Container = 'DslProtocolRow' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_POWERDOWN_TIME'
      Type      = '4'
      Value     = '0'
      Pos       = '61'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Power Down Time'
      Container = 'Dsp'
      Parameter = 'PowerDownTime' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_RIDS'
      Type      = '5'
      Value     = '0'
      Pos       = '62'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of DIDs Configured'
      Container = 'DspRoutine' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PROTOCOL_TRANSTYPE2'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'TYPE2'
      Pos       = '63'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Protocol TransType2'
      Container = 'DslProtocolRow'
      Parameter = 'ProtocoltransType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_USE_FNC_ENABLED'
      Type      = '14'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_ASYNCH_FNC'
      CheckValue1 = 'USE_DATA_SYNCH_FNC'
      Pos       = '64'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_FNC'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_USE_BLOCK_ID_ENABLED'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_BLOCK_ID'
      Pos       = '65'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_BLOCK_ID'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_USE_ECU_SIGNAL_ENABLED'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      Pos       = '66'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_ECU_SIGNAL'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DLT_USE_FUNC'
      Type      = '24'
      Value     = 'STD_OFF'
      Pos       = '67'
      Comment   = 'Pre-compile option to check whether DLT funtion is referred or NO'
      Container1 = 'Data'
      Container2 = 'ExtRoe'
      Parameter  = 'RoeActivateFnc'
      Parameter1 = 'DataReadDataLengthFnc'
      Parameter2 = 'DataWriteFnc'
      Parameter3 = 'DataReadFnc'
      Parameter4 = 'DataConditionCheckReadFnc'
      Parameter5 = 'DataUsePort'>
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_STATIC_DID'
      Type      = '9'
      Value     = '0'
      Pos       = '68'
      Prefix    = '(uint16)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Ststic Dids'
      Container = 'DspDid'
      Parameter = 'DidIdentifier' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_STCID_FOR_DYMDID'
      Type      = '10'
      Value     = '0'
      Pos       = '69'
      Prefix    = '(uint16)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Dynamic Dids'
      Container = 'DspRead'
      Parameter = 'DDDIDMaxElements' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_SUPPORT'
      Type      = '11'
      Value     = 'STD_OFF'
      CheckValue = '1'
      CheckValue1 = '2'
      CheckValue2 = '3'
      CheckValue3 = '4'
      CheckValue4 = '6'
      CheckValue5 = '7'
      CheckValue6 = '8'
      CheckValue7 = '9'
      CheckValue8 = '10'
      Pos       = '70'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for On Board Diagnostic Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DIDSERVICE_SUPPORT_ENABLE'
      Type      = '12'
      Value     = 'STD_OFF'
      CheckValue = '34'
      CheckValue1 = '46'
      CheckValue2 = '47'
      CheckValue3 = '36'
      Pos       = '71'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DID Service Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_LINK_CONTROL_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '135'
      Pos       = '72'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Link Control Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_READ_MEMORY_CONFIGURED'
      Type      = '5'
      Value     = '0'
      Pos       = '73'
      Prefix    = '(uint8)'
      Postfix   = ''
     Comment   = 'Pre-compile option for Total number of Read Memory Configured'
      Container = 'ReadMemoryRangeInfo' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_WRITE_MEMORY_CONFIGURED'
      Type      = '5'
      Value     = '0'
      Pos       = '74'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Write Memory Configured'
      Container = 'WriteMemoryRangeInfo' >
    </MACRO-ENTRY>
   <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_DYM_DID'
      Type      = '8'
      Value     = '0'
      CheckValue = '61952'
      CheckValue1 = '62463'
      Pos       = '75'
      Prefix    = ''
      Postfix   = 'U'
      Comment   = 'Pre-compile option for Dynamic Dids'
      Container = 'DspDid'
      Parameter = 'DidIdentifier' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_FAULT_DETECTION_COUNTER'
      Type      = '6'
      Value     = 'STD_OFF'
      CheckValue = '25'
      CheckDTCValue = '20'
      Pos       = '76'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Precompile option to include the subfunctions 0x14 of ReadDtcInformation service'
      Container = 'DsdSubService' 
      Parameter = 'SubServiceId' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_MAX_NO_OF_PRECONFIGURED_DID'
      Type      = '23'
      Value     = '0'
      Pos       = '77'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for PreConfigured Did'
      Container = 'DspDid'
      Parameter = 'PreConfigured' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_MODE_CONDITION'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '78'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'To enable/disable mode condition'
      Container = 'ModeCondition' >ModeRule
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_MODE_RULE' 
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '79'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'To enable/disable Rule condition'
      Container = 'ModeRule' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_RXPDUID'
      Type      = '5'
      Value     = '0'
      Pos       = '80'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Rx Configured'
      Container = 'DslProtocolRx' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
        Name      = 'DCM_TOTAL_NUM_OF_ALL_CHANNEL'
        Type      = '5'
        Value     = '0'
        Pos       = '81'
        Postfix   = ''
        Comment   = 'Pre-compile option for Total number of All ComM Configured'
        Container = 'ComControlAllChannel' >
      </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_SPECIFIC_CHANNEL'
      Type      = '5'
      Value     = '0'
      Pos       = '82'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Specific ComM Configured'
      Container = 'ComControlSpecificChannel' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_DATA_SYNCH_FNC'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SYNCH_FNC'
      Pos       = '83'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SYNCH_FNC'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
    Name      = 'DCM_DATA_ASYNCH_FNC'
    Type      = '7'
    Value     = 'STD_OFF'
    CheckValue = 'USE_DATA_ASYNCH_FNC'
    Pos       = '84'
    Prefix    = ''
    Postfix   = ''
    Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_ASYNCH_FNC'
    Container = 'Data'
    Parameter = 'DataUsePort' >
   </MACRO-ENTRY>
      <MACRO-ENTRY
      Name      = 'DCM_DATA_ASYNCH_CLIENT_SERVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_ASYNCH_CLIENT_SERVER'
      Pos       = '85'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_ASYNCH_CLIENT_SERVER'
      Container = 'Data'
      Parameter = 'DataUsePort' >
     </MACRO-ENTRY>
      <MACRO-ENTRY
      Name      = 'DCM_DATA_SYNCH_CLIENT_SERVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SYNCH_CLIENT_SERVER'
      Pos       = '86'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SYNCH_CLIENT_SERVER'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DATA_SENDER_RECEIVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      Pos       = '87'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SENDER_RECEIVER'
      Container = 'Data'
      Parameter = 'DataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SESSION_REF'
      Type      = '15'
      Value     = 'STD_OFF'
      Pos       = '88'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Session Reference for a protocol row'
      Container = 'DslProtocolRow'
      Parameter = 'SessionRef' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_SEND_AT_LOW_RATE_TIMER'
      Type      = '28'
      Value     = '0'
      Pos       = '89'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Periodic Transmission for slow rate (0x01)'
      Container = 'DspPeriodicTransmission'
      Parameter = 'PeriodicTransmissionSlowRate' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_SEND_AT_MED_RATE_TIMER'
      Type      = '28'
      Value     = '0'
      Pos       = '90'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Periodic Transmission for Medium rate (0x02)'
      Container = 'DspPeriodicTransmission'
      Parameter = 'PeriodicTransmissionMediumRate' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_SEND_AT_FAST_RATE_TIMER'
      Type      = '28'
      Value     = '0'
      Pos       = '91'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Periodic Transmission for Fast rate (0x03)'
      Container = 'DspPeriodicTransmission'
      Parameter = 'PeriodicTransmissionFastRate' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_DYNAMIC_DID_PER_SOURCE'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '92'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Dynamic DID per Source'
      Container = 'Dsp'
      Parameter = 'DDDIDcheckPerSourceDID' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_MAX_PERIODIC_DID'
      Type      = '4'
      Value     = '0'
      Pos       = '93'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Max Periodic DID to Read'
      Container = 'Dsp'
      Parameter = 'MaxPeriodicDidToRead' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_MAX_PERIODIC_DID_SCHEDULED'
      Type      = '4'
      Value     = '0'
      Pos       = '95'
      Prefix    = ''
      Postfix   = 'U'
      Comment   = 'Pre-compile option for Periodic Response Type'
      Container = 'Dsp'
      Parameter = 'MaxPeriodicScheduler' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PROTOCOL_LITTLE_ENDIANESS_CONVERSION'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = '0'
      Pos       = '96'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_FNC'
      Container = 'DslProtocolRow'
      Parameter = 'EndiannessConvEnabled' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PROTOCOL_BIG_ENDIANESS_CONVERSION'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = '1'
      Pos       = '97'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_FNC'
      Container = 'DslProtocolRow'
      Parameter = 'EndiannessConvEnabled' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_REQUEST_MANUFACTURER_INDICATION_ENABLED'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '99'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Manufacturer Indication Support'
      Container = 'General'
      Parameter = 'ManufacturerEnabled' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_REQUEST_SUPPLIER_INDICATION_ENABLED'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '100'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Supplier Indication Support'
      Container = 'General'
      Parameter = 'SupplierEnabled' >
    </MACRO-ENTRY>
     <MACRO-ENTRY
      Name      = 'DCM_NUM_OF_ADDRESS_LENGTH_FORMAT_ID_CONFIG'
      Type      = '16'
      Value     = '0'
      Pos       = '101'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro total number of Support Address configured'
      Container = 'AddressLength'
      Parameter = 'DcmDspSupportedAddressAndLengthFormatIdentifier' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_CALLBACK_REQUEST'
      Type      = '5'
      Value     = '0'
      Pos       = '102'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Pre-compile option for Total number of Callback request Configured'
      Container = 'CallBackDCMReqServ' >
    </MACRO-ENTRY>
   <MACRO-ENTRY
      Name      = 'DCM_RESPONSEON_SECOND_DECLINE_REQUEST'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '103'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for SecondDeclinedRequest'
      Container = 'DslDiagResp'
      Parameter = 'SecondDeclinedRequest' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_TOTAL_NUM_OF_OBD_DID'
      Type      = '17'
      Value     = '0'
      Pos       = '104'
      Prefix    = '(uint8)'
      Postfix   = ''
      Comment   = 'Macro total number of Support Address configured'
      Container = 'DspDid'
      Parameter = 'DidIdentifier' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_OBD_PID_SUPPORT_INFO'
      Type      = '15'
      Value     = 'STD_OFF'
      Pos       = '105'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Protocol TransType2'
      Container = 'PidDataSupportInfo'
      Parameter = 'PidDataSupportInfoRef' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PID_DATA_SYNCH_CLIENT_SERVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SYNCH_CLIENT_SERVER'
      Pos       = '106'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SYNCH_CLIENT_SERVER'
      Container = 'PidService01'
      Parameter = 'PidDataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PID_DATA_SENDER_RECEIVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      Pos       = '107'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SENDER_RECEIVER'
      Container = 'PidService01'
      Parameter = 'PidDataUsePort' >
   </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_PID_DATA_SYNCHCLIENT_FNC'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SYNCH_FNC'
      Pos       = '108'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUsePort as USE_DATA_SYNCH_FNC'
      Container = 'PidService01'
      Parameter = 'PidDataUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_BUF_SIZE'
      Type      = '4'
      Value     = '0'
      Pos       = '109'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for Roe Buffer Size'
      Container = 'DspRoe' 
      Parameter = 'RoeBufSize' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_INIT_ON_DSC'
      Type      = '4'
      Value     = '0'
      Pos       = '110'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for DcmDspRoeInitOnDsc'
      Container = 'DspRoe'
      Parameter = 'InitOnDSC' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_MAX_EVENT_LENGTH'
      Type      = '4'
      Value     = '0'
      Pos       = '111'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for Number of DcmDspRoeMaxEventLength configured'
      Container = 'DspRoe'
      Parameter = 'MaxEventLength' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_MAX_NUMBER_OF_RETRY'
      Type      = '4'
      Value     = '0'
      Pos       = '112'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for DcmDspRoeRoeMaxNumberOfRetry'
      Container = 'DspRoe'
      Parameter = 'RoeMaxNumberOfRetry' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_MAX_QUEUE_LENGTH'
      Type      = '4'
      Value     = '0'
      Pos       = '113'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for DcmDspRoeMaxQueueLength'
      Container = 'DspRoe'
      Parameter = 'MaxQueueLength' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_INTER_MESSAGE_TIME'
      Type      = '28'
      Value     = '0'
      Pos       = '114'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for DcmDspRoeInterMessageTime in ms'
      Container = 'DspRoe'
      Parameter = 'InterMessageTime' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_MODE_RULE_NRC'
      Type      = '15'
      Value     = 'STD_OFF'
      Pos       = '117'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Session Reference for a protocol row'
      Container = 'ModeRule'
      Parameter = 'ModeRuleNrcValue' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SECURITY_SYNCH_CLIENT_SERVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_SYNCH_CLIENT_SERVER'
      Pos       = '118'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspSecurityUsePort as USE_SYNCH_CLIENT_SERVER'
      Container = 'DspSecurityRow'
      Parameter = 'SecurityUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SECURITY_ASYNCH_CLIENT_SERVER'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ASYNCH_CLIENT_SERVER'
      Pos       = '119'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspSecurityUsePort as USE_ASYNCH_CLIENT_SERVER'
      Container = 'DspSecurityRow'
      Parameter = 'SecurityUsePort' >
   </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SECURITY_SYNCH_FNC'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_SYNCH_FNC'
      Pos       = '120'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspSecurityUsePort as USE_SYNCH_FNC'
      Container = 'DspSecurityRow'
      Parameter = 'SecurityUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_SECURITY_ASYNCH_FNC'
      Type      = '7'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ASYNCH_FNC'
      Pos       = '121'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspSecurityUsePort as USE_ASYNCH_FNC'
      Container = 'DspSecurityRow'
      Parameter = 'SecurityUsePort' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_UINT8'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'UINT8'
      CheckValue3 = '34'
      Pos       = '122'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT8'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_UINT16'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'UINT16'
      CheckValue3 = '34'
      Pos       = '123'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT16'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_UINT32'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'UINT32'
      CheckValue3 = '34'
      Pos       = '124'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT32'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_SINT8'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'SINT8'
      CheckValue3 = '34'
      Pos       = '125'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT8'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_SINT16'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'SINT16'
      CheckValue3 = '34'
      Pos       = '126'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT16'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_WRITE_SEND_RECV_SINT32'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '46'
      CheckValue2 = 'SINT32'
      CheckValue3 = '34'
      Pos       = '127'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT32'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_MAX_SECURITY_SEED_SIZE'
      Type      = '19'
      Value     = '0'
      Pos       = '128'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Maximum Seed Size'
      Container = 'DspSecurityRow'
      Parameter = 'SecuritySeedSize' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_UINT8'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'UINT8'
      CheckValue3 = '47'
      Pos       = '129'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT8'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_UINT16'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'UINT16'
      CheckValue3 = '47'
      Pos       = '130'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT16'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_UINT32'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'UINT32'
      CheckValue3 = '47'
      Pos       = '131'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT32'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_SINT8'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'SINT8'
      CheckValue3 = '47'
      Pos       = '132'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT8'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_SINT16'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'SINT16'
      CheckValue3 = '47'
      Pos       = '133'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT16'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_USE_ECU_SIGNAL_SINT32'
      Type      = '18'
      Value     = 'STD_OFF'
      CheckValue = 'USE_ECU_SIGNAL'
      CheckValue1 = '34'
      CheckValue2 = 'SINT32'
      CheckValue3 = '47'
      Pos       = '134'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT32'
      Container = 'Data'
      Parameter = 'DataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_UINT8'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'UINT8'
      Pos       = '135'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT8'
      Container = 'DspPidData'
      Parameter = 'PidDataType' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_UINT16'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'UINT16'
      Pos       = '136'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT16'
      Container = 'DspPidData'
      Parameter = 'PidDataType' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_UINT32'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'UINT32'
      Pos       = '137'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as UINT32'
      Container = 'DspPidData'
      Parameter = 'PidDataType' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_SINT8'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'SINT8'
      Pos       = '138'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT8'
      Container = 'DspPidData'
      Parameter = 'PidDataType' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_SINT16'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'SINT16'
      Pos       = '139'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT16'
      Container = 'DspPidData'
      Parameter = 'PidDataType' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_PID_SINT32'
      Type      = '20'
      Value     = 'STD_OFF'
      CheckValue = 'USE_DATA_SENDER_RECEIVER'
      CheckValue1 = '1'
      CheckValue2 = 'SINT32'
      Pos       = '140'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for DcmDspDataUseType as SINT32'
      Container = 'DspPidData'
      Parameter = 'PidDataType' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_CONTROL_DTC_REENABLE_MODE_RULE'
      Type      = '21'
      CheckValue1 = '133'
      Value     = '0'
      Pos       = '141'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Control DTC Enable'
      Container = 'ControlDTCSetting'
      Parameter = 'ControlDTCReEnableModeRuleRef' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_COMM_CONTROL_REENABLE_MODE_RULE'
      Type      = '21'
      Value     = '0'
      CheckValue1 = '40'
      Pos       = '142'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Communication Control Enable'
      Container = 'ComControlSetting'
      Parameter = 'ComReEnabledModeRuleRef' > 
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_COMM_CONTROL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '143'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Communication Control Configured'
      Container = 'ComControlSetting' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_CONTROL_DTC_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '144'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Control DTC Configured'
      Container = 'ControlDTCSetting' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_EXTERNAL_ROE_ENABLED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '146'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for Number of DcmDspExtRoe configured'
      Container = 'ExtRoe' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROE_QUEUE_ENABLED'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '147'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for Number of DcmDspRoeQueueEnabled configured'
      Container = 'DspRoe'
      Parameter = 'RoeQueueEnab' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_STANDARD_SUPPORT'
      Type      = '4'
      Value     = '0'
      Pos       = '148'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro for diagnostic standard support'
      Container = 'General'
      Parameter = 'StandardSupport' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ENABLE_NORMAL_MSG_TRANSMISSION_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '41'
      Pos       = '149'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for EnableNormalMessageTransmission'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
   </MACRO-ENTRY>    
   <MACRO-ENTRY
      Name      = 'DCM_NO_OF_COMM_CHANNELS'
      Type      = '5'
      Value     = '0'
      Pos       = '150'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for number of ComM channels configured in comM'
      Container = 'ComMChannel' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_PDUR_CANCEL_TRANSMIT'
      Type      = '26'
      Value     = 'STD_OFF'
      Pos       = '151'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for PduRCancelTransmit'
      Container = 'PduRBswModules'
      Parameter1 = 'PduRBswModuleRef'
      Parameter = 'PduRCancelTransmit' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_PDUR_CANCEL_RECIEVE'
      Type      = '26'
      Value     = 'STD_OFF'
      Pos       = '152'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for PduRCancelReceive'
      Container = 'PduRBswModules'
      Parameter1 = 'PduRBswModuleRef'
      Parameter = 'PduRCancelReceive'   >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROUTINE_START_INSIGNAL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '154'
      Comment   = 'Pre-compile option for StartIn Signals'
      Container = 'StartRoutineIn' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '155'
      Comment   = 'Pre-compile option for StartOut Signals'
      Container = 'StartRoutineOut' >
    </MACRO-ENTRY>
  <MACRO-ENTRY
      Name      = 'DCM_ROUTINE_STOP_INSIGNAL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '156'
      Comment   = 'Pre-compile option for StopIn Signals'
      Container = 'RoutineStopIn'>
    </MACRO-ENTRY>
   <MACRO-ENTRY
      Name      = 'DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '157'
      Comment   = 'Pre-compile option for StopOut Signals'
      Container = 'RoutineStopOut' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_ROUTINE_REQUEST_OUTSIGNAL_CONFIGURED'
      Type      = '13'
      Value     = 'STD_OFF'
      Pos       = '158'
      Comment   = 'Pre-compile option for RequestOut Signals'
      Container = 'RoutineRequestResOut' >
     </MACRO-ENTRY>
      <MACRO-ENTRY
      Name      = 'DCM_DSP_MAX_DID_SIZE'
      Type      = '27'
      Value     = '0'
      Pos       = '159'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for Total Data size configured'
      Container = 'DspDid'
      Container1 = 'Signal'
      Parameter1 = 'DataRef'
      Container2 = 'Data' 
      Parameter2 = 'DataSize'>
    </MACRO-ENTRY>
	<MACRO-ENTRY
      Name      = 'DCM_AUTRON_FBL_USED'
      Type      = '2'
      Value     = 'STD_OFF'
      Pos       = '160'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Macro to use the AUTRON FBL'
      Container = 'General'
      Parameter = 'AutronFblUsed' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_DSP_STOP_DIAG_SESSION_SERVICE'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '32'
      Pos       = '161'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for StopDiagnosticSession Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_READ_ITC_SERVICE_SUPPRT'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '186'
      Pos       = '162'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for ReadITCInformation Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
    <MACRO-ENTRY
      Name      = 'DCM_CLEAR_ITC_SERVICE_SUPPRT'
      Type      = '1'
      Value     = 'STD_OFF'
      CheckValue = '187'
      Pos       = '163'
      Prefix    = ''
      Postfix   = ''
      Comment   = 'Pre-compile option for ClearInternalTroubleCodes Support'
      Container = 'DsdService'
      Parameter = 'SidTabServiceId' >
    </MACRO-ENTRY>
  </PRE-COMPILE-OPTIONS>

  <!-- Contains all consistency checks -->
  <CONSISTENCY-CHECKS>

    <!-- Mandatory check -->
    <MANDATORY-CHECK>
      <CONTAINER NAME = 'General'>
        <PARAMETER-NAME>DevErrorDetect</PARAMETER-NAME>
        <PARAMETER-NAME>VersionInfoApi</PARAMETER-NAME>
        <PARAMETER-NAME>RespondAllRequest</PARAMETER-NAME>
        <PARAMETER-NAME>TaskTime</PARAMETER-NAME>
        <PARAMETER-NAME>StandardSupport</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DsdServiceIdTable'>
        <PARAMETER-NAME>SidTabId</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DsdService'>
        <PARAMETER-NAME>SidTabServiceId</PARAMETER-NAME>
        <PARAMETER-NAME>SidTabSubfuncAvail</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DslBuffer'>
        <PARAMETER-NAME>BufferSize</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DslDiagResp'>
        <PARAMETER-NAME>MaxNumRespPend</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DslProtocolRow'>
        <PARAMETER-NAME>ProtocolId</PARAMETER-NAME>
        <PARAMETER-NAME>ProtocolIsParallelExecutab</PARAMETER-NAME>
        <PARAMETER-NAME>ProtocolPreemptTimeout</PARAMETER-NAME>
        <PARAMETER-NAME>ProtocolPriority</PARAMETER-NAME>
      </CONTAINER>
      
      <CONTAINER NAME = 'DslProtocolRx'>
        <PARAMETER-NAME>ProtocolRxAddrType</PARAMETER-NAME>
        <PARAMETER-NAME>RxChannelId</PARAMETER-NAME>
         <PARAMETER-NAME>ProtocolRxPduId</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DslProtocolTx'>
        <PARAMETER-NAME>ConfirmationPduId</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'Data'>
        <PARAMETER-NAME>DataSize</PARAMETER-NAME>
        <PARAMETER-NAME>DataUsePort</PARAMETER-NAME>
        <PARAMETER-NAME>DataInfoRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DataInfo'>
        <PARAMETER-NAME>DataFixedLength</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspDid'>
        <PARAMETER-NAME>DidIdentifier</PARAMETER-NAME>
        <PARAMETER-NAME>DidUsed</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DidInfo'>
        <PARAMETER-NAME>DynamicallyDefined</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ReadMemoryRangeInfo'>
        <PARAMETER-NAME>ReadMemoryRangeHigh</PARAMETER-NAME>
        <PARAMETER-NAME>ReadMemoryRangeLow</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'WriteMemoryRangeInfo'>
        <PARAMETER-NAME>WriteMemoryRangeHigh</PARAMETER-NAME>
        <PARAMETER-NAME>WriteMemoryRangeLow</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspRoe'>
        <PARAMETER-NAME>InitOnDSC</PARAMETER-NAME>
        <PARAMETER-NAME>InterMessageTime</PARAMETER-NAME>
        <PARAMETER-NAME>RoeMaxNumberOfRetry</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspRoeQueue'>
        <PARAMETER-NAME>MaxEventLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoeQueueEnab</PARAMETER-NAME>
        <PARAMETER-NAME>MaxQueueLength</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspRequestControl'>
        <PARAMETER-NAME>RequestControlInBufferSize</PARAMETER-NAME>
        <PARAMETER-NAME>DcmDspRequestControlOutBufferSize</PARAMETER-NAME>
        <PARAMETER-NAME>RequestControlTestId</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspRoutine'>
        <PARAMETER-NAME>RoutineIdentifier</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineUsePort</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineFixedLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineUsed</PARAMETER-NAME>
        <PARAMETER-NAME>RequestResultsRoutineSupported</PARAMETER-NAME>
        <PARAMETER-NAME>StopRoutineSupported</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'RoutineStopInSignal'>
        <PARAMETER-NAME>RoutineSignalLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalPos</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalType</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'RoutineStopOutSignal'>
        <PARAMETER-NAME>RoutineSignalLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalPos</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalType</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'StartRoutineInSignal'>
        <PARAMETER-NAME>RoutineSignalLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalPos</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalType</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'StartRoutineOutSignal'>
        <PARAMETER-NAME>RoutineSignalLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalPos</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalType</PARAMETER-NAME>
      </CONTAINER>
       <CONTAINER NAME = 'RoutineRequestResOutSignal'>
        <PARAMETER-NAME>RoutineSignalLength</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalPos</PARAMETER-NAME>
        <PARAMETER-NAME>RoutineSignalType</PARAMETER-NAME>
      </CONTAINER>
    <CONTAINER NAME = 'Dsp'>
      <PARAMETER-NAME>MaxPeriodicScheduler</PARAMETER-NAME>
      <PARAMETER-NAME>DDDIDcheckPerSourceDID</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspPid'>
        <PARAMETER-NAME>PidIdentifier</PARAMETER-NAME>
        <PARAMETER-NAME>PidSize</PARAMETER-NAME>
        <PARAMETER-NAME>PidService</PARAMETER-NAME>
        <PARAMETER-NAME>PidUsed</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspPidData'>
        <PARAMETER-NAME>PidDataPos</PARAMETER-NAME>
        <PARAMETER-NAME>PidDataSize</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'PidService01'>
        <PARAMETER-NAME>PidDataUsePort</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'PidSupportInfo'>
        <PARAMETER-NAME>PidSupportInfoLen</PARAMETER-NAME>
        <PARAMETER-NAME>PidSupportInfoPos</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspSecurityRow'>
        <PARAMETER-NAME>SecurityDelayTime</PARAMETER-NAME>
        <PARAMETER-NAME>SecurityDelayTimeOnBoot</PARAMETER-NAME>
        <PARAMETER-NAME>SecurityKeySize</PARAMETER-NAME>
        <PARAMETER-NAME>SecurityLevel</PARAMETER-NAME>
        <PARAMETER-NAME>SecurityNumAttDelay</PARAMETER-NAME>
        <PARAMETER-NAME>SecuritySeedSize</PARAMETER-NAME>
      </CONTAINER>
       <CONTAINER NAME = 'DspSessionRow'>
        <PARAMETER-NAME>SessionP2ServerMax</PARAMETER-NAME>
        <PARAMETER-NAME>SessionP2StarServerMax</PARAMETER-NAME>
        <PARAMETER-NAME>SessionBoot</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspTestResultObdMidTid'>
        <PARAMETER-NAME>TestResultObdmid</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspTestResultObdMidTids'>
        <PARAMETER-NAME>TestResultObdmidTidUaSid</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspTestResultTid'>
        <PARAMETER-NAME>TestResultTestId</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspVehInfo'>
        <PARAMETER-NAME>VehInfoInfoType</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'DspVehInfoData'>
        <PARAMETER-NAME>VehInfoDataOrder</PARAMETER-NAME>
        <PARAMETER-NAME>VehInfoDataSize</PARAMETER-NAME>
        <PARAMETER-NAME>VehInfoDataUsePort</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'PageBufferCfg'>
        <PARAMETER-NAME>PagedBufferEnabled</PARAMETER-NAME>
      </CONTAINER>      
      <CONTAINER NAME = 'ComControlAllChannel'>
        <PARAMETER-NAME>AllComMChannelRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ComControlSpecificChannel'>
        <PARAMETER-NAME>SpecificComMChannelRef</PARAMETER-NAME>
        <PARAMETER-NAME>SubnetNumber</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ModeRule'>
        <PARAMETER-NAME>ArgumentRef</PARAMETER-NAME>
      </CONTAINER>
      <CONTAINER NAME = 'ModeCondition'>
        <PARAMETER-NAME>ConditionType</PARAMETER-NAME>
      </CONTAINER>            
    </MANDATORY-CHECK>

    <!-- String check -->
    <STRING-CHECK>
      <PARAMETER>
        <NAME>DataConditionCheckreadFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataEcuSignal</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataFreezeCurrentStateFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataGetScalingInfoFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataReadDataLengthFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataReadEcuSignal</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataReadFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataResetToDefaultFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataReturnControlToEcuFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataShortTermAdjustmentFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>DataWriteFnc</NAME>
        <CONTAINER-NAME>Data</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>RequestControlFnc</NAME>
        <CONTAINER-NAME>DspRequestControl</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>
      <PARAMETER>
        <NAME>RequestResultsRoutineFnc</NAME>
        <CONTAINER-NAME>DspRoutine</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER> 
      <PARAMETER>
        <NAME>StartRoutineFnc</NAME>
        <CONTAINER-NAME>DspRoutine</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER> 
      <PARAMETER>
        <NAME>StopRoutineFnc</NAME>
        <CONTAINER-NAME>DspRoutine</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>  
      <PARAMETER>
        <NAME>PidDataReadFnc</NAME>
        <CONTAINER-NAME>PidService01</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER> 
      <PARAMETER>
        <NAME>GetCompareFnc</NAME>
        <CONTAINER-NAME>DspSecurityRow</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER> 
      <PARAMETER>
        <NAME>GetSeedFnc</NAME>
        <CONTAINER-NAME>DspSecurityRow</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER> 
      <PARAMETER>
        <NAME>GetDTRFnc</NAME>
        <CONTAINER-NAME>DspTestResultTid</CONTAINER-NAME>
        <REGULAR-EXPRESSION>[a-zA-Z][a-zA-Z0-9\_]*</REGULAR-EXPRESSION>
      </PARAMETER>       
    </STRING-CHECK>
  </CONSISTENCY-CHECKS>

  <!-- Static codes that to be added in the output files -->
  <OUTPUT-FILES>
    <Dcm_Cfg.h>
      <TEMPLATE>/*******************************************************************************
**  FILE-NAME: Dcm_Cfg.h                                                      **
**                                                                            **
**  MODULE-NAME: AUTOSAR DCM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

#ifndef DCM_CFG_H
#define DCM_CFG_H

POLYSPACE_START_1_1
/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "ComStack_Types.h"

/*******************************************************************************
**                      Common Published Information                          **
*******************************************************************************/
PUBLISHED_INFORMATION

/*******************************************************************************
**                      Pre-compile Options                                   **
*******************************************************************************/
PRECOMPILE_OPTIONS
RULE_INDEX
PERIODIC_DID
DCM_VID_AVL_CONFIG_LIST
HANDLES

POLYSPACE_STOP_1_1
#endif /* DCM_CFG_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
  </Dcm_Cfg.h>
   
    <Dcm_Cfg.c>
      <TEMPLATE>/*******************************************************************************
**  FILE-NAME: Dcm_Cfg.c                                                      **
**                                                                            **
**  MODULE-NAME: AUTOSAR DCM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
TOOL_VERSION
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

CREATED_DATE_FILE

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/

#include "Dcm.h"
#include "Dcm_Cfg.h"

#include "Dcm_PCTypes.h"
#include "Dcm_DspServices.h"
#include "Dcm_Types.h"
#include "Rte_Dcm.h"
#include "SchM_Dcm.h"
#include "Dcm_DspOBDServices.h"
#include "Dcm_DspNonPagedDTCSubFct.h"
#include "Dcm_DspReadDTCInfo.h"
#include "Dcm_DspReadSSDTCInfo.h"

#if(DCM_USE_ECU_SIGNAL_ENABLED == STD_ON)
#include "IoHwAb.h"
#endif
#include "Dcm_PackUnPack.h"
#include "Dem.h"
#include "Dcm_DspMemoryServices.h"
#include "Dcm_DspResponseOnEvent.h"
#if(DCM_ROUTINECONTROL_SERVICE == STD_ON)
#include "Dcm_Routine.h"
#endif
/* polyspace:begin&lt;MISRA-C:8.10:Not a defect:Justify with annotations> Whether the Dcm api function is required internal or external linkage, depends on user configuration */
INCLUDE
/*******************************************************************************
**                      Global Data                                           **
*******************************************************************************/
STRUCTURE_DECLARATIONS
Dcm_GpOBDBaseAddress
Dcm_GpEncodeByte
Dcm_GpUDSBaseAddress
Rx_Status
Pro_Status
Total_Buf_Area
Periodic_Size
Periodic_Status
Data_Size
InSignal
OutSignal
OutSignal16
OutSignal32
WriteSignal
ReadSignal
/* polyspace:end&lt;MISRA-C:8.10:Not a defect:Justify with annotations> Whether the Dcm api function is required internal or external linkage, depends on user configuration */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    <STRUCTURES-AND-ARRAYS>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPduIdTableConfig</NAME>
          <COMMENT>/* VAR(Dcm_PduIdTable, DCM_VAR) Dcm_GaaPduIdTableConfig[DCM_NUM_OF_PDUIDTABLECONFIG]; */</COMMENT>
          <FIELD>RxPduIdStatus pPeriodicTxId pRoeTxId pSchMSwitchCommModeFunc ddRxPduId ddTxPduId ddProtocolId ulProRxChannelId ulRxCopiedLength usTxConfirmationPduId 
          ucProRxTesterSrcAddr ucPeriTransRxBufferIndex ucRxAddrType ucPduIdStatusMask ucTxBufferId ucRxBufferId ucNoofPeriodicCon ucRxComChannelRef ucReceiveStatus</FIELD>
          <TYPE>PSTR PSTR PSTR PSTR UINT8 UINT8 UINT8 UINT32 UINT32 UINT16 UINT16 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>NONE#NONE NONE#NONE NONE#NONE ProtocolRxComMChannelRef#DslProtocolRx ProtocolRxPduId#DslProtocolRx ProtocolTxPduRef#DslProtocolTx
          ProtocolId#DslProtocolRow RxChannelId#DslProtocolRx ConfirmationPduId#DslProtocolTx RxTesterSource#DslProtocolRx ProtocolRxAddrType#DslProtocolRx
          NONE#NONE ProtocolTxBufferId#DslProtocolRow ProtocolRxBufferId#DslProtocolRow NONE#NONE ProtocolRxComMChannelRef#DslProtocolRx</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_PDUIDTABLECONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaProtocolConfig</NAME>
          <COMMENT>/* CONST(Dcm_ProtocolConfig, DCM_CONST) Dcm_GaaProtocolConfig[DCM_NUM_OF_PROTOCOLCONFIG]; */</COMMENT>
          <FIELD>pProtocolStatus pSessiontable pServiceIdTable usPrtclPreempTimeOut 
            usTimStrP2ServerAdjust usTimStrP2StarServerAdjust ucProtocolPrio ucCurrentSIdTable ucPrtclStatusMask
            ucDefaultSesIndex ucSesTableIndex ucSesCntInTable ucServiceCount
            blProtocolIsParallelExecutab blProtocolTransType blProtocolEndiannessConvEnabled blSendRespPendOnTransToBoot</FIELD>
          <TYPE>PSTR PSTR PSTR UINT16 UINT16 UINT16 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 BOOL UINT8 BOOL BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE NONE#NONE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE</RANGE>
          <REFERENCE>NONE#NONE SessionRef#DslProtocolRow ProtocolSIDTable#DslProtocolRow
            ProtocolPreemptTimeout#DslProtocolRow TimStrP2ServerAdjust#DslProtocolRow
            TimStrP2StarServerAdjust#DslProtocolRow ProtocolPriority#DslProtocolRow ProtocolSIDTable#DslProtocolRow NONE
            NONE#NONE NONE#NONE NONE#NONE NONE#NONE ProtocolIsParallelExecutab#DslProtocolRow ProtocolTransType#DslProtocolRow
            EndiannessConvEnabled#DslProtocolRow TransToBoot#DslProtocolRow</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_PROTOCOLCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
	 
         <STRUCTURE-ARRAY-ENTRY>	 
          <NAME>Dcm_GaaProtocolIds</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaProtocolIds[DCM_NUM_PROTOCOL_CONFIGD]; */</COMMENT>
          <FIELD>ProId</FIELD>
          <TYPE>UINT8</TYPE>
      	  <RANGE>NONE#NONE</RANGE>
          <REFERENCE>ProtocolId#DslProtocolRow</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Array</ENTRY-TYPE>	  
         </STRUCTURE-ARRAY-ENTRY>
	 
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaBufferConfig</NAME>
          <COMMENT>/* CONST(Dcm_BufferConfig,DCM_CONST) Dcm_GaaBufferConfig[DCM_NUM_OF_BUFFER_CONFIG]; */</COMMENT>
          <FIELD>pBufferArea ulBufferSize</FIELD>
          <TYPE>PSTR UINT32</TYPE>
       <RANGE>NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>NONE#NONE BufferSize#DslBuffer</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_BUFFER_CONFIG</SIZE-MACRO>
        <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
        <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>          
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSIdConfig</NAME>
          <COMMENT>/* CONST(Dcm_ServiceIdConfigType,DCM_CONST) Dcm_GaaSIdConfig[DCM_NUM_OF_SIDCONFIG]; */</COMMENT>
          <FIELD>pSession pSecurity p2Function pSubServiceId ucseviceModeruleindexarray ucSessionCount ucSecurityCount
          ucSubServiceCount ucServiceId ucMinReqLength blSubFunctionAvailable blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR PSTR PSTR UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 BOOL BOOL</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>SidTabSessionLevelRef#DsdService SidTabSecurityLevelRef#DsdService SidTabModeRuleRef#DsdService
          SidTabFnc#DsdService NONE#NONE SidTabSessionLevelRef#DsdService SidTabSecurityLevelRef#DsdService DsdSubService#CON
          SidTabServiceId#DsdService SidTabServiceId#DsdService SidTabSubfuncAvail#DsdService SidTabModeRuleRef#DsdService
          SidTabModeRuleRef#DsdService</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_SIDCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSubServiceIdConfig</NAME>
          <COMMENT>/* CONST(Dcm_SubServiceIdConfigType,DCM_CONST) Dcm_GaaSubServiceIdConfig[DCM_NUM_OF_SUBSERVICEIDCONFIG]; */</COMMENT>
          <FIELD>pSubSerSession pSubSerSecurity pSubServiceFnc ucsubmoderuleArrayindex ucSubSerSessionCount ucSubSerSecurityCount ucSubServiceId ucSubFuncLength blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR PSTR UINT8 UINT8 UINT8 UINT8 UINT8 BOOL</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>SubServiceSessionRef#DsdSubService SubServiceSecurityRef#DsdSubService
          SubServiceModeRuleRef#DsdSubService SubServiceSessionRef#DsdSubService
          SubServiceSecurityRef#DsdSubService DcmDsdSubServiceId#DsdSubService SubServiceModeRuleRef#DsdSubService</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_SUBSERVICEIDCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDslPeriodicTxId</NAME>
          <COMMENT>/* VAR(Dcm_DslPeriodicTxId, DCM_VAR) Dcm_GaaDcmDslPeriodicTxId[]; */</COMMENT>
          <FIELD>pPerTxPduIdStatus usPerTxConfmPduId ddPerTxPduId ucPeriBufferIndex ucPerTxPduIdStatusMask blBufferProvided</FIELD>
          <TYPE>PSTR UINT16 UINT8 UINT8 UINT8 STR</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>PeriodicTxPduRef#DslPeriodicConnection PeriodicTxConfirmationPduId#DslPeriodicConnection
          PeriodicTxBufferRef#DslPeriodicConnection</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDslRoeTxId</NAME>
          <COMMENT>/* CONST(Dcm_DslRoeTrans, DCM_CONST) Dcm_GaaDcmDslRoeTxId[]; */</COMMENT>
          <FIELD>ddRoeTxPduId usRoeTxConfirmPduId ucRoeRxBufferId ucRoeTxBufferId blRoeTransType</FIELD>
          <TYPE>UINT8 UINT16 UINT8 UINT8 UINT8</TYPE>
      <RANGE>NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>RoeTxPduRef#DslResponseOnEvent RoeTxConfirmationPduId#DslResponseOnEvent</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSecuritylevelsToSId</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaSecuritylevelsToSId[DCM_NUM_OF_SECURITYLEVELSTOSID]; */</COMMENT>
          <FIELD>Security</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>NONE#NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_SECURITYLEVELSTOSID</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSessionsToSId</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaSessionsToSId[DCM_NUM_OF_GAASESSIONSTOSID]; */</COMMENT>
          <FIELD>Session</FIELD>
          <TYPE>UINT8</TYPE>
      <RANGE>NONE#NONE</RANGE>
          <REFERENCE>NONE#NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAASESSIONSTOSID</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         
         
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDiagSessionConfig</NAME>
          <COMMENT>/* CONST(Dcm_DiagSessionConfigType, DCM_CONST) Dcm_GaaDiagSessionConfig[DCM_NUM_OF_DIAGSESSIONCONFIG]; */</COMMENT>
          <FIELD>ddSesCtrlLevel usSesP2StrServerMax usSesP2ServerMax  ucSesForBootLevel</FIELD>
          <TYPE>UINT8 UINT16 UINT16 UINT8</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>SessionP2StarServerMax#DspSessionRow SessionP2ServerMax#DspSessionRow
          SessionLevel#DspSessionRow SessionBoot#DspSessionRow</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_DIAGSESSIONCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSecurityLevConfig</NAME>
          <COMMENT>/* CONST(Dcm_SecurityLevConfigType, DCM_CONST) Dcm_GaaSecurityLevConfig[DCM_NUM_OF_SECURITYLEVELCONFIG]; */</COMMENT>
          <FIELD>pGetSeedFun pGetSeedAsyncFun pGetSeedFunadr pAsyncGetSeedFunadr pCompareKeyFun pAsyncCompareKeyFun ddSecLevel ulSecurityADRSize ulSizeOfKey ulSizeOfSeed usSecDelayInvKey usSecurityDelayTimeOnBoot ucSecNumMaxAttDelay
           ucSecurityUsePort</FIELD>
          <TYPE>PSTR PSTR PSTR PSTR PSTR PSTR UINT8 UINT32 UINT32 UINT32 UINT16 UINT16 UINT8 UINT8</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>GetSeedFnc#DspSecurityRow GetSeedFnc#DspSecurityRow GetSeedFnc#DspSecurityRow GetSeedFnc#DspSecurityRow
          GetCompareFnc#DspSecurityRow GetCompareFnc#DspSecurityRow
          SecurityDelayTime#DspSecurityRow SecurityDelayTimeOnBoot#DspSecurityRow
          SecurityADRSize#DspSecurityRow SecurityKeySize#DspSecurityRow SecurityLevel#DspSecurityRow
          SecurityNumAttDelay#DspSecurityRow SecuritySeedSize#DspSecurityRow SecurityUsePort#DspSecurityRow</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_SECURITYLEVELCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDInfoTypeDidReadConfig</NAME>
          <COMMENT>/* CONST(Dcm_DIDInfoTypeDidRead, DCM_CONST) Dcm_GaaDIDInfoTypeDidReadConfig[DCM_NUM_OF_GAADIDINFOTYPEDIDREADCONFIG]; */</COMMENT>
          <FIELD>pDidReadSession pDidReadSecurity ucDIDmoderuleArrayindex ucDidReadSesCount ucDidReadSecCount ucMaxNumSourceElem blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR UINT8 UINT8 UINT8 UINT8 BOOL</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>ReadSessionRef#DspRead ReadSecurityLevelRef#DspRead 
            ReadSessionRef#DspRead ReadSecurityLevelRef#DspRead DDDIDMaxElements#DspRead</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAADIDINFOTYPEDIDREADCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDInfoTypeDidWriteConfig</NAME>
          <COMMENT>/* CONST(Dcm_DIDInfoTypeDidWrite, DCM_CONST) Dcm_GaaDIDInfoTypeDidWriteConfig[DCM_NUM_OF_GAADIDINFOTYPEDIDWRITECONFIG]; */</COMMENT>
          <FIELD>pDidWriteSession pDidWriteSecurity ucDIDmoderuleArrayindex ucDidWriteSesCount ucDidWriteSecCount blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR UINT8 UINT8 UINT8 BOOL</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>WriteSessionRef#DspWrite WriteSecurityLevelRef#DspWrite 
          WriteSessionRef#DspWrite WriteSecurityLevelRef#DspWrite</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAADIDINFOTYPEDIDWRITECONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDInfoTypeDidCtrlConfig</NAME>
          <COMMENT>/* CONST(Dcm_DIDInfoTypeDidCtrl, DCM_CONST) Dcm_GaaDIDInfoTypeDidCtrlConfig[DCM_NUM_OF_GAADIDINFOTYPEDIDCTRLCONFIG]; */</COMMENT>
          <FIELD>pDidCtrlSession pDidCtrlSecurity ucDidCtrlSesCount ucDidCtrlSecCount ucDIDmoderuleArrayindex blFreezeCrntState
          blResetToDefault blRetCtrlToEcu blShrtTermAdj blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR UINT8 UINT8 UINT8 BOOL BOOL BOOL BOOL BOOL</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>ControlSessionRef#DspControl ControlSecurityLevelRef#DspControl
          ControlSessionRef#DspControl ControlSecurityLevelRef#DspControl FreezeCurrentState#DspControl
          ResetToDefault#DspControl ReturnControlToEcu#DspControl
          ShortTermAdjustment#DspControl</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAADIDINFOTYPEDIDCTRLCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDataInfoTypeConfig</NAME>
          <COMMENT>/* CONST(Dcm_DataInfoType, DCM_CONST) Dcm_GaaDataInfoTypeConfig[DCM_NUM_OF_GAADATAINFOTYPECONFIG]; */</COMMENT>
          <FIELD>ulDataScalingInfoSize blDataFixedLength</FIELD>
          <TYPE>UINT32 STR</TYPE>
       <RANGE> NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>DataScalingInfoSize#DataInfo DataFixedLength#DataInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAADATAINFOTYPECONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDInfoTypeConfig</NAME>
          <COMMENT>/* CONST(Dcm_DIDInfoType, DCM_CONST) Dcm_GaaDIDInfoTypeConfig[DCM_NUM_OF_GAADIDINFOTYPECONFIG]; */</COMMENT>
          <FIELD>pDidControl pDidRead pDidWrite blDynamicallyDefined</FIELD>
          <TYPE>PSTR PSTR PSTR BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE DCM_FALSE#DCM_TRUE</RANGE>
          <REFERENCE>DspControl#CON DspRead#CON DspWrite#CON 
            SourceDid#CON MemoryRangeDDid#CON DynamicallyDefined#DspDidInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAADIDINFOTYPECONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspDataConfig</NAME>
          <COMMENT>/* CONST(Dcm_DcmDspDataconfig, DCM_CONST) Dcm_GaaDcmDspDataConfig[DCM_NUM_OF_GAADCMDSPDATACONFIG]; */</COMMENT>
          <FIELD>
          pConditionCheckReadAsync                    
          pReadDataLengthAsync
          pReadDataAsync
          
          pConditionCheckReadSync
          pReadDataLengthSync
          pReadDataSync

          pFreezeCurrentStateAsync
          pResetToDefaultAsync
          pReturnControlToEcuAsync
          pShortTermAdjustmentFixedAsync
          pShortTermAdjustmentVarAsync

          pFreezeCurrentStateSync
          pResetToDefaultSync
          pReturnControlToEcuSync
          pShortTermAdjustmentFixedSync
          pShortTermAdjustmentVarSync

          pGetScalingInformationAsync
          pGetScalingInformationSync

          pWriteDataFixedAsync
          pWriteDataVarAsync
          pWriteDataFixedSync
          pWriteDataVarSync

          pDataInfo 
          usDcmDspDataSize 
          usDcmDspDataBlockIdRef 
          ucWriteDataFncSenderReceiver 
          ucReadFunctionIndex 
          ucEcuSignalFunctionIndex 
          ucDcmDspDataUsePort 
          ucDcmDspDataType
          </FIELD>
          
          <TYPE>
          STR STR STR          
          STR STR STR 
          
          STR STR STR STR STR        
          STR STR STR STR STR
          
          STR STR
          
          STR STR STR STR

          PSTR
          UINT16 
          UINT16 
          UINT8 

          UINT8
          UINT8 
          UINT8
          UINT8
          </TYPE>
        <RANGE>
          NONE#NONE NONE#NONE NONE#NONE 
          NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE 

          NONE#NONE NONE#NONE NONE#NONE NONE#NONE           
        </RANGE>
        <ELEMENT-COMMENT>
        </ELEMENT-COMMENT>
        <REFERENCE>
          NONE#NONE NONE#NONE NONE#NONE 
          NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
          
          NONE#NONE NONE#NONE NONE#NONE NONE#NONE 

          NONE#NONE NONE#NONE NONE#NONE NONE#NONE 
        </REFERENCE>
          
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAADCMDSPDATACONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteUint8Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteUint8Function, DCM_CONST) Dcm_GaaSigReadWriteUint8Func[]; */</COMMENT>
          <FIELD>pWriteDataUint8Func pReadDataUint8Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteUint16Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteUint16Function, DCM_CONST) Dcm_GaaSigReadWriteUint16Func[]; */</COMMENT>
          <FIELD>pWriteDataUint16Func pReadDataUint16Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
      <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteUint32Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteUint32Function, DCM_CONST) Dcm_GaaSigReadWriteUint32Func[]; */</COMMENT>
          <FIELD>pWriteDataUint32Func pReadDataUint32Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteSint8Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteSint8Function, DCM_CONST) Dcm_GaaSigReadWriteSint8Func[]; */</COMMENT>
          <FIELD>pWriteDataSint8Func pReadDataSint8Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteSint16Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteSint16Function, DCM_CONST) Dcm_GaaSigReadWriteSint16Func[]; */</COMMENT>
          <FIELD>pWriteDataSint16Func pReadDataSint16Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigReadWriteSint32Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDSigReadWriteSint32Function, DCM_CONST) Dcm_GaaSigReadWriteSint32Func[]; */</COMMENT>
          <FIELD>pWriteDataSint32Func pReadDataSint32Func</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDUint8Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDUint8Func, DCM_CONST) Dcm_GaaPIDUint8Func[]; */</COMMENT>
          <FIELD>pPIDDataUint8Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDUint16Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDUint16Func, DCM_CONST) Dcm_GaaPIDUint16Func[]; */</COMMENT>
          <FIELD>pPIDDataUint16Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDUint32Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDUint32Func, DCM_CONST) Dcm_GaaPIDUint32Func[]; */</COMMENT>
          <FIELD>pPIDDataUint32Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDSint8Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDSint8Func, DCM_CONST) Dcm_GaaPIDSint8Func[]; */</COMMENT>
          <FIELD>pPIDDataSint8Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDSint16Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDSint16Func, DCM_CONST) Dcm_GaaPIDSint16Func[]; */</COMMENT>
          <FIELD>pPIDDataSint16Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDSint32Func</NAME>
          <COMMENT>/* CONST(Dcm_PIDSint32Func, DCM_CONST) Dcm_GaaPIDSint32Func[]; */</COMMENT>
          <FIELD>pPIDDataSint32Func</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalUint8Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalUint8Function, DCM_CONST) Dcm_GaaEcuSignalUint8Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalUint16Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalUint16Function, DCM_CONST) Dcm_GaaEcuSignalUint16Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalUint32Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalUint32Function, DCM_CONST) Dcm_GaaEcuSignalUint32Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalSint8Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalSint8Function, DCM_CONST) Dcm_GaaEcuSignalSint8Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalSint16Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalSint16Function, DCM_CONST) Dcm_GaaEcuSignalSint16Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaEcuSignalSint32Func</NAME>
          <COMMENT>/* CONST(Dcm_DIDEcuSignalSint32Function, DCM_CONST) Dcm_GaaEcuSignalSint32Func[]; */</COMMENT>
          <FIELD>pDataReadEcuSignal pDataControlEcuSignalFnc</FIELD>
          <TYPE>PSTR PSTR</TYPE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
           <REFERENCE>NONE#NONE</REFERENCE>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDParaConfig</NAME>
          <COMMENT>/* CONST(Dcm_DIDParaConfig, DCM_CONST) Dcm_GaaDIDParaConfig[DCM_NUM_OF_DIDPARACONFIG]; */</COMMENT>
          <FIELD>pDcmDspSignal pActivateEventFnc pDidInfo pDidRef usDcmDspDidIdentifier usDidRefCount
          ucDcmDspDidRoeEventId ucDcmDspSignalCount blDidRoeQueueEnabled blDcmDspDidExtRoeEnabled blDspDidUsed blPreConfigEnabled</FIELD>
          <TYPE>PSTR PSTR PSTR PSTR UINT16 UINT16 UINT8 UINT8 UINT8 BOOL BOOL BOOL BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE DCM_TRUE#DCM_FALSE</RANGE>
          <REFERENCE>Signal#CON RoeActivateFnc#ExtRoe DidInfoRef#DspDid 
          DidRef#DspDid RoeEventId#ExtRoe DidIdentifier#DspDid
          DidRef#DspDid Signal#CON RoeQueueEnabled#DspDid DidUsed#DspDid PreConfigured#DspDid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
	  <SIZE-MACRO>DCM_NUM_OF_DIDPARACONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspDIDRangeConfig</NAME>
          <COMMENT>/* VAR(Dcm_DIDRangeConfig, DCM_VAR) Dcm_GaaDcmDspDIDRangeConfig[DCM_NUM_OF_DCMDSPDIDRANGECONFIG]; */</COMMENT>
          <FIELD>pIsDidAvailableFnc pDidRangeReadDidFnc pDidRangeWriteDidFnc pDidInfo usDidRangeIdLowerLimit usDidRangeIdUpperLimit usDidRangeMaxDataLength
          ucDidRangeOpStatus blDidRangeHasGaps blDcmDspDidRangeUsePort</FIELD>
          <TYPE>STR STR STR PSTR UINT16 UINT16 UINT16 UINT8 STR STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>Signal#CON RoeActivateFnc#ExtRoe DidInfoRef#DspDid 
          DidRef#DspDid RoeEventId#ExtRoe DidIdentifier#DspDid
          DidRef#DspDid Signal#CON RoeQueueEnabled#DspDid DidUsed#DspDid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_DCMDSPDIDRANGECONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDidRefToDid</NAME>
          <COMMENT>/* CONST(uint16, DCM_CONST) Dcm_GaaDidRefToDid[]; */</COMMENT>
          <FIELD>RefToDid</FIELD>
          <TYPE>UINT16</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>DidRef#DspDid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_16
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_16
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDidId</NAME>
          <COMMENT>/* CONST(uint16,DCM_CONST) Dcm_GaaDidId[]; */</COMMENT>
          <FIELD>DidId</FIELD>
          <TYPE>UINT16</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>DidIdentifier#DspDid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Array</ENTRY-TYPE>         
        </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspSignalConfig</NAME>
          <COMMENT>/* VAR(Dcm_DcmDspSignalconfig, DCM_VAR) Dcm_GaaDcmDspSignalConfig[DCM_NUM_OF_GAADCMDSPSIGNALCONFIG]; */</COMMENT>
          <FIELD>pDcmDspData pDidPackSignal pDidUnPackSignal usDcmDspDidDataPos ucDidSignalOpStatus</FIELD>
          <TYPE>PSTR PSTR PSTR UINT16 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DataRef#Signal DataPos#Signal</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAADCMDSPSIGNALCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDPackSignal</NAME>
          <COMMENT>/* CONST(Dcm_DIDPackSignal, DCM_CONST) Dcm_GaaDIDPackSignal[DCM_NUM_OF_GAADIDPACKSIGNAL]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucStartMask ucEndMask ucWrFuncIndex ucSignalTypeorSize ucSignalStartByte</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 PSTR UINT8</TYPE>
          <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DataRef#Signal DataPos#Signal</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
          <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAADIDPACKSIGNAL</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDIDUnPackSignal</NAME>
          <COMMENT>/* CONST(Dcm_DIDUnPackSignal, DCM_CONST) Dcm_GaaDIDUnPackSignal[DCM_NUM_OF_GAADIDUNPACKSIGNAL]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucEndMask ucRdFuncIndex ucSignalType ucSignalSize ucSignalStartByte ucSignMask</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DataRef#Signal DataPos#Signal</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAADIDUNPACKSIGNAL</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
                 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaRtnIdentifier</NAME>
          <COMMENT>/* CONST(uint16,DCM_CONST) Dcm_GaaRtnIdentifier[]; */</COMMENT>
          <FIELD>RId</FIELD>
          <TYPE>UINT16</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>RoutineIdentifier#DspRoutine</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_16
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_16
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigRdFuncPtr</NAME>
          <COMMENT>/* CONST(Dcm_SigRdFuncPtr,DCM_CONST) Dcm_GaaSigRdFuncPtr[DCM_NUM_OF_GAASIGRDFUNCPTR]; */</COMMENT>
          <FIELD>ucunpackstr</FIELD>
          <TYPE>STR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAASIGRDFUNCPTR</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSigWrFuncPtr</NAME>
          <COMMENT>/* CONST(Dcm_SigWrFuncPtr,DCM_CONST) Dcm_GaaSigWrFuncPtr[DCM_NUM_OF_GAASIGWRFUNCPTR]; */</COMMENT>
          <FIELD>ucpackstr</FIELD>
          <TYPE>STR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_GAASIGWRFUNCPTR</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
        </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaRoutineControlConfig</NAME>
          <COMMENT>/* VAR(Dcm_RoutineConfigType, DCM_VAR) Dcm_GaaRoutineControlConfig[DCM_NUM_OF_GAAROUTINECONTROLCONFIG]; */</COMMENT>
          <FIELD>pRoutineSignalInfo pRoutineSession 
          pRoutineSecurity ucDIDmoderuleArrayindex ulRoutineTotalStartOutLength ulRoutineTotalStopOutLength 
          ulRoutineTotalReqResOutLength usRoutineIdentifier ucSessionCount ucSecurityCount ucStartStopRIDFlag blRoutineUsePort 
          blRoutineFixedLength blRoutineUsed blRequestResultSupported blStopRoutineSupported blModeRuleConfigured</FIELD>
          <TYPE>PSTR PSTR PSTR UINT8 UINT32 UINT32 UINT32 UINT16 UINT8 UINT8 UINT8 UINT8 STR STR STR STR STR BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>RequestResultsRoutineFnc#DspRoutine StartRoutineFnc#DspRoutine
          StopRoutineFnc#DspRoutine RoutineInfoRef#DspRoutine
          RoutineSessionRef#DspRoutineAuthorization RoutineSecurityLevelRef#DspRoutineAuthorization
          RoutineIdentifier#DspRoutine RoutineSecurityLevelRef#DspRoutineAuthorization
          RoutineSessionRef#DspRoutineAuthorization RoutineUsePort#DspRoutine
          RoutineFixedLength#DspRoutine RoutineUsed#DspRoutine 
          RequestResultsRoutineSupported#DspRoutine StopRoutineSupported#DspRoutine</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_NUM_OF_GAAROUTINECONTROLCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaRoutineSignalInfo</NAME>
          <COMMENT>/* CONST(Dcm_RoutineSignalInfoType, DCM_CONST) Dcm_GaaRoutineSignalInfo[]; */</COMMENT>
          <FIELD>pRequestResOut pStartRoutineIn pStartRoutineOut pStopRoutineIn pStopRoutineOut 
            ucNumOfStartRtnInSignal ucNumOfStopRtnInSignal ucNumOfStartRtnOutSignal ucNumOfStopRtnOutSignal ucNumOfRtnRequestResOutSignal</FIELD>
          <TYPE>PSTR PSTR PSTR PSTR PSTR UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaRequestResOutSignalType</NAME>
          <COMMENT>/* CONST(Dcm_RequestResOutSignalType, DCM_CONST) Dcm_GaaRequestResOutSignalType[]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucStartMask ucEndMask ucWrFuncIndex ucSignalTypeorSize ucSignalStartByte</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 PSTR UINT8</TYPE>
      <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaStopRoutineInSignal</NAME>
          <COMMENT>/* CONST(Dcm_StopRoutineInSignalType, DCM_CONST) Dcm_GaaStopRoutineInSignal[]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucEndMask ucRdFuncIndex ucSignalType ucSignalSize ucSignalStartByte ucSignMask</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaStopRoutineOutSignal</NAME>
          <COMMENT>/* CONST(Dcm_StopRoutineOutSignalType, DCM_CONST) Dcm_GaaStopRoutineOutSignal[]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucStartMask ucEndMask ucWrFuncIndex ucSignalTypeorSize ucSignalStartByte</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 PSTR UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaStartRoutineInSignal</NAME>
          <COMMENT>/* CONST(Dcm_StartRoutineInSignalType, DCM_CONST) Dcm_GaaStartRoutineInSignal[]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucEndMask ucRdFuncIndex ucSignalType ucSignalSize ucSignalStartByte ucSignMask</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaStartRoutineOutSignal</NAME>
          <COMMENT>/* CONST(Dcm_StartRoutineOutSignalType, DCM_CONST) Dcm_GaaStartRoutineOutSignal[]; */</COMMENT>
          <FIELD>ulSignalLength ucNoofShiftBits ucStartMask ucEndMask ucWrFuncIndex ucSignalTypeorSize ucSignalStartByte</FIELD>
          <TYPE>UINT32 UINT8 UINT8 UINT8 UINT8 PSTR UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaRequestControlConfig</NAME>
          <COMMENT>/* CONST(Dcm_RequestControlConfigType, DCM_CONST) Dcm_GaaRequestControlConfig[]; */</COMMENT>
          <FIELD>pReqControlFnc ucRequestControlInBufferSize ucRequestControlOutBufferSize ucRequestControlTestId</FIELD>
          <TYPE>STR UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>RequestControlFnc#DspRequestControl RequestControlInBufferSize#DspRequestControl
          DcmDspRequestControlOutBufferSize#DspRequestControl RequestControlTestId#DspRequestControl</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaTIDs</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaTIDs[]; */</COMMENT>
          <FIELD>TId</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>RequestControlTestId#DspRequestControl</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspRoe</NAME>
          <COMMENT>/* CONST(Dcm_DspRoe, DCM_CONST) Dcm_GaaDcmDspRoe[]; */</COMMENT>
          <FIELD>pRoeQueueEnabled usRoeBufferSize usRoeInterMessageTime usRoeMaxNumberofRetry blRoeInitonDSC</FIELD>
          <TYPE>STR UINT16 UINT16 UINT16 STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DspRoeQueue#CON RoeBufSize#DspRoe InterMessageTime#DspRoe RoeMaxNumberOfRetry#DspRoe
          InitOnDSC#DspRoe</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDspRoeQueueEnabled</NAME>
          <COMMENT>/* CONST(Dcm_RoeQueueEnabled, DCM_CONST) Dcm_GaaDspRoeQueueEnabled[]; */</COMMENT>
          <FIELD>usMaxEventLength usMaxQueueLength blQueueEnabled</FIELD>
          <TYPE>UINT16 UINT16 STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>MaxEventLength#DspRoeQueue MaxQueueLength#DspRoeQueue RoeQueueEnab#DspRoeQueue</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaVehInfoConfig</NAME>
          <COMMENT>/* CONST(Dcm_VehInfoConfigType, DCM_CONST) Dcm_GaaVehInfoConfig[]; */</COMMENT>
          <FIELD>pDcmVehInfoData ucVehInfoTypeId ucNoOfVehInfoData</FIELD>
          <TYPE>PSTR UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DspVehInfoData#CON VehInfoInfoType#DspVehInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaVehInfoData</NAME>
          <COMMENT>/* CONST(Dcm_VehInfoData, DCM_CONST) Dcm_GaaVehInfoData[]; */</COMMENT>
          <FIELD>pGetVehInfoTypeFnc ucVehInfoDataOrder ucVehInfoBufSize blVehInfoUsePort</FIELD>
          <TYPE>STR UINT8 UINT8 boolean</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE</RANGE>
          <REFERENCE>VehInfoDataReadFnc#DspVehInfoData VehInfoDataOrder#DspVehInfoData VehInfoDataSize#DspVehInfoData
          VehInfoDataUsePort#DspVehInfoData</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
       <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaVIDs</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaVIDs[]; */</COMMENT>
          <FIELD>VId</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>VehInfoDataOrder#DspVehInfoData</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaOBDMidConfig</NAME>
          <COMMENT>/* CONST(Dcm_OBDMidConfigType, DCM_CONST) Dcm_GaaOBDMidConfig[]; */</COMMENT>
          <FIELD>pDcmObdMidTids ucTestResultObdmid ucNoOfTids </FIELD>
          <TYPE>pSTR UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>DspTestResultObdMidTids#CON TestResultObdmid#DspTestResultObdMidTid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaObdMidTids</NAME>
          <COMMENT>/* CONST(Dcm_OBDMidTids, DCM_CONST) Dcm_GaaObdMidTids[]; */</COMMENT>
          <FIELD>pGetDTRValueFnc ucTestResultTestId ucTestResultUaSid</FIELD>
          <TYPE>STR UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>TestResultObdmidTidRef#DspTestResultObdMidTids TestResultObdmidTidUaSid#DspTestResultObdMidTids</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaOBDMIDs</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaOBDMIDs[]; */</COMMENT>
          <FIELD>ObdMidId</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>TestResultObdmid#DspTestResultObdMidTid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaOBDMIDEncodeByte</NAME>
          <COMMENT>/* CONST(Dcm_IDEncodeByteConfig, DCM_CONST) Dcm_GaaOBDMIDEncodeByte[]; */</COMMENT>
          <FIELD>ucEncodeByteA ucEncodeByteB ucEncodeByteC ucEncodeByteD</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>TestResultObdmid#DspTestResultObdMidTid TestResultObdmid#DspTestResultObdMidTid 
          TestResultObdmid#DspTestResultObdMidTid TestResultObdmid#DspTestResultObdMidTid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaVIDEncodeByte</NAME>
          <COMMENT>/* CONST(Dcm_IDEncodeByteConfig, DCM_CONST) Dcm_GaaVIDEncodeByte[]; */</COMMENT>
          <FIELD>ucEncodeByteA ucEncodeByteB ucEncodeByteC ucEncodeByteD</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>VehInfoInfoType#DspVehInfo VehInfoInfoType#DspVehInfo
          VehInfoInfoType#DspVehInfo VehInfoInfoType#DspVehInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaTIDEncodeByte</NAME>
          <COMMENT>/* CONST(Dcm_IDEncodeByteConfig, DCM_CONST) Dcm_GaaTIDEncodeByte[]; */</COMMENT>
          <FIELD>ucEncodeByteA ucEncodeByteB ucEncodeByteC ucEncodeByteD</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>RequestControlTestId#DspRequestControl RequestControlTestId#DspRequestControl
          RequestControlTestId#DspRequestControl RequestControlTestId#DspRequestControl</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDEncodeByte</NAME>
          <COMMENT>/* CONST(Dcm_IDEncodeByteConfig, DCM_CONST) Dcm_GaaPIDEncodeByte[]; */</COMMENT>
          <FIELD>ucEncodeByteA ucEncodeByteB ucEncodeByteC ucEncodeByteD</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>PidIdentifier#DspPid PidIdentifier#DspPid PidIdentifier#DspPid PidIdentifier#DspPid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDEncodeByte1</NAME>
          <COMMENT>/* CONST(Dcm_IDEncodeByteConfig, DCM_CONST) Dcm_GaaPIDEncodeByte1[]; */</COMMENT>
          <FIELD>ucEncodeByteA ucEncodeByteB ucEncodeByteC ucEncodeByteD</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>PidIdentifier#DspPid PidIdentifier#DspPid PidIdentifier#DspPid PidIdentifier#DspPid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDConfig</NAME>
          <COMMENT>/* CONST(Dcm_PIDConfigType, DCM_CONST) Dcm_GaaPIDConfig[]; */</COMMENT>
          <FIELD>pDcmDspPidData ucDcmDspPidIdentifier ucPidBufferSize ucPidService ucNumofPIDData ucNumofPIDSupportInfo blPIDUse</FIELD>
          <TYPE>PSTR UINT8 UINT8 UINT8 UINT8 UINT8 BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>DspPidData#CON PidSupportInfo#CON PidIdentifier#DspPid PidSize#DspPid PidService#DspPid
          PidUsed#DspPid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspPidData</NAME>
          <COMMENT>/* CONST(Dcm_DspPidData, DCM_CONST) Dcm_GaaDcmDspPidData[]; */</COMMENT>
          <FIELD>pGetPidValFnc pDcmDspPidPackSigRef pDcmDspPidDataSupportInfoRef ucPIDDataElementIndex ucDcmDspPidDataSize ucDcmDspPidDataPos 
          ucDcmDspPidDataSupportInfoBit ucDataSupportInfo ucDcmDspPidDataUsePort ucDcmPIDDataType ucReadFunctionIndex</FIELD>
          <TYPE>PSTR PSTR PSTR UINT8 UINT8 UINT8 UINT8 UINT8 UINT8 uint8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>PidDataReadFnc#PidService01 PidDataDemRef#PidService02 PidDataSize#DspPidData 
          PidDataPos#DspPidData PidDataSupportInfoBit#PidDataSupportInfo PidDataSupportInfoRef#PidDataSupportInfo 
          PidDataUsePort#PidService01</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDPackSignal</NAME>
          <COMMENT>/* CONST(Dcm_PIDPackSignal, DCM_CONST) Dcm_GaaPIDPackSignal[]; */</COMMENT>
          <FIELD>ucNoofShiftBits ucStartMask ucEndMask ucWrFuncIndex ucSignalTypeorSize ucSignalStartByte</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8 PSTR UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>PidDataReadFnc#PidService01 PidDataDemRef#PidService02 PidDataSize#DspPidData 
          PidDataPos#DspPidData PidDataSupportInfoBit#PidDataSupportInfo PidDataSupportInfoRef#PidDataSupportInfo 
          PidDataUsePort#PidService01</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDcmDspPidSupportInfo</NAME>
          <COMMENT>/* CONST(DcmDspPidSupportInfo, DCM_CONST) Dcm_GaaDcmDspPidSupportInfo[]; */</COMMENT>
          <FIELD>ucDcmDspPidSupportInfoLen ucDcmDspPidSupportInfoPos</FIELD>
          <TYPE>UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>PidSupportInfoLen#PidSupportInfo PidSupportInfoPos#PidSupportInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPIDs</NAME>
          <COMMENT>/* CONST(uint8,DCM_CONST) Dcm_GaaPIDs[]; */</COMMENT>
          <FIELD>PidId</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>PidIdentifier#DspPid</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
        </STRUCTURE-ARRAY-ENTRY>
        <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaReadMemRngConfig</NAME>
          <COMMENT>/* CONST(Dcm_ReadMemRngInfoConfigType, DCM_CONST) Dcm_GaaReadMemRngConfig[DCM_TOTAL_NUM_READ_MEMORY_CONFIGURED]; */</COMMENT>
          <FIELD>pReadMemRngSec ucDIDmoderuleArrayindex ulReadMemoryRangeHigh ulReadMemoryRangeLow ucReadMemoryIdentifier ucReadMemSecCount blUseMemoryValue blModeRuleConfigured</FIELD>
          <TYPE>PSTR UINT8 UINT32 UINT32 UINT8 UINT8 STR BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>ReadMemoryRangeSecurityRef#ReadMemoryRangeInfo ReadMemoryRangeHigh#ReadMemoryRangeInfo
          ReadMemoryRangeLow#ReadMemoryRangeInfo MemoryIdValue#MemoryIdInfo ReadMemoryRangeSecurityRef#ReadMemoryRangeInfo
          UseMemoryId#ReadMemoryRangeInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>  
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaWriteMemRngConfig</NAME>
          <COMMENT>/* CONST(Dcm_WriteMemRngInfoConfigType, DCM_CONST) Dcm_GaaWriteMemRngConfig[DCM_TOTAL_NUM_WRITE_MEMORY_CONFIGURED]; */</COMMENT>
          <FIELD>pWriteMemRngSec ucDIDmoderuleArrayindex ulWriteMemoryRangeHigh ulWriteMemoryRangeLow ucWriteMemoryIdentifier ucWriteMemSecCount blUseMemoryValue blModeRuleConfigured</FIELD>
          <TYPE>PSTR UINT8 UINT32 UINT32 UINT8 UINT8 STR BOOL</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE DCM_TRUE#DCM_FALSE </RANGE>
          <REFERENCE>WriteMemoryRangeSecurityRef#WriteMemoryRangeInfo WriteMemoryRangeHigh#WriteMemoryRangeInfo
          WriteMemoryRangeLow#WriteMemoryRangeInfo MemoryIdValue#MemoryIdInfo WriteMemoryRangeSecurityRef#WriteMemoryRangeInfo
          UseMemoryId#ReadMemoryRangeInfo</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaAddressAndLengthFormatIds</NAME>
          <COMMENT>/* CONST(uint8, DCM_CONST) Dcm_GaaAddressAndLengthFormatIds[DCM_NUM_OF_ADDRESS_LENGTH_FORMAT_ID_CONFIG]; */</COMMENT>
          <FIELD>Index</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>ARRAY</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSrcDIDInfoTypeConfig</NAME>
          <COMMENT>/* VAR(Dcm_SrcIDInfoType, DCM_VAR) Dcm_GaaSrcDIDInfoTypeConfig[]; */</COMMENT>
          <FIELD>usSrcID usPriority ucPosInSrc ucMemSize </FIELD>
          <TYPE>UINT16 UINT16 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>NONE NONE NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDymDefinedDIDInfoType</NAME>
          <COMMENT>/* VAR(Dcm_DymDefinedDIDInfoType, DCM_VAR) Dcm_GaaDymDefinedDIDInfoType[DCM_TOTAL_NUM_OF_DYM_DID]; */</COMMENT>
          <FIELD>pSrcIDInfo usDynDid ucSrcIDCount blDidSet</FIELD>
          <TYPE>PSTR UINT16 UINT8 STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>NONE NONE NONE NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDymMemDIDInfoType</NAME>
          <COMMENT>/* VAR(Dcm_DymMemDIDInfoType, DCM_VAR) Dcm_GaaDymMemDIDInfoType[DCM_TOTAL_NUM_OF_DYM_DID]; */</COMMENT>
          <FIELD>pMemAddInfo usDynDid ucMemAddressCount blMemAddSet</FIELD>
          <TYPE>PSTR UINT16 UINT8 STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>NONE NONE NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaMemAddInfoTypeConfig</NAME>
          <COMMENT>/* VAR(Dcm_MemAddInfoType, DCM_VAR) Dcm_GaaMemAddInfoTypeConfig[]; */</COMMENT>
          <FIELD>ulMemAddrs ulMemSize usPriority</FIELD>
          <TYPE>UINT32 UINT32 UINT16</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>NONE NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_INIT_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaCbkReqServices</NAME>
          <COMMENT>/* CONST(Dcm_CbkReqServicesConfigType, DCM_CONST) Dcm_GaaCbkReqServices[DCM_TOTAL_NUM_OF_CALLBACK_REQUEST]; */</COMMENT>
          <FIELD>pStartProtocolFun pStopProtocolFun</FIELD>
          <TYPE>PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>StartProtocolFnc#CallBackDCMReqServ StopProtocolFnc#CallBackDCMReqServ</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaManuIndConfigType</NAME>
          <COMMENT>/* CONST(Dcm_SerReqManuIndConfigType, DCM_CONST) Dcm_GaaManuIndConfigType[]; */</COMMENT>
          <FIELD>pManuIndicationFun pManuConfirmationFun</FIELD>
          <TYPE>STR STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>ManufacturerIndicationFnc#ManufacturerIndication</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaSuppIndConfigType</NAME>
          <COMMENT>/* CONST(Dcm_SerReqSuppIndConfigType, DCM_CONST) Dcm_GaaSuppIndConfigType[]; */</COMMENT>
          <FIELD>pSuppIndicationFun pSuppConfirmationFun</FIELD>
          <TYPE>STR STR</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>SupplierIndicationFnc#SupplierIndication</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaCommControlConfig</NAME>
          <COMMENT>/* CONST(Dcm_CommControlConfigType, DCM_CONST) Dcm_GaaCommControlConfig[DCM_NUM_OF_COMMCONTROLCONFIG]; */</COMMENT>
          <FIELD>pSchMSwitchCommModeFunc ucSingleComChannelRef ucSubSetNumber</FIELD>
          <TYPE>PSTR UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>SpecificComMChannelRef#ComControlSpecificChannel SubNetNumber#ComControlSpecificChannel</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
          <SIZE-MACRO>DCM_NUM_OF_COMMCONTROLCONFIG</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaAllCommControlConfig</NAME>
          <COMMENT>/* CONST(Dcm_AllCommControlConfig, DCM_CONST) Dcm_GaaAllCommControlConfig[DCM_TOTAL_NUM_OF_ALL_CHANNEL]; */</COMMENT>
          <FIELD>pSchMSwitchCommModeFunc AllComChannelRef</FIELD>
          <TYPE>PSTR UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>AllComMChannelRef#ComControlAllChannel</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
        <SIZE-MACRO>DCM_TOTAL_NUM_OF_ALL_CHANNEL</SIZE-MACRO>
          <SIZE-MACRO-COMMENT></SIZE-MACRO-COMMENT>
          <SIZE-MACRO-PREFIX></SIZE-MACRO-PREFIX>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaControlDTCSettings</NAME>
          <COMMENT>/* CONST(Dcm_ControlDTCSettings,DCM_CONST)Dcm_GaaControlDTCSettings[]; */</COMMENT>
          <FIELD>pCntrlDTCModeRulePtr</FIELD>
          <TYPE>PSTR</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>ControlDTCReEnableModeRuleRef#ControlDTCSetting</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaModeRuleConfig</NAME>
          <COMMENT>/* CONST(Dcm_ModeRuleConfigType, DCM_CONST) Dcm_GaaModeRuleConfig[]; */</COMMENT>
          <FIELD>ucLogicalOperator ucNRCType ucDcmNoOfModeCondnArg ucIndexOfModeConditionIndexArray ucDcmNoOfModeRuleArg ucIndexOfModeRuleIndexArray</FIELD>
          <TYPE>UINT8 UINT8 UINT8 UINT8 UINT8 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>LogicalOperator#ModeRule ModeRuleNrcValue#ModeRule ArgumentRef#ModeRule ArgumentRef#ModeRule 
          ArgumentRef#ModeRule ArgumentRef#ModeRule</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaModeConditionIndexArray</NAME>
          <COMMENT>/* CONST(uint8, DCM_CONST) Dcm_GaaModeConditionIndexArray[]; */</COMMENT>
          <FIELD>Indices</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>ArgumentRef#ModeRule</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
          <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaModeRuleIndexArray</NAME>
          <COMMENT>/* CONST(uint8, DCM_CONST) Dcm_GaaModeRuleIndexArray[]; */</COMMENT>
          <FIELD>Indices</FIELD>
          <TYPE>UINT8</TYPE>
       <RANGE>NONE#NONE</RANGE>
          <REFERENCE>ArgumentRef#ModeRule</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_8
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_8
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaModeConditionConfig</NAME>
          <COMMENT>/* CONST(Dcm_ModeConditionConfigType, DCM_CONST) Dcm_GaaModeConditionConfig[]; */</COMMENT>
          <FIELD>pGetCurrentMode ucBsworSwcMode ucConditionType</FIELD>
          <TYPE>PSTR PSTR UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>BswModeRef#ModeCondition ConditionType#ModeCondition</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaPeriodicTime</NAME>
          <COMMENT>/* CONST(uint16,DCM_CONST) Dcm_GaaPeriodicTime[]; */</COMMENT>
          <FIELD>PeriodicTime PeriodicTime1 PeriodicTime2</FIELD>
          <TYPE>PSTR PSTR PSTR</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>None#None</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_16
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_16
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
         <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GaaDslPeriodicData</NAME>
          <COMMENT>/* VAR(Dcm_DslPeriodicTxBuf, DCM_VAR) Dcm_GaaDslPeriodicData[]; */</COMMENT>
          <FIELD>pPerData ulDataLen ucDataStatus</FIELD>
          <TYPE>PSTR UINT32 UINT8</TYPE>
       <RANGE>NONE#NONE NONE#NONE NONE#NONE </RANGE>
          <REFERENCE>NONE NONE NONE</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_VAR_CLEARED_UNSPECIFIED
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Structure</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY>
	 <STRUCTURE-ARRAY-ENTRY>
          <NAME>Dcm_GusPreconfigureDidList</NAME>
          <COMMENT>/* CONST(uint16, DCM_CONST) Dcm_GusPreconfigureDidList[]; */</COMMENT>
          <FIELD>preconf_did</FIELD>
          <TYPE>UINT16</TYPE>
       <RANGE>NONE#NONE</RANGE>
	   <REFERENCE>None#None</REFERENCE>
          <ELEMENT-COMMENT></ELEMENT-COMMENT>
          <MEMMAP-START>#define DCM_START_SEC_CONST_16
#include "MemMap.h"</MEMMAP-START>
          <MEMMAP-STOP>#define DCM_STOP_SEC_CONST_16
#include "MemMap.h"</MEMMAP-STOP>
        <ENTRY-TYPE>Array</ENTRY-TYPE>
         </STRUCTURE-ARRAY-ENTRY> 
        </STRUCTURES-AND-ARRAYS>
    </Dcm_Cfg.c>
    <Dcm_Routine.h>
     <TEMPLATE>/*******************************************************************************
**  FILE-NAME: Dcm_Routine.h                                                  **
**                                                                            **
**  MODULE-NAME: AUTOSAR DCM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **                                                                **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                      Generation Tool Information                           **
*******************************************************************************/

CREATED_DATE_FILE


#ifndef DCM_ROUTINE_H
#define DCM_ROUTINE_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/

/*******************************************************************************
**                             MACROS                                        **
*******************************************************************************/
POLYSPACE_START_19_7

#define DCM_ROUTINE_PACK_2BYTE_SIGNAL(Array, Index) \
        ((uint16) (((uint16) ((Array)[(Index) + (DCM_ONE)] &lt;&lt; (DCM_EIGHT))) | (Array)[(Index)]))

   
#define DCM_ROUTINE_PACK_4BYTE_SIGNAL(Array, Index) \
        ((uint32) (((uint32) ((Array)[(Index) + (DCM_THREE)] &lt;&lt; (DCM_TWENTYFOUR))) | \
     ((uint32) ((Array)[(Index) + (DCM_TWO)] &lt;&lt; (DCM_SIXTEEN))) | \
     ((uint32) ((Array)[(Index) + (DCM_ONE)] &lt;&lt; (DCM_EIGHT))) | \
     ((uint32) (Array)[(Index)])))

POLYSPACE_STOP_19_7
/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/

/*******************************************************************************
**                      Function Prototypes                                   **
*******************************************************************************/

#define DCM_START_SEC_CODE
#include "MemMap.h"

#if(DCM_ROUTINECONTROL_SERVICE == STD_ON)    
extern FUNC(Std_ReturnType, DCM_CODE) Dcm_DcmRoutineControl(
  Dcm_OpStatusType OpStatus,
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
      
extern FUNC(Std_ReturnType, DCM_CODE) Dcm_StartRoutineUnPackSignal(
  uint16 LusRoutineIdentifier, uint16 LusRIDIndex, 
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);

extern FUNC(Std_ReturnType, DCM_CODE) Dcm_StopRoutineUnPackSignal(
  uint16 LusRoutineIdentifier, uint16 LusRIDIndex, 
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);

extern FUNC(Std_ReturnType, DCM_CODE) 
  Dcm_RequestResultRoutinePackSignal(uint16 LusRoutineIdentifier, 
  uint16 LusRIDIndex, 
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
  
#if(DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED == STD_ON)
extern FUNC(void, DCM_CODE) Dcm_StartRoutinePackSignal(
  uint16 LusRIDIndex, 
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
#endif

#if(DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED == STD_ON)
extern FUNC(void, DCM_CODE) Dcm_StopRoutinePackSignal(
  uint16 LusRIDIndex, 
  P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
#endif

extern FUNC(void, DCM_CODE)Dcm_RoutineHandleResponse(uint8 LucStatus, 
  uint16 LusRIDIndex);

extern FUNC(Std_ReturnType, DCM_CODE) Dcm_RoutineSignalFunction(
  uint8 LucSubFunction, uint16 LusRoutineIdentifier);
  
#if(DCM_OBD_REQ_CTLRL_ONBOADSYSTEM_SERVICE == STD_ON)
  extern FUNC(void, DCM_CODE) Dcm_DspHandleOBDRoutineControl
  (P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
#endif

extern FUNC(void, DCM_CODE) Dcm_RoutineMainFunction(void);
#endif

#define DCM_STOP_SEC_CODE
#include "MemMap.h"

#endif /* DCM_ROUTINE_H */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
  </Dcm_Routine.h>
    <Dcm_Routine.c>
    <TEMPLATE>/*******************************************************************************
**  FILE-NAME: Dcm_Routine.c                                                  **
**                                                                            **
**  MODULE-NAME: AUTOSAR DCM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
*******************************************************************************/

/*******************************************************************************
**                      Generation Tool Information                           **
*******************************************************************************/

CREATED_DATE_FILE


/*******************************************************************************
**                      Header File Inclusion                                 **
*******************************************************************************/
#include "Dcm.h"
#include "Dcm_PCTypes.h"
#include "Dcm_Routine.h"
#include "Dcm_Ram.h"
#include "Dcm_DspMain.h"
#include "Rte_Dcm.h"
#include "SchM_Dcm.h"
#include "Dcm_DspServices.h"
#include "Dcm_PackUnPack.h"
#include "Dcm_DsdInternal.h"
#include "Dcm_DslInternal.h"
#if(DCM_OBD_REQ_CTLRL_ONBOADSYSTEM_SERVICE == STD_ON)
#include "Dcm_DspOBDInternals.h"
#include "Dcm_DspOBDServices.h"
#endif
#include "Dcm_Config.h"

/*******************************************************************************
**                      Static Function Declarations                          **
*******************************************************************************/
#if(DCM_ROUTINECONTROL_SERVICE == STD_ON)
#define DCM_START_SEC_CODE
#include "MemMap.h"
static FUNC(Std_ReturnType, DCM_CODE) Dcm_Internal_DcmRoutineControl(
uint16 LusRoutineIdentifier, uint16 LusRIDIndex,
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext);
#define DCM_STOP_SEC_CODE
#include "MemMap.h"
#endif

/*******************************************************************************
**                      Global Variables                                      **
*******************************************************************************/

/*******************************************************************************
**                      Function Definitions                                  **
*******************************************************************************/

/* polyspace:begin&lt;RTE: NIV : Not a defect : No Action Planned > initialized variable */
/* polyspace:begin&lt;RTE: NIP : Not a defect : No Action Planned > pointer is not null */
/* polyspace:begin&lt;RTE: IDP : Not a defect : No Action Planned > address pointed to function is correct */
/* polyspace:begin&lt;RTE: COR : Not a defect : No Action Planned > function ptr points to a valid function */
/* polyspace:begin&lt;MISRA-C:8.10:Not a defect:Justify with annotations> Whether the Dcm api function is required internal or external linkage, depends on user configuration */
/* polyspace:begin&lt;MISRA-C:13.7:Not a defect:Justify with annotations> It has not any impact. */
Routinefuncs
/* polyspace:end&lt;MISRA-C:13.7:Not a defect:Justify with annotations> It has not any impact. */
/* polyspace:end&lt;MISRA-C:8.10:Not a defect:Justify with annotations> Whether the Dcm api function is required internal or external linkage, depends on user configuration */
/* polyspace:end&lt;RTE: IDP : Not a defect : No Action Planned > address pointed to function is correct */
/* polyspace:end&lt;RTE: NIV : Not a defect : No Action Planned > initialized variable */
/* polyspace:end&lt;RTE: NIP : Not a defect : No Action Planned > pointer is not null */
/* polyspace:end&lt;RTE: COR : Not a defect : No Action Planned > function ptr points to a valid function */

/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
</TEMPLATE>
    </Dcm_Routine.c>
  </OUTPUT-FILES>
  
  <ROUTINE-APIS>
#if(DCM_ROUTINECONTROL_SERVICE == STD_ON)
#define DCM_START_SEC_CODE
#include "MemMap.h"
static FUNC(Std_ReturnType, DCM_CODE) Dcm_Internal_DcmRoutineControl(
uint16 LusRoutineIdentifier, uint16 LusRIDIndex,
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_APPL_CONST)LpRIDTAB;
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;
  uint8 LucSubFunction;
  Std_ReturnType LddReturnValue = E_NOT_OK;

  LucSubFunction = pMsgContext->reqData[DCM_ZERO] &amp; DCM_SUBFUNCTION_MASK;
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;
  LddReturnValue = Dcm_RoutineSignalFunction(LucSubFunction, LusRoutineIdentifier);

  if((LddReturnValue == E_OK) &amp;&amp; (NULL_PTR != LpRoutineSignalInfo))
  {
    if(LucSubFunction == DCM_ROUTINE_CTRL_START)
    {
      /* Change the Flag to 0x0F */
      LpRIDTAB->ucStartStopRIDFlag = DCM_ROUTINE_START_MASK;
      #if(DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED == STD_ON)
      /* Check whether routine has startOut signal or not */
      if(LpRoutineSignalInfo->ucNumOfStartRtnOutSignal > DCM_ZERO)
      {
        (void)Dcm_StartRoutinePackSignal(LusRIDIndex, pMsgContext);
      }
      #endif
    }
    else if(LucSubFunction == DCM_ROUTINE_CTRL_STOP)
    {
      /* Change the Flag to 0xFF */
      LpRIDTAB->ucStartStopRIDFlag = DCM_ROUTINE_STOP_MASK;
      #if(DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED == STD_ON)
      /* Check whether routine has stopOut signal or not */
      if(LpRoutineSignalInfo->ucNumOfStopRtnOutSignal > DCM_ZERO)
      {
        (void)Dcm_StopRoutinePackSignal(LusRIDIndex, pMsgContext);
      }
      #endif
    }
    #if(DCM_ROUTINE_REQUEST_OUTSIGNAL_CONFIGURED == STD_ON)
    else if(LucSubFunction == DCM_ROUTINE_CTRL_REQUEST_RESULT)
    {
      /* Check whether routine has requestResultOut signal or not */
      if(LpRoutineSignalInfo->ucNumOfRtnRequestResOutSignal > DCM_ZERO)
      {
        (void)Dcm_RequestResultRoutinePackSignal(LusRoutineIdentifier, LusRIDIndex, pMsgContext);
      }
    }
    #endif
    else
    {
      /* To avoid QAC warning */
    }
  }
  
  return(LddReturnValue);
}

/*******************************************************************************
** Function Name        : Dcm_DcmRoutineControl                               **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : The Routine Control service is used to              **
**                        enable different diagnostic sessions in the server. **
**                        A diagnostic session enables a specific set of      **
**                        diagnostic services and/or functionality in the     **
**                        server                                              **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_DsdProcessingDone          **
*******************************************************************************/
FUNC(Std_ReturnType, DCM_CODE) Dcm_DcmRoutineControl(Dcm_OpStatusType OpStatus,
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2CONST(Dcm_SubServiceIdConfigType, AUTOMATIC, DCM_APPL_CONST) subServiceCfg;
  Std_ReturnType requestResult = E_NOT_OK;

  subServiceCfg = Dcm_DsdInternal_GetSubFunctionByMsgContext(pMsgContext);
  
  if(NULL_PTR == subServiceCfg)
  { 
    /* Never be reached, but this code is added for MISRA-rules */  
    Dcm_InternalSetNegResponse(pMsgContext, DCM_E_GENERALREJECT);
    Dcm_InternalProcessingDone(pMsgContext, DCM_SYNC_DONE);
  }
  /* External diagnostic subservice processing  */
  else if(NULL_PTR != subServiceCfg->pSubServiceFnc)
  {
    if ( (DCM_INITIAL == OpStatus) &amp;&amp; (pMsgContext->reqDataLen > 0U))
    {
      /* @SWS_Dcm_00764 The pointer in pMsgContext shall point behind the SubFunction */  
      pMsgContext->reqData = &amp;pMsgContext->reqData[1U];
      pMsgContext->reqDataLen--;
    }
    requestResult = subServiceCfg->pSubServiceFnc(OpStatus, pMsgContext);
  }
  /* Dcm-Internal diagnostic subservice processing  */  
  else
  {
    P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpReqResData;
    P2CONST(Dcm_RoutineConfigType, AUTOMATIC, DCM_APPL_CONST)LpRIDTAB;  
    P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpResData;
    #if(DCM_DSP_MODE_RULE_NRC  ==  STD_ON)
    P2CONST(Dcm_ModeRuleConfigType,  AUTOMATIC,  DCM_APPL_CONST) LpModeRule;
    #endif
    uint16 LusRoutineIdentifier;
    uint16 LusRIDIndex = (uint16)0x00;
    uint8 LucSubFunction;
    boolean LblSearchResult;
    Std_ReturnType LddReturnValue = E_NOT_OK;
    
    Dcm_GddNegRespError =  DCM_E_POSITIVERESPONSE;
    
    /* Get the pointer to the request data buffer of pMsgContext */
    LpReqResData = pMsgContext->reqData;
    
    LusRoutineIdentifier = ((uint16)((uint16)LpReqResData[DCM_ONE] &lt;&lt; DCM_EIGHT)) | (uint16)LpReqResData[DCM_TWO];
    /* Check if the RID from the request is supported and used */
    LblSearchResult = Dcm_IDSearch(DCM_GET_RID, LusRoutineIdentifier, &amp;LusRIDIndex);
    if(LblSearchResult == DCM_TRUE)
    {
    
      /* Initialize pointer to the parameters of requested RID */
      LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
      
      /* Check for the validity of length */
      if(pMsgContext->reqDataLen &lt; DCM_THREE)
      {
        /* Report the incorrect message length NRC */
        Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
      }
      else if(LpRIDTAB->blRoutineUsed == DCM_FALSE)
      {
        /* Report the Corresponding Routine is used or not */
        Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;
      }
      else
      {
        if(LpRIDTAB->pRoutineSession != NULL_PTR)
        {
         /* Invoke function to validate Routine session */
         LblSearchResult = Dcm_DsdValidateSession(LpRIDTAB->pRoutineSession, LpRIDTAB->ucSessionCount);
        }
        else
        {
          LblSearchResult = DCM_TRUE;
        }
     
        /* Check is the current session level supported by the service Id */
        if(LblSearchResult == DCM_TRUE)
        {  
          if(LpRIDTAB->pRoutineSecurity != NULL_PTR)
          {
            LblSearchResult = Dcm_DsdValidateSecurity(LpRIDTAB->pRoutineSecurity, LpRIDTAB->ucSecurityCount);
          } 
          else
          {
            LblSearchResult = DCM_TRUE;
          }
          
          /* Check the current security level supported by the service Id */
          if(LblSearchResult == DCM_TRUE)
          {
            #if(DCM_MODE_RULE  ==  STD_ON)
            if(LpRIDTAB->blModeRuleConfigured == DCM_TRUE)
            {
              LblSearchResult  =  Dcm_DsdModeRuleCheck(LpRIDTAB->ucDIDmoderuleArrayindex);
            }
            if(LblSearchResult  !=  DCM_TRUE)
            {
              #if(DCM_DSP_MODE_RULE_NRC == STD_ON)
              LpModeRule  =   &amp;Dcm_GaaModeRuleConfig[LpRIDTAB->ucDIDmoderuleArrayindex];              
              Dcm_GddNegRespError  =  LpModeRule->ucNRCType;
              #else
              Dcm_GddNegRespError  =  DCM_E_CONDITIONSNOTCORRECT;
              #endif
            }
            else
            #endif 
            {

              if((LusRoutineIdentifier >= (uint16)0xE000) &amp;&amp;
              (LusRoutineIdentifier &lt;= (uint16)0xE0FF))
              {
                #if(DCM_OBD_REQ_CTLRL_ONBOADSYSTEM_SERVICE == STD_ON)
                Dcm_DspHandleOBDRoutineControl(pMsgContext);
                #else
                /* Report the Request out of range NRC */
                Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;  
                #endif
              }
              else
              {
                /* Initialize Response buffer to local pointer */
                LpResData = pMsgContext->resData;
                /* Update sub function value */
                LucSubFunction = LpReqResData[DCM_ZERO] &amp; DCM_SUBFUNCTION_MASK;        
                /* Update sub function number */
                LpResData[DCM_ZERO] = LucSubFunction;
                /* Update First Byte RID */
                LpResData[DCM_ONE] = LpReqResData[DCM_ONE];
                /* Update Second Byte RID */
                LpResData[DCM_TWO] = LpReqResData[DCM_TWO];
                /* Invoke Routine Control,  LucSubFunction =1 for Start, 2 for Stop, 3 for request result */
                if(LucSubFunction == DCM_ROUTINE_CTRL_START)
                {
                  LddReturnValue = Dcm_StartRoutineUnPackSignal(LusRoutineIdentifier, LusRIDIndex, pMsgContext);

                  if(LddReturnValue == E_OK)
                  {
                    LddReturnValue = Dcm_Internal_DcmRoutineControl(LusRoutineIdentifier, LusRIDIndex, pMsgContext);
                  }
                }
                else if((LucSubFunction == DCM_ROUTINE_CTRL_STOP) &amp;&amp; (LpRIDTAB->blStopRoutineSupported == DCM_TRUE))
                {
                  LddReturnValue = Dcm_StopRoutineUnPackSignal(LusRoutineIdentifier, LusRIDIndex, pMsgContext);

                  if(LddReturnValue == E_OK)
                  {
                    LddReturnValue = Dcm_Internal_DcmRoutineControl(LusRoutineIdentifier, LusRIDIndex, pMsgContext);
                  }
                }
                else if((LucSubFunction == DCM_ROUTINE_CTRL_REQUEST_RESULT) &amp;&amp; (LpRIDTAB->blRequestResultSupported == DCM_TRUE))
                {
                  LddReturnValue = Dcm_RequestResultRoutinePackSignal(LusRoutineIdentifier, LusRIDIndex, pMsgContext); 
                }
                else
                {
                  /* Report the Subfunction not supported NRC */
                  Dcm_GddNegRespError = DCM_E_SUBFUNCTIONNOTSUPPORTED;
                }
              }
            }
          }
          else
          {
             /* Report the Security Access Denied NRC */
            Dcm_GddNegRespError = DCM_E_SECURITYACCESSDENIED;
          }  
        }
        else
        {
          /* Report the Request out of range NRC */
          Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;
        }      
      }
    }
    else
    {
      /* Report the Request out of range NRC */
      Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;
    }
    Dcm_RoutineHandleResponse((uint8)LddReturnValue, LusRIDIndex);
  } 

  return requestResult;
}

/*******************************************************************************
** Function Name        : Dcm_StartRoutineUnPackSignal                        **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function unpacks the signal value from the     **
**                        routine control option record passed in the start   **
**                        routine request and invokes the corresponding start **
**                        API and invokes the function to pack the output     **
**                        signal value.                                       **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GblProtocolEndianess       **
**                                                                            **
*******************************************************************************/
FUNC(Std_ReturnType, DCM_CODE) Dcm_StartRoutineUnPackSignal(
uint16 LusRoutineIdentifier, uint16 LusRIDIndex,
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_VAR)LpRIDTAB;
  Std_ReturnType LddReturnValue;
 
  #if(DCM_ROUTINE_START_INSIGNAL_CONFIGURED == STD_ON)
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpRequestData;
  uint32 LulTotalSignalLength;
  uint16 LusNumOfSignals;
  uint16 LusSignalCount;
  uint8 LucByteCount;
  uint8 LucSignalType;
  Dcm_PackUnpackSignalData LddUnPackSignal;
  P2CONST(Dcm_StartRoutineInSignalType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineInSignalInfo;
  #endif

  #if((DCM_ROUTINE_START_INSIGNAL_CONFIGURED == STD_ON) || \
  (DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED == STD_ON))
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;
  #endif
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  #if((DCM_ROUTINE_START_INSIGNAL_CONFIGURED == STD_ON) || \
  (DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED == STD_ON))
  LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;
  #endif

  LddReturnValue = E_NOT_OK;
  Dcm_GddOpStatus = DCM_INITIAL;

  #if(DCM_ROUTINE_START_INSIGNAL_CONFIGURED == STD_ON)
  if(NULL_PTR == LpRoutineSignalInfo)
  {
    /* Never be reached here */
    Dcm_GddNegRespError = DCM_E_CONDITIONSNOTCORRECT;
  }
  else if((LpRoutineSignalInfo->ucNumOfStartRtnInSignal > DCM_ZERO) &amp;&amp;
       (NULL_PTR != LpRoutineSignalInfo->pStartRoutineIn))
  {
    /* Initialize pointer to the Start Routine In Signal */
    LpRoutineInSignalInfo = LpRoutineSignalInfo->pStartRoutineIn;
    LulTotalSignalLength = DCM_ZERO;
    
    /* Count the number of Start Routine In Signal */
    LusNumOfSignals = LpRoutineSignalInfo->ucNumOfStartRtnInSignal;  
    
    for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; LusSignalCount++)
    {
      LucSignalType = LpRoutineInSignalInfo[LusSignalCount].ucSignalType;
          
      if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
      ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp;
      (LucSignalType == DCM_FIVE))
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ulSignalLength;
  
        if(pMsgContext->reqDataLen > (LulTotalSignalLength + DCM_THREE))
        {
          /* Report the incorrect message length NRC */
          Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
        }
      }
      else if((LusSignalCount + DCM_ONE) == LusNumOfSignals)
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ucSignalSize;
  
        if(pMsgContext->reqDataLen != (LulTotalSignalLength + DCM_THREE))
        {
          /* Report the incorrect message length NRC */
          Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
        }
      }
      else
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ucSignalSize;
      }
    }

    if(Dcm_GddNegRespError == DCM_E_POSITIVERESPONSE)
    {
      LddUnPackSignal.ulSignalLength = (uint32)0x00;
      LddUnPackSignal.ucShiftBits = (uint8)0x00;
      LddUnPackSignal.ucStartMask = (uint8)0x00;
      LddUnPackSignal.ucEndMask = (uint8)0x00;
      LddUnPackSignal.ucSignalType = (uint8)0x00;
      LddUnPackSignal.ucSignalTypeorSize = (uint8)0x00;
      LddUnPackSignal.ucSignalSize = (uint8)0x00;
      LddUnPackSignal.ucSignMask = (uint8)0x00;
     
      LucByteCount = DCM_ZERO;
      for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; LusSignalCount++)
      {
        /* Initialize Global pointer to the RoutineSignalInData */
        Dcm_GpRoutineSignalInDataPtr = &amp;Dcm_GaaRoutineSignalInData[LucByteCount];
      
        /* Fetching the values of ucNoOfShiftBits, ucStartMask from generation 
        tool */
        LucSignalType = LpRoutineInSignalInfo[LusSignalCount].ucSignalType;
        LddUnPackSignal.ucShiftBits = LpRoutineInSignalInfo[LusSignalCount].ucNoOfShiftBits;
        LddUnPackSignal.ucEndMask = LpRoutineInSignalInfo[LusSignalCount].ucEndMask;
        LddUnPackSignal.ucSignalType = LucSignalType;
        LddUnPackSignal.ucSignMask = LpRoutineInSignalInfo[LusSignalCount].ucSignMask;
        
        if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp; 
        ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp;
        (LucSignalType == DCM_FIVE))
        {  
          uint8 minNumOfReq = DCM_THREE + LpRoutineInSignalInfo[LusSignalCount].ucSignalStartByte;
          LddUnPackSignal.ulSignalLength = (uint32)pMsgContext->reqDataLen - (uint32)minNumOfReq;
          Dcm_GusCurrentDataLength = (uint16)LddUnPackSignal.ulSignalLength;
        }
        else
        {
          LddUnPackSignal.ucSignalSize = LpRoutineInSignalInfo[LusSignalCount].ucSignalSize;
        }    
        
        LpRequestData = &amp;pMsgContext->reqData[DCM_THREE + 
        (LpRoutineInSignalInfo[LusSignalCount].ucSignalStartByte)];
        
        /* Call the function Unpack Function */
        if(LpRoutineInSignalInfo[LusSignalCount].ucRdFuncIndex &lt; Dcm_Num_Of_SigRdFuncPtr)
        {
          Dcm_GaaSigRdFuncPtr[LpRoutineInSignalInfo[LusSignalCount].ucRdFuncIndex].pRdFuncPtr
          (LddUnPackSignal, LpRequestData, 
            (P2VAR(void, AUTOMATIC, DCM_APPL_DATA))Dcm_GpRoutineSignalInDataPtr);
        }
        
        LucByteCount += LucSignalType;
      }
    }
  }
  /* Check if the request length is three, if no RoutineInSignal is configured */
  else
  #endif    
  {
    if(pMsgContext->reqDataLen != DCM_THREE)
    {
      /* Report the incorrect message length NRC */
      Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
    }
    else
    {
      /* Do Nothing */
    }
  }
  
  if(Dcm_GddNegRespError == DCM_E_POSITIVERESPONSE)
  {
    /* Update return value */
    LddReturnValue = E_OK;
  }

  return(LddReturnValue);
}

/*******************************************************************************
** Function Name        : Dcm_StopRoutineUnPackSignal                         **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function unpacks the signal value from the     **
**                        routine control option record passed in the stop    **
**                        routine request and invokes the corresponding start **
**                        API and invokes the function to pack the output     **
**                        signal value.                                       **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GblProtocolEndianess       **
**                                                                            **
*******************************************************************************/
FUNC(Std_ReturnType, DCM_CODE) Dcm_StopRoutineUnPackSignal(
uint16 LusRoutineIdentifier, uint16 LusRIDIndex, 
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_VAR)LpRIDTAB;
  Std_ReturnType LddReturnValue;

  #if(DCM_ROUTINE_STOP_INSIGNAL_CONFIGURED == STD_ON)
  uint32 LulTotalSignalLength;
  uint16 LusNumOfSignals;
  uint16 LusSignalCount;
  uint8 LucByteCount;
  uint8 LucSignalType;
  Dcm_PackUnpackSignalData LddUnPackSignal;
  P2CONST(Dcm_StopRoutineInSignalType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineInSignalInfo;
  #endif

  #if((DCM_ROUTINE_STOP_INSIGNAL_CONFIGURED == STD_ON) || \
  (DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED == STD_ON))
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;
  #endif
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  #if((DCM_ROUTINE_STOP_INSIGNAL_CONFIGURED == STD_ON) || \
  (DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED == STD_ON))
  LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;
  #endif

  LddReturnValue = E_NOT_OK;
  Dcm_GddOpStatus = DCM_INITIAL;

  #if(DCM_ROUTINE_STOP_INSIGNAL_CONFIGURED == STD_ON)
  LulTotalSignalLength = DCM_ZERO;

  if(NULL_PTR == LpRoutineSignalInfo)
  {
    Dcm_GddNegRespError = DCM_E_CONDITIONSNOTCORRECT;
  }
  else if((LpRoutineSignalInfo->ucNumOfStopRtnInSignal != DCM_ZERO) &amp;&amp; 
     (NULL_PTR != LpRoutineSignalInfo->pStopRoutineIn))
  {
    /* Initialize pointer to the stop Routine In Signal */
    LpRoutineInSignalInfo = LpRoutineSignalInfo->pStopRoutineIn;
    
    /* Count the number of Start Routine In Signal */
    LusNumOfSignals = LpRoutineSignalInfo->ucNumOfStopRtnInSignal;
    for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; LusSignalCount++)
    {
      LucSignalType = LpRoutineInSignalInfo[LusSignalCount].ucSignalType;
   
      if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
      ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp;
      (LucSignalType == DCM_FIVE))
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ulSignalLength;

        if(pMsgContext->reqDataLen > (LulTotalSignalLength + DCM_THREE))
        {
             /* Report the incorrect message length NRC */
             Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
        }
      }
      else if((LusSignalCount + DCM_ONE) == LusNumOfSignals)
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ucSignalSize;
          
        if(pMsgContext->reqDataLen != (LulTotalSignalLength + DCM_THREE))
        {
          /* Report the incorrect message length NRC */
          Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
        }
      }
      else
      {
        LulTotalSignalLength += LpRoutineInSignalInfo[LusSignalCount].ucSignalSize;
      }
    }

    /* Check whether no NRC is reported */
    if(Dcm_GddNegRespError == DCM_E_POSITIVERESPONSE)
    {
      /* Check if the request for start routine is requested prior to stop routine request */
      if(LpRIDTAB->ucStartStopRIDFlag == DCM_ROUTINE_START_MASK)
      {  
        /* Initialize pointer to the stop Routine In Signal */
        LpRoutineInSignalInfo = LpRoutineSignalInfo->pStopRoutineIn;
          
        LusNumOfSignals = LpRoutineSignalInfo->ucNumOfStopRtnInSignal;
          
        LucByteCount = DCM_ZERO;
               
        for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals;
        LusSignalCount++)
        {                   
          Dcm_GpRoutineSignalInDataPtr = (P2VAR(void, AUTOMATIC, DCM_APPL_DATA)) &amp; Dcm_GaaRoutineSignalInData[LucByteCount];
               
          LucSignalType = LpRoutineInSignalInfo->ucSignalType;
          LddUnPackSignal.ucShiftBits = LpRoutineInSignalInfo->ucNoOfShiftBits;
          LddUnPackSignal.ucEndMask = LpRoutineInSignalInfo->ucEndMask;
          LddUnPackSignal.ucSignalType = LucSignalType;  
               
          if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
          ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp;
          (LucSignalType == DCM_FIVE))
          {
            uint8 minNumOfReq = DCM_THREE + LpRoutineInSignalInfo->ucSignalStartByte;
            LddUnPackSignal.ulSignalLength = (uint32)pMsgContext->reqDataLen - (uint32)minNumOfReq;
            
            Dcm_GusCurrentDataLength = (uint16)LddUnPackSignal.ulSignalLength;
          }
          else
          {
            LddUnPackSignal.ucSignalSize = LpRoutineInSignalInfo->ucSignalSize;
          }
        }
      }
      else
      {
        Dcm_GddNegRespError = DCM_E_REQUESTSEQUENCEERROR;
      }
    }
  }
  else
  #endif
  {
    if(pMsgContext->reqDataLen != DCM_THREE)
    {
      /* Report the incorrect message length NRC */
      Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
    }
    else if(LpRIDTAB->ucStartStopRIDFlag != DCM_ROUTINE_START_MASK)
    {
      /* Report the incorrect sequence NRC */
      Dcm_GddNegRespError = DCM_E_REQUESTSEQUENCEERROR;
    }
    else
    {
      /* Do nothing */
    }
  }
  
  if(Dcm_GddNegRespError == DCM_E_POSITIVERESPONSE)
  {
    /* Update return value */
    LddReturnValue = E_OK;
  }

  return(LddReturnValue);
}  
    
/*******************************************************************************
** Function Name        : Dcm_RequestResultRoutinePackSignal                  **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function invokes the corresponding request     **
**                        result API and also packs the output signal value   **
**                        in routine status record  of request result routine **
**                        response.                                           **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GblProtocolEndianess       **
**                                                                            **
*******************************************************************************/
FUNC(Std_ReturnType, DCM_CODE) Dcm_RequestResultRoutinePackSignal(
uint16 LusRoutineIdentifier, uint16 LusRIDIndex, 
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_VAR)LpRIDTAB;
  Std_ReturnType LddReturnValue;

  #if(DCM_ROUTINE_REQUEST_OUTSIGNAL_CONFIGURED == STD_ON)
  P2CONST(Dcm_RequestResOutSignalType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineOutSignalInfo;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpResponseData;
  uint8 LucUint8ByteCount;
  uint8 LucUint16ByteCount;
  uint8 LucUint32ByteCount;
  uint16 LusNumOfSignals;
  uint16 LusSignalCount;
  uint8 LucSignalType;
  Dcm_PackUnpackSignalData LddPackSignal;
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;

  LucUint8ByteCount = DCM_ZERO;
  LucUint16ByteCount = DCM_ZERO;
  LucUint32ByteCount = DCM_ZERO;
  #endif

  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  Dcm_GddOpStatus = DCM_INITIAL;
  LddReturnValue = E_NOT_OK; 

  if(pMsgContext->reqDataLen != DCM_THREE)
  {
    /* Report the incorrect message length NRC */
    Dcm_GddNegRespError = DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT;
  }
  else
  {
    if((LpRIDTAB->ucStartStopRIDFlag == DCM_ROUTINE_STOP_MASK) || 
       (LpRIDTAB->ucStartStopRIDFlag == DCM_ROUTINE_START_MASK))
    {  
      if(Dcm_ServicePendingStatus.ucRoutineReqFunc == DCM_FALSE)
      {
        LddReturnValue = Dcm_RoutineSignalFunction(DCM_ROUTINE_CTRL_REQUEST_RESULT,
          LusRoutineIdentifier);
        Dcm_ServicePendingStatus.ucRoutineReqFunc = DCM_TRUE;

        if((LpRIDTAB->blStopRoutineSupported == DCM_TRUE) &amp;&amp; 
           (LpRIDTAB->ucStartStopRIDFlag == DCM_ROUTINE_STOP_MASK))
        {
          LpRIDTAB->ucStartStopRIDFlag = DCM_ZERO;
        }
      }
      
      #if(DCM_ROUTINE_REQUEST_OUTSIGNAL_CONFIGURED == STD_ON)
      LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;

      if(NULL_PTR != LpRoutineSignalInfo)
      {
        if((LddReturnValue == E_OK) &amp;&amp; 
           (LpRoutineSignalInfo->ucNumOfRtnRequestResOutSignal > DCM_ZERO) &amp;&amp;
           (NULL_PTR != LpRoutineSignalInfo->pRequestResOut))
        {
          LddPackSignal.ulSignalLength = (uint32)0x00;
          LddPackSignal.ucShiftBits = (uint8)0x00;
          LddPackSignal.ucStartMask = (uint8)0x00;
          LddPackSignal.ucEndMask = (uint8)0x00;
          LddPackSignal.ucSignalType = (uint8)0x00;
          LddPackSignal.ucSignalTypeorSize = (uint8)0x00;
          LddPackSignal.ucSignalSize = (uint8)0x00;
          LddPackSignal.ucSignMask = (uint8)0x00;
  
          LpRoutineOutSignalInfo = LpRoutineSignalInfo->pRequestResOut;
   
          LusNumOfSignals = LpRoutineSignalInfo->ucNumOfRtnRequestResOutSignal;
  
          for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; 
              LusSignalCount++)
          {    
            LucSignalType = 
              ((LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize >> DCM_FOUR) &amp; DCM_SIG_BYTE_MASK_VALUE);  
  
            if((LucSignalType == DCM_ONE) || 
               (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
            {  
              Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData[LucUint8ByteCount];
              LucUint8ByteCount++;
            }
            else if(LucSignalType == DCM_TWO)  
            {
              Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData16[LucUint16ByteCount];  
              LucUint16ByteCount++;
            }
            else if(LucSignalType == DCM_FOUR)  
            {
              Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData32[LucUint32ByteCount];
              LucUint32ByteCount++;
            }
            else
            {
              /* To avoid QAC warning */
            }          
            LddPackSignal.ucShiftBits = 
            LpRoutineOutSignalInfo[LusSignalCount].ucNoOfShiftBits;
            LddPackSignal.ucStartMask = LpRoutineOutSignalInfo[LusSignalCount].ucStartMask;
            LddPackSignal.ucEndMask = LpRoutineOutSignalInfo[LusSignalCount].ucEndMask;
            LddPackSignal.ucSignalType = LucSignalType;   
                  
            if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
            ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp; 
            (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
            {  
              LddPackSignal.ulSignalLength  = Dcm_GusCurrentDataLength;
              Dcm_GusLastSignalLength = (uint16) LpRoutineOutSignalInfo[LusSignalCount].ulSignalLength;
              Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_TRUE;
            }
            else
            {          
              LddPackSignal.ucSignalTypeorSize = 
              LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize;
              Dcm_GusLastSignalLength = DCM_ZERO;
              Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_FALSE;
            }  
            
            LpResponseData = &amp;pMsgContext->resData[DCM_THREE + 
            (LpRoutineOutSignalInfo[LusSignalCount].ucSignalStartByte)];
  
            if(LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex &lt; Dcm_Num_Of_SigWrFuncPtr)
            {
              Dcm_GaaSigWrFuncPtr[LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex].pWrFuncPtr
              (LddPackSignal, LpResponseData, 
                (P2VAR(void, AUTOMATIC, DCM_APPL_DATA))Dcm_GpRoutineSignalOutDataPtr);
            }
          }
        }
      }
      #endif
    }
    else
    {
      Dcm_GddNegRespError = DCM_E_REQUESTSEQUENCEERROR;
    }
  }  
  return(LddReturnValue);
}  

/*******************************************************************************
** Function Name        : Dcm_StartRoutinePackSignal                          **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function packs the output signal value in the  **
**                        routine status record  of start routine response.   **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GblProtocolEndianess       **
**                                                                            **
*******************************************************************************/
#if(DCM_ROUTINE_START_OUTSIGNAL_CONFIGURED == STD_ON)
FUNC(void, DCM_CODE) Dcm_StartRoutinePackSignal(uint16 LusRIDIndex,
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_VAR)LpRIDTAB;
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;
  P2CONST(Dcm_StartRoutineOutSignalType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineOutSignalInfo;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpResponseData;
  uint8 LucUint8ByteCount;
  uint8 LucUint16ByteCount;
  uint8 LucUint32ByteCount;
  uint16 LusNumOfSignals;
  uint16 LusSignalCount;
  uint8 LucSignalType;
  Dcm_PackUnpackSignalData LddPackSignal;
  
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;
  
  LucUint8ByteCount = DCM_ZERO;
  LucUint16ByteCount = DCM_ZERO;
  LucUint32ByteCount = DCM_ZERO;
  
  LddPackSignal.ulSignalLength = (uint32)0x00;
  LddPackSignal.ucShiftBits = (uint8)0x00;
  LddPackSignal.ucStartMask = (uint8)0x00;
  LddPackSignal.ucEndMask = (uint8)0x00;
  LddPackSignal.ucSignalType = (uint8)0x00;
  LddPackSignal.ucSignalTypeorSize = (uint8)0x00;
  LddPackSignal.ucSignalSize = (uint8)0x00;
  LddPackSignal.ucSignMask = (uint8)0x00;

  if(NULL_PTR != LpRoutineSignalInfo)
  {
    LusNumOfSignals = LpRoutineSignalInfo->ucNumOfStartRtnOutSignal;
    
    if(NULL_PTR != LpRoutineSignalInfo->pStartRoutineOut)
    {
      LpRoutineOutSignalInfo = LpRoutineSignalInfo->pStartRoutineOut;

      if(NULL_PTR != LpRoutineOutSignalInfo)
      {
        for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; LusSignalCount++)
        {      
          LucSignalType = 
          ((LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize >> DCM_FOUR) &amp; DCM_SIG_BYTE_MASK_VALUE);
      
          if((LucSignalType == DCM_ONE) || 
          (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
          {  
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData[LucUint8ByteCount];
            LucUint8ByteCount++;
          }
          else if(LucSignalType == DCM_TWO)  
          {
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData16[LucUint16ByteCount];  
            LucUint16ByteCount++;
          }
          else if(LucSignalType == DCM_FOUR)  
          {
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData32[LucUint32ByteCount];
            LucUint32ByteCount++;
          }    
          else
          {
            /* To avoid QAC warning */
          } 
          LddPackSignal.ucShiftBits = LpRoutineOutSignalInfo[LusSignalCount].ucNoOfShiftBits;
          LddPackSignal.ucStartMask = LpRoutineOutSignalInfo[LusSignalCount].ucStartMask;
          LddPackSignal.ucEndMask = LpRoutineOutSignalInfo[LusSignalCount].ucEndMask;
          LddPackSignal.ucSignalType = LucSignalType;
          
          if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
          ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp; 
          (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
          {  
            LddPackSignal.ulSignalLength = Dcm_GusCurrentDataLength;
            Dcm_GusLastSignalLength = (uint16) LpRoutineOutSignalInfo[LusSignalCount].ulSignalLength;
            Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_TRUE;
          }
          else
          {          
            LddPackSignal.ucSignalTypeorSize = 
            LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize;
            Dcm_GusLastSignalLength = DCM_ZERO;
            Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_FALSE;
          }  
      
          LpResponseData = 
            &amp;pMsgContext->resData[DCM_THREE + (LpRoutineOutSignalInfo[LusSignalCount].ucSignalStartByte)];
      
          if(LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex &lt; Dcm_Num_Of_SigWrFuncPtr)
          {
            Dcm_GaaSigWrFuncPtr[LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex].pWrFuncPtr
            (LddPackSignal, LpResponseData, 
              (P2VAR(void, AUTOMATIC, DCM_APPL_DATA))Dcm_GpRoutineSignalOutDataPtr);
          }
        }
      }
    }
  }
}
#endif

/*******************************************************************************
** Function Name        : Dcm_StopRoutinePackSignal                           **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function packs the output signal value in the  **
**                        routine status record  of stop routine response.    **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GblProtocolEndianess       **
**                                                                            **
*******************************************************************************/
#if(DCM_ROUTINE_STOP_OUTSIGNAL_CONFIGURED == STD_ON)
FUNC(void, DCM_CODE) Dcm_StopRoutinePackSignal(uint16 LusRIDIndex, 
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(Dcm_RoutineConfigType, AUTOMATIC, DCM_VAR)LpRIDTAB;
  P2CONST(Dcm_RoutineSignalInfoType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineSignalInfo;
  P2CONST(Dcm_StopRoutineOutSignalType, AUTOMATIC, DCM_APPL_CONST)
  LpRoutineOutSignalInfo;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpResponseData;
  uint8 LucUint8ByteCount;
  uint8 LucUint16ByteCount;
  uint8 LucUint32ByteCount;
  uint16 LusNumOfSignals;
  uint16 LusSignalCount;
  uint8 LucSignalType;
  Dcm_PackUnpackSignalData LddPackSignal;
  
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  LpRoutineSignalInfo = LpRIDTAB->pRoutineSignalInfo;
  LucUint8ByteCount = DCM_ZERO;
  LucUint16ByteCount = DCM_ZERO;
  LucUint32ByteCount = DCM_ZERO;
  
  LddPackSignal.ulSignalLength = (uint32)0x00;
  LddPackSignal.ucShiftBits = (uint8)0x00;
  LddPackSignal.ucStartMask = (uint8)0x00;
  LddPackSignal.ucEndMask = (uint8)0x00;
  LddPackSignal.ucSignalType = (uint8)0x00;
  LddPackSignal.ucSignalTypeorSize = (uint8)0x00;
  LddPackSignal.ucSignalSize = (uint8)0x00;
  LddPackSignal.ucSignMask = (uint8)0x00;

  if(NULL_PTR != LpRoutineSignalInfo)
  {
    if((LpRoutineSignalInfo->ucNumOfStopRtnOutSignal != DCM_ZERO) &amp;&amp;
       (NULL_PTR != LpRoutineSignalInfo->pStopRoutineOut))
    {  
      /* Initialize pointer to the stop Routine In Signal */
      LpRoutineOutSignalInfo = LpRoutineSignalInfo->pStopRoutineOut;

      if(NULL_PTR != LpRoutineOutSignalInfo)
      {
        /* ucNumOfStopRtnInSignal ->ucNumOfStopRtnOutSignal by YoungJin Yun */
        LusNumOfSignals = LpRoutineSignalInfo->ucNumOfStopRtnOutSignal;
    
        for(LusSignalCount = 0; LusSignalCount &lt; LusNumOfSignals; LusSignalCount++)
        {      
          LucSignalType = 
          ((LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize >> DCM_FOUR) &amp; DCM_SIG_BYTE_MASK_VALUE);
      
          if((LucSignalType == DCM_ONE) || 
          (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
          {  
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData[LucUint8ByteCount];
            LucUint8ByteCount++;
          }
          else if(LucSignalType == DCM_TWO)  
          {
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData16[LucUint16ByteCount];
            LucUint16ByteCount++;
          }
          else if(LucSignalType == DCM_FOUR)  
          {
            Dcm_GpRoutineSignalOutDataPtr = &amp;Dcm_GaaRoutineSignalOutData32[LucUint32ByteCount];
            LucUint32ByteCount++;
          }
          else
          {
            /* To avoid QAC warning */
          } 
          
          LddPackSignal.ucShiftBits = LpRoutineOutSignalInfo[LusSignalCount].ucNoOfShiftBits;
          LddPackSignal.ucStartMask = LpRoutineOutSignalInfo[LusSignalCount].ucStartMask;
          LddPackSignal.ucEndMask = LpRoutineOutSignalInfo[LusSignalCount].ucEndMask;
          LddPackSignal.ucSignalType = LucSignalType;
        
          if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
          ((LusSignalCount + DCM_ONE) == LusNumOfSignals) &amp;&amp; 
          (LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize == 0x50))
          {  
            LddPackSignal.ulSignalLength  = Dcm_GusCurrentDataLength;
            Dcm_GusLastSignalLength = (uint16) LpRoutineOutSignalInfo[LusSignalCount].ulSignalLength;
            Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_TRUE;
          }
          else
          {          
            LddPackSignal.ucSignalTypeorSize =
            LpRoutineOutSignalInfo[LusSignalCount].ucSignalTypeorSize;
            Dcm_DspServiceProcessingSts.RoutineVariableLength = DCM_FALSE;
            Dcm_GusLastSignalLength = DCM_ZERO;
          }  
        
          LpResponseData = &amp;pMsgContext->resData[DCM_THREE + 
          (LpRoutineOutSignalInfo[LusSignalCount].ucSignalStartByte)];
    
          if(LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex &lt; Dcm_Num_Of_SigWrFuncPtr)
          {
            Dcm_GaaSigWrFuncPtr[LpRoutineOutSignalInfo[LusSignalCount].ucWrFuncIndex].pWrFuncPtr
            (LddPackSignal, LpResponseData, 
            (P2VAR(void, AUTOMATIC, DCM_APPL_DATA))Dcm_GpRoutineSignalOutDataPtr);
          }
        }
      }
    }
  }
}
#endif

/*******************************************************************************
** Function Name        : Dcm_RoutineHandleResponse                           **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function checks the return value of the        **
**                        start/stop/Requestresult function calls and         **
**                        handles the response transmission accordingly.      **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : Dcm_GddNegRespError            **
**                                                                            **
*******************************************************************************/
FUNC(void, DCM_CODE)Dcm_RoutineHandleResponse(uint8 LucStatus, 
  uint16 LusRIDIndex) 
{
  P2CONST(Dcm_RoutineConfigType, AUTOMATIC, DCM_APPL_CONST)LpRIDTAB;
  uint32 LulLength;
  uint16 LusRoutineIdentifier;
  uint8 LucSubFunction;

  LucSubFunction = Dcm_GstMsgContext.reqData[DCM_ZERO];
  LpRIDTAB = &amp;Dcm_GaaRoutineControlConfig[LusRIDIndex];
  
  if(Dcm_GddOpStatus != DCM_CANCEL)
  {
    if(Dcm_GddNegRespError == DCM_E_POSITIVERESPONSE)
    {
      LusRoutineIdentifier = LpRIDTAB->usRoutineIdentifier;
      if(LucStatus == E_OK)
      {
        Dcm_GddOpStatus = DCM_INITIAL;
        if((LusRoutineIdentifier &lt; (uint16)0xE000U) || (LusRoutineIdentifier > (uint16)0xE0FFU))
        {
          if(LucSubFunction == DCM_ROUTINE_CTRL_START)
          {
            if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
            (Dcm_DspServiceProcessingSts.RoutineVariableLength == DCM_TRUE)) 
            {
              LulLength = ((LpRIDTAB->ulRoutineTotalStartOutLength + 
              Dcm_GusCurrentDataLength) - Dcm_GusLastSignalLength);
            }
            else
            {
              LulLength = LpRIDTAB->ulRoutineTotalStartOutLength;
            }
          }
          else if(LucSubFunction == DCM_ROUTINE_CTRL_STOP)
          {
            if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
            (Dcm_DspServiceProcessingSts.RoutineVariableLength == DCM_TRUE))
            {
              LulLength = ((LpRIDTAB->ulRoutineTotalStopOutLength + 
              Dcm_GusCurrentDataLength) - Dcm_GusLastSignalLength);
            }
            else
            {
              LulLength = LpRIDTAB->ulRoutineTotalStopOutLength;
            }
          }
          else
          {
            if((LpRIDTAB->blRoutineFixedLength == FALSE) &amp;&amp;
            (Dcm_DspServiceProcessingSts.RoutineVariableLength == DCM_TRUE))
            {
              LulLength = ((LpRIDTAB->ulRoutineTotalReqResOutLength + 
              Dcm_GusCurrentDataLength) - Dcm_GusLastSignalLength);
            }
            else
            {
              LulLength = LpRIDTAB->ulRoutineTotalReqResOutLength;
            }
          }            
          Dcm_GstMsgContext.resDataLen = DCM_THREE + LulLength;
          Dcm_GstMsgContext.resData[DCM_ZERO] = Dcm_GstMsgContext.reqData[DCM_ZERO];
          Dcm_GstMsgContext.resData[DCM_ONE] = Dcm_GstMsgContext.reqData[DCM_ONE];
          Dcm_GstMsgContext.resData[DCM_TWO] = Dcm_GstMsgContext.reqData[DCM_TWO];
          Dcm_ServicePendingStatus.ucRoutinePendingStatus = DCM_FALSE;
          Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus = DCM_FALSE;
        }
        else
        {
            /* To avoid QAC Warnings */
        }
      }
      else if(LucStatus == (uint8) DCM_E_PENDING)
      {
        Dcm_GddOpStatus = DCM_PENDING;
        /* Set response pending flag to True */
        Dcm_ServicePendingStatus.ucRoutinePendingStatus = DCM_TRUE;
      }
      else if(LucStatus == (uint8) DCM_E_FORCE_RCRRP)
      {
        Dcm_GddOpStatus = DCM_FORCE_RCRRP_OK;
        
        /* Set Force responsepending flag to True */
        Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus = DCM_TRUE;

        Dcm_GusMaxNoOfForceRespPend++;
        
        if(Dcm_GusMaxNoOfForceRespPend > (uint16)DCM_DIAG_RESP_MAX_NUM_RESPEND)
        {
          Dcm_GddOpStatus = DCM_CANCEL;
          Dcm_GddNegRespError = DCM_E_GENERALREJECT;
          /* Call to cancel the operation , so return value is ignored */
          (void)Dcm_RoutineSignalFunction(Dcm_GucRoutineSubFunction, Dcm_GusRoutineIdentifier);
          Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus = DCM_FALSE;      
        }
        else
        {
          /* Update the negative response service Id in the response buffer */
          Dcm_GaaResponseBuf[DCM_ZERO] = DCM_NEGATIVE_RESPONSE_SID;
          /* Update the service Id in the response buffer */
          Dcm_GaaResponseBuf[DCM_ONE] =
          ((Dcm_GstMsgContext.idContext) &amp; (DCM_BIT6_AND_MASK));
          /* Update the NRC in the response buffer */
          Dcm_GaaResponseBuf[DCM_TWO] =
          DCM_E_REQUESTCORRECTLYRECEIVEDRESPONSEPENDING;
          /* Update the bit flag for negative response to TRUE */
          Dcm_TxRespStatus.ucNegResp = DCM_TRUE;

          Dcm_GblRespPendConfirmation = DCM_FALSE;
          /* Invoke the internal function to transmit negative response */
          Dcm_DslPduRTransmit();    
        }
      }
      else
      {
        Dcm_GddNegRespError = DCM_E_CONDITIONSNOTCORRECT;
      }
    }
  
    if((Dcm_ServicePendingStatus.ucRoutinePendingStatus == DCM_FALSE) &amp;&amp;
    (Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus == DCM_FALSE))
    {
      Dcm_GusMaxNoOfForceRespPend = DCM_ZERO;
      Dcm_ServicePendingStatus.ucRoutineReqFunc = DCM_FALSE;
      Dcm_GusLastSignalLength = DCM_ZERO;
      
      /* Send response from main function */
      Dcm_GblSendResponse = DCM_TRUE; 
    }
    else
    {
      Dcm_GucRoutineSubFunction = Dcm_GstMsgContext.reqData[DCM_ZERO] &amp; DCM_SUBFUNCTION_MASK;
      Dcm_GusRoutineIdentifier = LpRIDTAB->usRoutineIdentifier;
      Dcm_GusRIDIndex = LusRIDIndex;
    }  
  }
  else
  {
    /* Reset OpStatus */
    Dcm_GddOpStatus = DCM_INITIAL;
  }
}    

/*******************************************************************************
** Function Name        : Dcm_DspHandleOBDRoutineControl                      **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function invokes the corresponding function    **
**                        configured for RID and gets the output signal value **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : None                           **
**                                                                            **
*******************************************************************************/
#if(DCM_OBD_REQ_CTLRL_ONBOADSYSTEM_SERVICE == STD_ON)
FUNC(void, DCM_CODE) Dcm_DspHandleOBDRoutineControl(
P2VAR(Dcm_MsgContextType, AUTOMATIC, DCM_APPL_DATA) pMsgContext)
{
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpReqResData;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpTxBuffer;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpInBuffer;
  P2VAR(uint8, AUTOMATIC, DCM_APPL_DATA) LpOutBuffer;
  uint8 LucReqBuffer[DCM_ONE];
  uint8 LucTIDValue;
  uint8 LucTIDIndex;
  uint8 LucMix_DemRPort;
  Std_ReturnType LddReturnValue = E_NOT_OK;
  
  /* Get the pointer to the request data buffer */
  LpReqResData = pMsgContext->reqData;  
  LucTIDValue = LpReqResData[DCM_TWO];    
  LucReqBuffer[DCM_ZERO] = LpReqResData[DCM_TWO];  
  LucMix_DemRPort = DCM_EIGHT;
  
  /* It scans for all PIDs */
  /* To find whether the PIDs belongs to Availability PIDs or Dem or RPort */
  LddReturnValue = Dcm_DspGetAvailibiltyIDStatus(DCM_GET_TID,
  &amp;LucReqBuffer[DCM_ZERO], DCM_ONE, LucMix_DemRPort);
  
  /* Validate DCM_AVAIL_ID for response length */
  if(LddReturnValue == DCM_AVAIL_ID)
  {
    /* Total response = Number of PIDs + (Number of PIDs) * four */
    LpTxBuffer = &amp;pMsgContext->resData[DCM_THREE];
    Dcm_DspReadOBD_AvlInfo(&amp;LucReqBuffer[DCM_ZERO], LpTxBuffer,
    DCM_FOUR, DCM_ONE, DCM_GET_TID);
    pMsgContext->resDataLen = DCM_FIVE;     
  }
  else if(LddReturnValue == DCM_OTHER_PID)
  {    
    LddReturnValue = Dcm_GetIDIndex(DCM_GET_TID, LucTIDValue, &amp;LucTIDIndex);
    if(LddReturnValue == E_OK)
    {
      LpOutBuffer = &amp;pMsgContext->resData[DCM_THREE];
      LpInBuffer = &amp;pMsgContext->reqData[DCM_THREE];
      LddReturnValue = Dcm_GaaRequestControlConfig[LucTIDIndex].pReqControlFnc(LpOutBuffer, LpInBuffer);
  
      if(LddReturnValue == E_OK)
      {
        pMsgContext->resDataLen = DCM_ONE +
        Dcm_GaaRequestControlConfig[LucTIDIndex].ucRequestControlOutBufferSize;
      }
      else
      {
        Dcm_GddNegRespError = DCM_E_CONDITIONSNOTCORRECT;
      }      
    }
    else
    {
      Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;
    }
  }
  else
  {
    Dcm_GddNegRespError = DCM_E_REQUESTOUTOFRANGE;
  }
}
#endif

/*******************************************************************************
** Function Name        : Dcm_RoutineSignalFunction                           **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This function invokes the corresponding function    **
**                        configured for RID and gets the output signal value **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : None                           **
**                                                                            **
*******************************************************************************/
FUNC(Std_ReturnType, DCM_CODE) Dcm_RoutineSignalFunction
  (uint8 LucSubFunction, uint16 LusRoutineIdentifier)
{
  Dcm_OpStatusType LddOpStatus;
  Dcm_NegativeResponseCodeType LddNegativeErrorCode;
  Std_ReturnType LddReturnValue;
  /* Update OpStatus */
  LddNegativeErrorCode = DCM_E_POSITIVERESPONSE;
  LddOpStatus = Dcm_GddOpStatus;
  
  if(LucSubFunction == DCM_ROUTINE_CTRL_START)
  {
    switch(LusRoutineIdentifier)
    {
      $start$
      default:   LddReturnValue = E_NOT_OK;
      break;
    }
  }
  else if(LucSubFunction == DCM_ROUTINE_CTRL_STOP)
  {
    switch(LusRoutineIdentifier)
    {
      $stop$
      default:   LddReturnValue = E_NOT_OK;
      break;
    }
  }
  else
  {
    switch(LusRoutineIdentifier)
    {
      $request$
      default:   LddReturnValue = E_NOT_OK;
      break;
    }
  }
  
  if(LddReturnValue == E_NOT_OK)
  {
    /* Update the error code value in the global variable */
    Dcm_GddNegRespError = LddNegativeErrorCode;
  } 
  
  return(LddReturnValue);
}

/*******************************************************************************
** Function Name        : Dcm_RoutineMainFunction                             **
**                                                                            **
** Service ID           : NA                                                  **
**                                                                            **
** Description          : This service is used for processing the tasks of    **
**                        the main loop for routine services.                 **
**                        It is called periodically as cyclic task by the     **
**                        software system.                                    **
**                                                                            **
** Re-entrancy          : Non-Reentrant                                       **
**                                                                            **
** Input Parameters     : pMsgContext                                         **
**                                                                            **
** Output Parameters    : None                                                **
**                                                                            **
** Return parameter     : None                                                **
**                                                                            **
** Preconditions        : None                                                **
**                                                                            **
** Remarks              : Global Variable(s) : None                           **
**                                                                            **
*******************************************************************************/
FUNC(void, DCM_CODE) Dcm_RoutineMainFunction(void)
{
  Std_ReturnType LddReturnValue = E_NOT_OK;
  
  /* SWS_Dcm_00528]  If the value DCM_E_FORCE_RCRRP is returned  from an 
   * operation using Dcm_OpStatusType, the DCM shall invoke the transmit request for 
   * RCR-RP (NRC 0x78 transmission) and the DCM shall not realize further invocation 
   * of the operation till RCR-RP is transmitted.
   *    
   * [SWS_Dcm_00529]  After transmit confirmation of a RCR-RP transmitted on the 
   * context of [SWS_Dcm_00528, the DCM calls, from Dcm_MainFunction (due to call 
   * context), the operation again with OpStatus = DCM_FORCE_RCRRP_OK. */
  if((Dcm_ServicePendingStatus.ucRoutinePendingStatus == DCM_TRUE) ||
    ((Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus == DCM_TRUE) &amp;&amp;
     (Dcm_GblRespPendConfirmation == DCM_TRUE)))
  {
    Dcm_ServicePendingStatus.ucRoutinePendingStatus = DCM_FALSE;
    Dcm_ServiceForcePendingStatus.ucRoutineForcePendingStatus = DCM_FALSE;
    Dcm_GblRespPendConfirmation = DCM_FALSE;

    if(Dcm_GusRIDIndex &lt; Dcm_Num_Of_Gaa_Routine_Control_Config)
    {
      LddReturnValue = Dcm_Internal_DcmRoutineControl(Dcm_GusRoutineIdentifier, Dcm_GusRIDIndex, &amp;Dcm_GstMsgContext);
    }

    (void)Dcm_RoutineHandleResponse((uint8)LddReturnValue, Dcm_GusRIDIndex);
  }
}
#define DCM_STOP_SEC_CODE
#include "MemMap.h"
#endif
</ROUTINE-APIS>

 </GENERAL-INFORMATION> 
 <!--
################################################################################
# Revision History:                                                            #
# Version No.  Last modified  Author            Description                    #
################################################################################
# 1.0.9        12-06-2017     Jin     Jung      #5428, #7008                   #
#                                                                              #
# 1.0.8        18-04-2017     Jin     Jung      #6973                          #
#                                                                              #
# 1.0.7        01-02-2017     Jin     Jung      #7054                          #
#                                                                              #
# 1.0.6        24-11-2016     Jin     Jung      #6649                          #
#                                                                              #
# 1.0.5        31-10-2016     Jin     Jung      #5535, #6374                   #
#                                                                              #
# 1.0.4        24-05-2016     Jin     Jung      #4717, #4925                   #
#                                                                              #
# 1.0.3        03-03-2016     Sungeol Baek      #3754, #3747                   #
#                                                                              #
# 1.0.2        21-06-2015     Youngjin Yun      #2716                          # 
#                                                                              #
# 1.0.1        20-06-2015     Sanghoon Bae      MISRA rule modification        #
#                                                                              #
# 1.0.0        10-01-2013     Autron            Initial Version                #
################################################################################
-->

/*******************************************************************************
**                                                                            **
**  (C) 2013 HYUNDAI AUTRON Co., Ltd.                                         **
**  Confidential Proprietary Information. Distribution Limited.               **
**  Do Not Copy Without Prior Permission                                      **
**                                                                            **
**  FILE-NAME : BswM_PCTypes.h                                                **
**                                                                            **
**  PRODUCT   : AUTOSAR BswM Module                                           **
**                                                                            **
**  NOTE: This file is auto generated, do not edit this file manually.        **
**                                                                            **
********************************************************************************

********************************************************************************
**                      Generation Tool Information                           **
********************************************************************************
**  Tool Version: 2.5.3                                                       **
**                                                                            **
**  Change History: Refer log file (use -l option to generate log file)       **
**                                                                            **
********************************************************************************
**                      File Generation Information                           **
*******************************************************************************/

#ifndef BSWM_PCTYPES_H
#define BSWM_PCTYPES_H

/*******************************************************************************
**                      Include Section                                       **
*******************************************************************************/
#include "BswM_Cfg.h"
#include "Std_Types.h"
#include "Rte_Type.h"
#include "Com.h"
#include "EcuM.h" 
#include "ComM.h" 
#include "SchM_BswM.h" 
#include "Dcm.h" 
#include "NvM.h" 
#include "Rte_BswM.h" 


/*******************************************************************************
**                      Global Data Types                                     **
*******************************************************************************/

typedef P2FUNC(void, BSWM_CODE, BswM_FuncPtrType)(void);



typedef struct STag_BswM_RuleInitPropertyType
{
  /* Rule function pointer */
  CONST(BswM_FuncPtrType, BSWM_CONST)pRuleFunction;
  
  /*
   Either BSWM_FALSE->0x00, BSWM_TRUE->0x01, BSWM_UNDEFINED->0x02.
   This will be used as previous rule evaluation result.
  */
  uint8 ucRuleInitState;
  
  /* Rule Nested Execution Only Status: BSWM_FALSE -> 0 or BSWM_TRUE -> 1 */
  boolean blNestedExecutionOnly;
}BswM_RuleInitPropertyType;

typedef struct STag_BswM_RuleEvaluationType
{
  /*
   * Rule evaluation result. 
   * BSWM_FALSE->0x00, BSWM_TRUE->0x01 or BSWM_UNDEFINED->0x02.
   */
  uint8 ucRulePreviousResult;
  
  /* Rule Trigger Status: BSWM_IDLE -> 0 or BSWM_READY -> 1 */
  boolean blRuleStatus;
}BswM_RuleEvaluationType;

#define BSWM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"


/* For Available Actions BswMDeadlineMonitoringControl */
typedef struct STag_BswM_DMControlType
{
  /* the index of BswM_GaaDMPduGroupList */
  uint8 ucIdEnable;
  uint8 ucIdDisable;
  
  /* the number of selected Pdu Groups */
  uint8 ucTotalEnable;
  uint8 ucTotalDisable;
}BswM_DMControlType;
      
/* For Available Actions BswMPduGroupSwitch */
typedef struct STag_BswM_PduGroupSwitchType
{
  boolean blReinit;
  
  /* the index of BswM_GaaPduGroupList */
  uint8 ucIdEnable;
  uint8 ucIdDisable;
  
  /* the number of selected Pdu Groups */
  uint8 ucTotalEnable;
  uint8 ucTotalDisable;
}BswM_PduGroupSwitchType;
      
typedef struct STag_BswM_EcuMWakeupIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  EcuM_WakeupSourceType ddEcuMWakeupSourceId;
      
  EcuM_WakeupStatusType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
      
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_EcuMWakeupIndicationProperty;
    
typedef struct STag_BswM_EcuMCurrentWakeupType
{
  
  boolean blModeValueStatus;
    
  /* Current state */
  EcuM_WakeupStatusType ddState;
}BswM_EcuMCurrentWakeupType;
    
/* Global Array to store EcuM Wakeup Indication Property */
extern CONST(BswM_EcuMWakeupIndicationProperty, BSWM_CONST)
BswM_GaaEcuMWakeupIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_WAKEUP_SOURCE];
     
typedef struct STag_BswM_DcmCommunicationRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
      
  Dcm_CommunicationModeType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
      
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_DcmCommunicationRequestProperty;
    
typedef struct STag_BswM_DcmReqCommunicationType
{
  /* Current state */
  Dcm_CommunicationModeType ddRequestedMode;
  
  boolean blModeValueStatus;
    
}BswM_DcmReqCommunicationType;
    
/* Global Array to store DcM Communication Request Property */
extern CONST(BswM_DcmCommunicationRequestProperty, BSWM_CONST)
BswM_GaaDcmComRequestProperty[BSWM_TOTAL_PORTS_OF_DCM_COM_REQUEST];
     
typedef struct STag_BswM_GenericRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
  
  /* Mode Requester Id */
  uint16 usModeRequesterId;
  
  /* Maximum Requested ids */
  uint16 usRequestedModeMax;
      
  BswM_ModeType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
      
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_GenericRequestProperty;
    
typedef struct STag_BswM_GenericRequestModeType
{
  uint16 usModeRequesterId;
  
  /* Current state */
  BswM_ModeType ddRequestedState;
  
  boolean blModeValueStatus;
    
}BswM_GenericRequestModeType;
    
    
/* Global Array to store Generic Requestport Property */
extern CONST(BswM_GenericRequestProperty, BSWM_CONST)
BswM_GaaGenericRequestProperty[BSWM_TOTAL_PORTS_OF_GENERIC_REQUEST];
     
typedef struct STag_BswM_NvMJobModeIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  uint8 ucServiceId;
      
  NvM_RequestResultType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
        
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_NvMJobModeIndicationProperty;
    
typedef struct STag_BswM_NvMCurrentJobModeType
{
  /* Current state */
  NvM_RequestResultType ddCurrentJobMode;
  
  boolean blModeValueStatus;
      
}BswM_NvMCurrentJobModeType;
    
    
/* Global Array to store LinTP Schedule Requestport Property */
extern CONST(BswM_NvMJobModeIndicationProperty, BSWM_CONST)
BswM_GaaNvMJobModeIndicationProperty[BSWM_TOTAL_PORTS_OF_NVM_CURRENT_JOB_MODE];
     
typedef struct STag_BswM_ComMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  NetworkHandleType ddNetworkId;
      
  ComM_ModeType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
      
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_ComMIndicationProperty;
    
typedef struct STag_BswM_ComMCurrentModeType
{
  /* Current state */
  ComM_ModeType ddCurrentMode;
  
  boolean blModeValueStatus;
    
}BswM_ComMCurrentModeType;
    
/* Global Array to store ComM Indication Property */
extern CONST(BswM_ComMIndicationProperty, BSWM_CONST)
BswM_GaaComMIndicationProperty[BSWM_TOTAL_PORTS_OF_COMM_INDICATION];
     
typedef struct STag_BswM_SwcModeRequestProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
     
  boolean blModeInitValueStatus;
        
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
}BswM_SwcModeRequestProperty;
    
typedef struct STag_BswM_SwcModeRequestType
{
  /* Current state */
  BswM_ModeDeclarationType ddRequestedMode;
  
  boolean blModeValueStatus;
      
}BswM_SwcModeRequestType;
    
/* Global Array to store SWC Mode Request Property */
extern CONST(BswM_SwcModeRequestProperty, BSWM_CONST)
BswM_GaaSwcModeRequestProperty[BSWM_TOTAL_PORTS_OF_SWC_MODE_REQUEST];
     
typedef struct STag_BswM_BswModeNotificationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
  
  BswM_RuleIdType ddTotalRules;
      
  BswM_ModeDeclarationType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
        
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;
      
}BswM_BswModeNotificationProperty;
    
typedef struct STag_BswM_BswModeNotificationType
{
  /* Current state */
  BswM_ModeDeclarationType ddCurrentMode;
  
  boolean blModeValueStatus;
      
}BswM_BswModeNotificationType;
    
/* Global Array to store BSW Mode Notification Property */
extern CONST(BswM_BswModeNotificationProperty, BSWM_CONST)
BswM_GaaBswModeNotificationProperty[BSWM_TOTAL_PORTS_OF_BSW_MODE_NOTIFICATION];
     
typedef struct STag_BswM_EcuMIndicationProperty
{
  P2CONST(BswM_RuleIdType, AUTOMATIC, BSWM_CONFIG_CONST) pRuleId;
      
  BswM_RuleIdType ddTotalRules;
      
  EcuM_StateType ddModeInitValue;/* init value */
      
  boolean blModeInitValueStatus;
      
  /* Either BSWM_IMMEDIATE->0/ BSWM_DEFERRED->1 */
  boolean blRequestProcessing;  
}BswM_EcuMIndicationProperty;
    
typedef struct STag_BswM_EcuMCurrentStateType
{
  /* Current state */
  EcuM_StateType ddCurrentState;
  
  boolean blModeValueStatus;
    
}BswM_EcuMCurrentStateType;
    
    
/* Global Array to store EcuM CurrentState Indication Property */
extern CONST(BswM_EcuMIndicationProperty, BSWM_CONST)
BswM_GaaEcuMIndicationProperty[BSWM_TOTAL_PORTS_OF_ECUM_INDICATION];
     


#if (BSWM_TOTAL_RULES > BSWM_ZERO)
/* Global Array to store Rule Init Property */
extern CONST(BswM_RuleInitPropertyType, BSWM_CONST) BswM_GaaRuleInitProperty[BSWM_TOTAL_RULES];
#endif

#if (BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION > BSWM_ZERO)
/* Global Array for Deferred Bsw Rules */
extern CONST(BswM_RuleIdType, BSWM_CONST) BswM_GaaDeferredBswRuleIdList[BSWM_TOTAL_DEFERRED_RULES_OF_BSW_INDICATION];
#endif

#if (BSWM_TOTAL_RULE_IDS > BSWM_ZERO)
/* Global Array for Total Rules of Mode Request Port */
extern CONST(BswM_RuleIdType, BSWM_CONST) BswM_GaaRuleIdList[BSWM_TOTAL_RULE_IDS];
#endif


#if (BSWM_NO_OF_DM_CONTROL > BSWM_ZERO)
extern CONST(BswM_DMControlType, BSWM_CONST) 
BswM_GaaDMControl[BSWM_NO_OF_DM_CONTROL];
#endif

#if (BSWM_NO_OF_DM_PDU_GROUP_LIST > BSWM_ZERO)
extern CONST(Com_IpduGroupIdType, BSWM_CONST) BswM_GaaDMPduGroupList[BSWM_NO_OF_DM_PDU_GROUP_LIST];
#endif
      

#if (BSWM_NO_OF_PDU_GROUP_SWITCH > BSWM_ZERO)
extern CONST(BswM_PduGroupSwitchType, BSWM_CONST) BswM_GaaPduGroupSwitch[BSWM_NO_OF_PDU_GROUP_SWITCH];
#endif

#if (BSWM_NO_OF_PDU_GROUP_LIST > BSWM_ZERO)
extern CONST(Com_IpduGroupIdType, BSWM_CONST) BswM_GaaPduGroupList[BSWM_NO_OF_PDU_GROUP_LIST];
#endif
      


#define BSWM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"


#endif
/*******************************************************************************
**                      End of File                                           **
*******************************************************************************/
